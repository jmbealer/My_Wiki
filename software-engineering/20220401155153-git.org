:PROPERTIES:
:ID:       dea16eb4-d34a-421b-b037-9f3e606ec001
:END:
#+title: git

what is git?
+ distributed version control system
+ replaced svn and cvs; which were centralized systems
+ a place where all code is stored is called a repository
created by Linus Torvalds in 2005; and maintained by Junio Hamano since then.

it is used for:
tracking code changes
tracking who made changes
coding collaboration

what does git do
  manage projects with Repositories
  Clone a project to work on a local copy
  Control and track changes with Staging and Committing
  Branch and Merge to allow for work on different parts and versions of a project
  Pull the latest version of the project to a local copy
  Push local updates to the main project

Working with Git
  Initialize Git on a folder, making it a Repository
  Git now creates a hidden folder to keep track of changes in that folder
  When a file is changed, added or deleted, it is considered modified
  You select the modified files you want to Stage
  The Staged files are Committed, which prompts Git to store a permanent snapshot
  of the files
  Git allows you to see the full history of every commit.
  You can revert back to any previous commit.
  Git does not store a separate copy of every file in every commit, but keeps
  track of changes made in each commit!

why Git
developers can work together from anywhere in the world.
developers can see the full history of the project.
developers can revert to earlier versions of a project.

what is GitHub
git is not the same as github
github makes tools that use git

check if git is properly install
by using the git --version command
should show git version X.Y

git configuration
need to set name and email
git config --global user.name "Name"
git config --global user.email "Email"
--global flag is using to change every repository on your computer
  not using flag effects only current repository

git init; creates a git repository

files in a git repository are in one of two states
tracked - files that git knows about and are added to the repository
untracked - files that are in your working directory, but not added to the
repository

git staging environment
staged files are files that are ready to be commmitted to the repository you are
working on.
git add: adds files to the staging enviroment
  using --all instead of individual filenames will stage all changes (new,
modified, and deleted) files.
    git add -A: same

why is it needed
installation/usage
role of gitlab/github/bitbucket

cloning and pulling
git clone <url>
git status
git pull

creating repos
git init: used on a existing repository
git init <directory name>: creates a blank git repository

common usage:
git clone, remote
  git remote -v
git status
  stage
git add, commit
git push, pull, fetch
git branch, checkout
git merge
git log
git diff


** Intro to GitHub

Version control systems
Systems for managing changes to files, software, websites, and other computer or web-based programs
Local repository
Also called the local repo, the project folder that is stored on your computer
Remote repository
Also called the remote repo, the GitHub project folder that is stored on the GitHub.com website
Owner
The person who creates a repo, determines if it is public or private, and determines how code that is submitted to a project from others is managed
Collaborator
A person who has been invited by the repository owner to contribute to a project, and who has the ability to edit the code in that repo
Commit
Saving new changes to a version of a file, typically in a version control program like GitHub

Version control: Version control allows many people to make and save changes for multiple versions of a project or program. This means you and other developers can experiment, make mistakes, and revert back to an earlier version if necessary.
One safe place: These services securely store your projects in one safe place on the web. You can work locally and on more than one computer, but you always have an online backup. This one location makes storage easy and convenient.
Collaboration: More often than not, coding projects require multiple people to work nearly simultaneously. Version control systems allow many different contributors to edit and change the same set of files at the same time.

The GitHub language
As you get started with GitHub, you'll need to learn the lingo. Here are some new GitHub terms and concepts that will prove useful to you in your time at Thinkful and in your career.
Git: This is the open-source system used for version control. It's used by many companies, but GitHub is the most popular.
GitHub.com: The website where users can store and manage versions of their code projects online.
GitHub.io: The website that displays websites that are stored on GitHub.com online, for all users to view.
GitHub Desktop: A free app that is installed locally on your computer. It makes it easy to update code projects from your computer to GitHub.com.
Repository: This is a project's folder that contains all of the files for the project, as well as each file's revision history. This is commonly called a repo. There are local repositories, which are on your computer, and remote repositories, which are on GitHub.com. These will be explained in more depth below.
Public repo: These are publicly accessible repositories. GitHub provides free access to any public repo.
Private repo: This is a repo that only you (or others who you give access to) can see. GitHub also makes it free to store private repos; however, to access most of the functionality of a private repo, you'll need to pay a monthly fee.
Owner: The person who creates a repo and therefore determines if it is public or private. They determine how code that is submitted to a project from others is managed.
Collaborator: A person who has been invited by the repository owner to contribute to a project. They have been granted access to a repo, and they have the ability to edit the code in that repo.
Commit: A fancy technical term that's used to refer to saving new changes to a version of a file.

As noted above, when using GitHub for a project, you'll be working with two repos: a local repository and a remote repository. For any given project, these two repos would be the same. The difference is where you're making changes to the files.

The local repository, or local repo, is the project folder that is stored on your computer. It's the local (in other words, not web-based) folder that contains all the files for the project. Edits can be made to any of these files, even if you're offline. When you're online, you can upload those changes to the files that are on GitHub.com.
The remote repository, or remote repo, is the GitHub project folder that is stored on the GitHub.com website. If the remote repo is a public repo, anyone can view the code and the organization of those files. If it's a private repo, only people who are invited can view the code and files. These repos can be downloaded onto any computer and synced with changes made by any team members.

More on custom domain names
As noted briefly above, you can buy a custom domain name (URL) that can easily showcase your projects by pointing to your GitHub.io website. In fact, a domain name can be used to point to your GitHub account or any of the projects that are hosted on GitHub.io. When you're ready to purchase a custom domain name, follow the directions below. These are the two primary steps:

Purchase your domain name and point the domain to GitHub.

Update GitHub to point to the domain, too.

A domain name usually costs around $10 for yearly access. (So, if Jenny were to create her web portfolio and host it publicly on GitHub, then she could run http://www.jennythinkful.com for around $10 per year!) Three popular domain sites are listed below:

GoDaddy: The cost of a domain name is about $12 per year. Check out this tutorial to learn more.
Name.com: The cost of a domain name is about $11 per year. Check out this tutorial to learn more.
Namecheap: The cost of a domain name is about $10 per year. Check out this tutorial to learn more.

:PROPERTIES:
:ID:       c4ffc59c-65b7-4f0e-b749-bcd46ef75fb0
:END:
#+title: thinkful
#+date: [2022-06-13 Mon 11:51]

these are my notes on the thinkful program
this is a staging area for my notes need to summarize and move to a better place

[[id:63bc8d8d-4fc8-4b34-8881-43ace1415a53][JavaScript]]
[[id:6df2c337-4b01-470f-9028-d0745498f8a6][devWorkflow]]
[[id:dea16eb4-d34a-421b-b037-9f3e606ec001][git]]
[[id:43e93100-42e8-432e-99bb-ecdd6f6b7097][devCollab]]
[[id:a3333ce5-86aa-4729-af16-cd8dafd42149][Node.js]]
[[id:0b027db0-6cea-4c7a-81fa-05115bd10590][problemSolving]]
[[id:bc9d12ba-1f84-4599-9fe3-bcba0d2f5cb4][reactjs]]
[[id:d3374c8f-56bd-4dee-ad16-e9f4a8492999][swe-dsa]]
[[id:6d754801-89a1-41ec-a8ce-47fbc3e24adf][career]]
[[id:c3bb3e82-784a-4c8b-beaf-e3c9e1552ee5][frontend-dev]]

* Backend Development - Modules 30-40
** Node and Express - Module 30
*** 30.1 Overview: Node and Express
Overview: Node and Express
9 minutesEstimated completion time
Overview

In this module, you will build a fully working server with multiple routes and error handling.

At this point in your journey, you're ready to create your own server that will respond to requests made to it. Although you will start by responding with only JSON, the servers that you build will be capable of responding with all types of data, including HTML. As you continue through the module, you will enhance your server with middleware and error handling, building a strong foundation for the modules to come.
Do this

The purpose of the Do this sections in this module is to give you important hands-on experience. In these sections, you'll perform various tasks, like setting up a development environment or executing a command. Ultimately, these practice sections will help you successfully complete graded assessments, such as projects, mock interviews, and capstones.

At the end, you'll need to take a quiz, so spend some time studying up. Alternatively, you'll join on as an apprentice, but you'll still need to ace this quiz first.
*** 30.2 Project configuration
Project configuration
1.5 hoursEstimated completion time
Learning Objective

By the end of this lesson, you will be able to run a simple server with Node and Express. You'll also be able to configure your project so that your server automatically updates upon changes.
Overview

In this lesson, you will learn how to run a server on your machine using a popular package called Express. You will also set up your development process for success by installing and using a package called nodemon.
Key Terms

Web framework
    Tools and software that help developers build web applications more easily

How are you reading this curriculum right now? Where does this text come from? If you're logged in, how does this site know that you are who you say you are? Many of these questions are important in web development and are solved by a server. Servers send information back to clients like your browser. That information could be text to read, or it could be something more complicated, like credentials.
What is Express?

The video below provides a brief introduction to this topic. Start by watching the video, and then read through the rest of the lesson and complete the practice exercises. This will give you a thorough understanding of these concepts.

To build your servers, you will be using a node package called Express. Express is a minimalist web framework for Node.js. A web framework is a tool that you can use to make building applications for the web easier. In this case, Express abstracts away many of the difficulties of working directly with Node.

To be clear, you could build a server without using Express. There are other web frameworks that work with Node. Alternatively, you could build a server with only Node. However, Express makes the process both easier and more readable.
Do this
Create a project

Now, create a folder for the work that you will do in this module. On your computer, create a new folder called node-express-getting-started. Inside that folder, run the following commands:

npm init -y

npm install express@4

File structure

A fully functional server can often have dozens of files, all of which serve a different purpose. That means that it is important for you to put together a file structure that helps you find what you need when you need it.

Building a server may be the most complex project that you've worked on yet. With dozens of folders and files, it can become confusing. So when you're creating a complex project like this, take time to name your files and folders well. Your future self will thank you.
Do this
Create your project

In your node-express-getting-started folder, create a new folder called src. This folder is where you will put the majority of the code related to your server. Then create two files: app.js and server.js.

Your file structure should look like the following once you are done:

.

├── package.json

└── src

    ├── app.js

    └── server.js

The purpose of this new folder and files is as follows:

    The src folder holds the source code for your server. Code directly related to running the server will go here.

    The app.js file is where you will configure your Express application.

    The server.js file is where you will run your Express application.

As you will see, you could just have a single file that includes all of the code from app.js and server.js. However, when building your server, you want to keep in mind the concept of separating concerns: each file should focus on only one task.
The Express application

Now that you have installed Express and set up your file structure, create your Express application.

The following code initializes an Express application.

const express = require("express");

const app = express();


module.exports = app;

Below is a description of what each line of code above accomplishes.
Code
	Description
const express = require("express");
	You require the Express package and assign it to a variable.
const app = express();
	The Express package exports a function. When you invoke that function, you get a new Express application and assign it to a variable.
module.exports = app;
	You export the Express application to be used in the server.js file.
Do this
Create your application file

Type the above content into your app.js file. Read through the table above more than once, and take note of any questions that you have at this point.
The server file

You may be happy to know that your server.js file will also be very short. This file is responsible for running the application. The following code, when run, will allow your server to "listen" on the specified port.

A port is a way to have multiple applications running on the same machine. When a request goes to a computer, it will specify a port to ensure that it goes to a specific application. For example, you could have three different servers running on your computer, each one on a different port.

Make sure to read the comments to understand what is happening on each line.

const { PORT = 5000 } = process.env;

const app = require("./app");


const listener = () => console.log(`Listening on Port ${PORT}!`);

app.listen(PORT, listener);

Below is a description of what each line of code above accomplishes.
Code
	Description
const { PORT = 5000 } = process.env;
	With destructuring and default arguments, set the variable PORT to be equal to whatever value is found inside of process.env or default to 5000.
const app = require("./app");
	You require the Express application that you exported.
const listener = () => console.log(`Listening on Port ${PORT}!`);
	This function will run when the server successfully starts.
app.listen(PORT, listener);
	The listen() method on your Express application is what runs the server. It takes two arguments: a port number and a function. The PORT variable defines where your server is running, and the listener() function will get called as soon as the server has successfully started.
Do this
Create your server file

Type the above content into your server.js file. Read through the table above more than once and take note of any questions that you have at this point.
Starting and stopping

The video below provides an introduction to this topic.

You now have all the code that you need to run your server. When you run your server, it will reserve the port that you specified. That means that nothing else can run on that port. When you stop the server, that port will be free again.

How are you going to access this port? Every computer has a special domain called localhost. This domain can be used to access whatever is running on your own machine.

localhost is a special domain that is available for applications running on your computer. The URL will look something like this:

http://localhost:5000

When you enter the above URL into a browser, the browser will attempt to contact any application running on your computer on port 5000.
Do this
Start your server

From your command line, make sure that you are in the node-express-getting-started folder. Then run the following command:

node ./src/server.js

If you get an Error: listen EADDRINUSE: address already in use :::5000 error, you may need to change the port number because another application is already using port 5000. You can change the port by specifying another port number in server.js. For example, you can specify const { PORT = 8080 } = process.env;). Alternatively, you can free any port that is already in use by exiting the application that is using that port.

Note: If you are a macOS Monterey user and are getting the Error: listen EADDRINUSE: address already in use :::5000 error, you may want to disable Airplay Receiver; this is an application that uses port 5000. To disable Airplay Receiver, go to System Preferences and disable Airplay Receiver in the Sharing system section.

You will see the following message:
Message that server is running.

You may also notice that you no longer have your command prompt back. For example, if you begin typing and press Enter, you will notice that nothing is happening.
Nothing is happening after typing and pressing Enter.

Don't worry; this is normal. This means that your server is running constantly. Servers are unlike other programs that you may have written, in that they constantly run until they are told to stop. They are constantly listening for incoming requests.
Stop your server

To stop your server, you only need to press Control+C. You will then get back your command prompt and be able to start your server again.
Creating a script

Next, create a script to make this process a bit easier. In your package.json file, replace the existing "scripts" with the following:

"scripts": {

  "start": "node src/server.js"

},

Finally, from the command, you should now be able to type npm start. This will only start your server, not stop it. If you have any issues, check the syntax of your JSON file.
Run multiple servers

Now, try to run multiple instances of your server at the same time. In one terminal window, start your server using npm start. Then, open up a new window. Make sure that you are in the same folder as before, and then run npm start again.

What happened? You likely received an error that looked something like this:

Error: listen EADDRINUSE: address already in use :::5000

This error is telling you that port 5000 is already in use. You can't run two applications that use the same port.

Instead, try running the following command:

PORT=4999 npm start

Now you will have two servers running, one on port 5000 and another on port 4999.
Make changes to your server

Make sure that at least one server is running, and then change the message of the listener() function in the server.js file. If you look at your terminal, you'll notice that nothing has happened.

Stop the server and then restart it. Now you'll be able to see the change. Once your server is running, it will not pick up any new changes that you make to it unless you restart it.
The nodemon package

The video below provides a brief introduction to the nodemon package.

Each time that you make a change to your server, you have to start and stop it once again. Manually starting and stopping your server every time that you want to make changes to it would significantly slow down your development process. Thankfully, you can avoid doing so by installing a package called nodemon.

The nodemon package will watch for any changes that happen to your server and automatically reload it for you. This package alone will save you hours of time when you're working on more complex servers in the future.

While working on your local machine, you should rely on using nodemon instead of running the server manually with node src/server.js.
Do this
Install nodemon

You can install nodemon just like you would any other package. However, in this case, use the --save-dev flag because you won't need nodemon for anything other than development purposes.

npm i nodemon --save-dev

Add nodemon to a script

To use nodemon, create a script. Add the following script to your "scripts" object in your package.json file.

"dev": "nodemon src/server.js"

You can then run the following command on your command line.

npm run dev

You'll then see something a bit different in your command line:
Using nodemon in command line.

Try changing the text in your listener() function in your server.js file. You will see the new message show up in your terminal almost immediately.
Complete example

A completed example from this lesson can be found here:

    Node and Express: Project configuration

*** 30.3 Application-level middleware
Application-level middleware
1.5 hoursEstimated completion time
Learning Objective

By the end of this lesson, you will be able to describe each parameter in an Express middleware function and create your own application-level middleware. You'll also be able to install and use common middleware packages.
Overview

In this lesson, you will learn about an Express concept called application-level middleware. This concept will allow you to potentially configure every request coming in or going out of your server.
Key Terms

Middleware
    A function that an Express server runs between receiving a request and responding to that request

Starter code

This lesson continues using the project that you created in the previous lesson. If you need to, you can download that code here:

    Node and Express: Project configuration

What is middleware?

The video below provides a brief introduction to middleware. Start by watching the video, and then read through the rest of the lesson and complete the practice tasks. This will give you a thorough understanding of this topic.

Middleware is a very general term that can have different meanings based on the context. You will be learning about middleware specifically as it pertains to building servers with Express. When it's mentioned in this program, the term middleware will refer to a function that an Express server runs between receiving a request and responding to that request.

Remember that the job of the server is to receive requests and respond to them. Middleware gets between the request-response cycle. It helps manage the request and can help determine how the server should respond. Express puts multiple pieces of middleware together, creating a middleware pipeline. This pipeline is simply a series of functions.

For example, imagine that a user is logging in to a banking website. The request pipeline might look something like the following diagram:
Request pipeline for logging on a banking website.

Now, break down each of these steps:

    A request is made to the server for checking account details.

    The request enters the first piece of middleware: logging. At this step, nothing more happens than a simple log() statement describing the request.

    Check for user credentials. Depending on whether or not the user is logged in, the server will respond differently.

    If the user is logged in, you respond with the requested information. If they aren't logged in, you respond with an error. You only respond once.

Steps two and three above act as middleware. They act on the request (in this example, logging) and help determine its outcome (in this example, checking for credentials).
Middleware acting on the request and helping to determine response.
Express middleware parameters

The following video provides an introduction to Express middleware parameters.

In Express, middleware is represented through functions. The function will always have a similar function signature:

const middleware = (req, res, next) => {

  // Middleware function body

};

Middleware functions are callback functions. It is unlikely that you will ever call a middleware function directly—Express calls the function for you, with the right arguments.

Almost every middleware function will have no more than three parameters. You'll learn about the single exception later on.

Take a look at each parameter:

    The req parameter stands for request. Information and methods related to the incoming request will be stored in this object.

    The res parameter stands for response. This object has information and methods related to sending back a response from the server.

    The next parameter, when called, will tell Express that this middleware function is complete. It will then go on to the next piece of middleware.

Responsive middleware

Take a look at the following middleware function.

const sayHello = (req, res, next) => {

  res.send("Hello!");

};

This middleware uses the send() method that comes on the res object. Calling send() in this way will send back the string to the client.

This middleware function responds. That is, it will send a response back to the client that made a request to it. At that point, your server's job is done.
Do this
Copy the middleware

Copy the above function (in other words, the sayHello() function) into your app.js file. Include them above where you export the Express application.
Nonresponsive middleware

Take a look at another middleware function:

const logging = (req, res, next) => {

  console.log("A request is being made!");

  next();

};

This middleware doesn't respond. That is, it doesn't send a response back to the client. Instead, all it does is print to the console before moving on to the next piece of middleware.
Do this
Copy the middleware

Copy the above logging() function into your app.js file. Include it above the code where you export the Express application.
Creating application-level middleware

Right now, your middleware functions exist but aren't being used. How do you use them in your application?

Attached to your Express application (app) is a method called use(). This method will allow you to attach middleware to the pipeline. You can use your middleware functions by doing the following:

app.use(logging);

app.use(sayHello);

Every request that comes in will first go through these lines of code, unless an error occurs or the server sends a response.
Do this
Test out your middleware

How do you know it's working? First, include the above lines in your app.js file, below your function definitions. Then, try going to the following website in your browser. When you go to this website, you are making a request to your server.

http://localhost:5000

You should see the phrase Hello!. Now, take a look at the terminal where you are running your server. You should see the console.log() statement.
Switch the order

Try switching the order of the two app.use() statements so that the sayHello() middleware comes before the logging() middleware. When you refresh your browser page, you will still see Hello!. But, check your terminal—do you still see the console.log() statement? Why or why not?

If you don't notice any changes, try restarting your server.
Reflect

At this point, you've created a working server. Your server now receives requests and responds to them! Now is a good time to reflect on what you've learned so far.

Write some comments in your code that describe what you have written. Consider including terms like request, response, function, and middleware.
The morgan package

The video below provides an introduction to the morgan package.

You have now built your own middleware and are using it to respond to requests. Next, install a common package that can be used as middleware and will replace your logging function. The morgan package is a small logging package that will print useful information to your terminal window on each request.
Do this
Use morgan

Run the following in a terminal window. Make sure that you are in the correct folder and that your server isn't running where you paste the following command.

npm i morgan

First, require morgan at the top of your app.js file, before all of your other app.use() statements.

const morgan = require("morgan");

Then, delete your logging() function and where it gets used. Replace it with the following:

app.use(morgan("dev"));

Exported from the morgan package is a function that can be called with a few predefined strings. The return value of the function is middleware, configured by the "dev" string.

Now go to localhost. You will- still see the phrase Hello!.

Check your terminal. You will see something like the following line in your logs:

GET / 200 0.433 ms - 6

This line is provided by morgan; morgan will log incoming requests. As you continue to build servers, this logging information will become more and more useful.
Complete example

A completed example from this lesson can be found here:

    Node and Express: Application-level middleware
*** 30.4 Building routes
Building routes
1.5 hoursEstimated completion time
Learning Objective

By the end of this lesson, you will be able to create routes to handle requests.
Overview

So far, you have been sending requests to your server via a single URL: http://localhost:5000. But in the real world, users can visit different URLs to get different kinds of information from a website. For example, the Thinkful website responds with different information when you go to thinkful.com/about as opposed to thinkful.com/blog. In this lesson, you will learn how to create routes on your server so that it can respond to client requests with varied information.
Key Terms

Route
    Also called a path, the part of the URL that comes after the domain name

Starter code

This lesson continues using the project that you created in the previous lesson. If you need to, you can download that code here:

    Node and Express: Application-level middleware

What are routes?

The video below provides a brief introduction to routes. Start by watching the video, and then read through the rest of the lesson and complete the practice tasks. This will give you a thorough understanding of this topic.

How does Thinkful know that you want different information when you go to thinkful.com/about as opposed to thinkful.com/blog? In large part, it has to do with the route. A route (or a path) is the part of the URL that comes after the domain name.

In the case of thinkful.com/blog, the route is /blog. Going to that route as opposed to /about yields different information.

A route can have multiple parts, like in the following example:

https://www.thinkful.com/bootcamp/web-development

As you can see, this route has multiple parts:

    /bootcamp

    /web-development

    /flexible

The order of each of these parts matters in getting to the route. In general, paths are arbitrary. But as you will see later on, there are some conventions to follow. For now, just know that there can be multiple parts to a route.
Express routes

The video below will show you how to work with Express routes.

Up until now, you have used the app.use() method to build middleware to handle requests. Express also has other methods to handle requests that correspond to the request's HTTP verb.
HTTP verb
	Express method
DELETE
	app.delete()
GET
	app.get()
POST
	app.post()
PUT
	app.put()

These functions work similarly to app.use(). For example, the following is a route in Express that will respond with the text OK when you go to the URL http://localhost:5000/ping.

app.get("/ping", (req, res) => {

  res.send("OK");

});

As you can see, this looks very similar to the middleware that you built earlier—except you now have a string as the first argument passed into the app.get() method. This builds a route at /ping.

Routes are middleware except they will only respond when the request URL matches the route.
Do this
Create a route

Replace where you're currently using the sayHello() function with the following route:

app.get("/hello", sayHello);

You've created your first route!
Test your application

First, make sure to start your server.

Then go to the following URL:

http://localhost:5000/hello

What do you see?

Now, try going to the following URL:

http://localhost:5000

You will see an error message this time. This error is generated by Express, although you will soon learn how to customize it.

If you recall, going to this URL before resulted in a successful response from the server. So what has changed? Before, the server was responding to every request with the sayHello() middleware. But now, the server is only responding with the sayHello() middleware when you go to the /hello route.
Complete example

A completed example from this lesson can be found here:

    Node and Express: Building routes
*** 30.5 Query and route parameters
Query and route parameters
1.5 hoursEstimated completion time
Learning Objective

By the end of this lesson, you will be able to access relevant information through route and query parameters.
Overview

Routing on its own is quite powerful. So far, you've learned how to build routes that can respond with all kinds of information. In this lesson, you will learn how to use dynamic user input to modify your routes' responses.
Key Terms

Query string
    Text that comes at the end of a URL and provides additional information to a given route
Query parameter
    A key-value pair in a query string, used to filter the resources requested from the server
Route parameter
    A part of the URL that changes depending on the data to be displayed on the website, used to access parts of a URL by storing the value in a variable

Starter code

This lesson continues using the project that you created in the previous lesson. If you need to, you can download that code here:

    Node and Express: Building routes

Query parameters

The video below provides a brief introduction to query parameters. Start by watching the video, and then read through the rest of the lesson and complete the practice tasks. This will give you a thorough understanding of this topic.

Take a look at the following URL:

https://www.google.com/search?q=javascript

In the above URL, you can see that there is a route called /search. But is the content after /search a new route? No, what comes after is called a query string, which contains a single query parameter.

A query string is text that comes at the end of a URL following a question mark ?. It provides additional information to the given route and can contain multiple query parameters. A query parameter is a key-value pair in a query string. The key and the value are strings separated by an equals sign =. In the above example, the query parameter key is q and the value is javascript.

Query strings provide additional information to your route and can be easily read by Express if formatted properly. Inside of the route function, you can access query parameters by using req.query. This object will be empty if there are no parameters; otherwise, it will be an object of key-value pairs.

For example, imagine that you had the following route:

app.get("/songs", (req, res) => {

  const title = req.query.title;

  res.send(title);

});

And imagine that you visited the following URL:

http://localhost:5000/songs?title=Distant

Then, you would receive the following text:

Distant

Do this
Use query parameters

Update your sayHello() function so that it looks like this:

const sayHello = (req, res) => {

  console.log(req.query);

  const name = req.query.name;

  const content = name ? `Hello, ${name}!` : "Hello!";

  res.send(content);

};

Take a moment to read through the above code, making sure that you understand it. Then, try making a request to the following URL:

http://localhost:5000/hello?name=Danni

What do you see in the browser? What do you see in the terminal window?
Route parameters

The following video provides an overview of route parameters.

Take a look at the following two URLs:

https://www.thinkful.com/blog/tag/software-engineering/

https://www.thinkful.com/blog/tag/data-science/

These URLs are similar except for the last part of the route. If you were to build routes like this in your Express code, would you have two separate routes?

The answer is that it depends. It is possible to use two different routes to return different information, but it is also possible to just use one with route parameters. Route parameters give you access to parts of a URL by storing the value in a variable. This means that part of the route can be swapped out with another value and potentially work.

For example, take a look at the following code:

const saySomething = (req, res) => {

  const greeting = req.params.greeting;

  const content = `${greeting}!`;

  res.send(content);

};


app.get("/say/:greeting", saySomething);

The route that you define contains two parts, one of which has a colon : in front of the string greeting. In your route function, you can access all route parameters with req.params, which will return an object. If there are any, they will be stored inside as key-value pairs.
Do this
Use route parameters

Copy the code above into your app.js file. You can place it anywhere below where your Express application is created. Then, try making a request to the following URL:

http://localhost:5000/say/Greetings

Take a moment to go to the same route while changing the route parameter.
Skip the parameter

Try making a request to the following URL:

http://localhost:5000/say

What happens? Why do you think so?
Put it all together

The following video explores how to work with query and route parameters together.

Update your saySomething() function to the following:

const saySomething = (req, res) => {

  const greeting = req.params.greeting;

  const name = req.query.name;


  const content = greeting && name ? `${greeting}, ${name}!` : `${greeting}!`;

  res.send(content);

};

Try making a request that makes use of both the route parameter and the query parameter.
Multiple routes

You now have multiple routes running on your server. For now, assume you have the requests ordered like this:

app.get("/hello", sayHello);

app.get("/say/:greeting", saySomething);

If you make a request to /say/Hola, does Express look at your /hello route at all?

The answer is yes. Express looks at each piece of middleware in order. If it doesn't have a route string, it runs the middleware as expected. But if it does have a route string, it will first look to see if the request URL matches up with the route string. If it does, it will run the route function; otherwise, it will skip over it.
Order matters

Every incoming request will go through every piece of middleware, looking for a match to the route if there is one. This means that the order of your routes can matter. Take a look at the following example:

app.get("/say/:greeting", saySomething);


const sayGoodbye = (req, res) => {

  res.send("Sorry to see you go!");

};


app.get("/say/goodbye", sayGoodbye);

If you make a request to /say/goodbye, will you be calling the saySomething() function or the sayGoodbye() function? Because the /say/:greeting route matches the path /say/goodbye, you will call the saySomething() function first. That means if you went to the following URL:

http://localhost:5000/say/goodbye

You would receive the following response:

goodbye!

This is easy to avoid once you know to look for it. All you need to do is switch the order that these routes are used.

app.get("/say/goodbye", sayGoodbye); // This goes first.

app.get("/say/:greeting", saySomething); // This goes after.

Do this
Order it right

Copy the above sayGoodbye() function and route into your app.js file. Play with the ordering to see what happens when one of the routes is above the other.
Organize your code

Your app.js is likely getting a bit messy. You likely have functions defined between routes, making it a bit less organized. Update your code to fit one of the following organization schemes:

    Instead of naming your functions, place the functions inside of the routes as anonymous functions. Here's an example:

app.get("/say/goodbye", (req, res) => {

  res.send("Sorry to see you go!");

    });

    Move all of your functions to one part of your file and all of your routes below. Add comments above each section, labeling them.

Complete example

A completed example from this lesson can be found here:

    Node and Express: Query and route parameters
*** 30.6 Error handling
Error handling
1.5 hoursEstimated completion time
Learning Objective

By the end of this lesson, you will be able to create an error handler for the case where a route doesn't exist. You'll also be able to create a general error handler that can be triggered through the next() function.
Overview

Remember that even if a user sends a bad request to your server, you should still respond. As you'll see in this lesson, Express comes with some built-in ways to handle errors that reduce the amount of code that you have to write.
Starter code

This lesson requires you to have a working server. You may use one of your existing projects, or you can download the code from an earlier lesson here:

    Node and Express: Project configuration

Not-found handler

You've likely come across a web page like this before:
GitHub's 404 error page

If a user tries to go to a route that doesn't exist, you want to let them know. Express, by default, will respond with a message like the following if you try to go to a nonexistent route:

Cannot GET /

You actually already have all the tools available to you to build a custom handler for this kind of issue. Recall the following:

    Express uses a middleware pipeline to determine how it should respond. When a request comes in, it will look at every route that it can to search for a match.

    If you provide a function as the first argument in app.use() and Express passes over it when looking for a matching route, that function will be run.

To handle an error where the route cannot be found, you can just create a new piece of middleware. This middleware should be put after all of your routes and doesn't need a specific string argument.

// Not-found handler

app.use((req, res, next) => {

  res.send(`The route ${req.path} does not exist!`);

});

Do this
Add a missing route handler

Add the code above to your server and try making a few different requests to routes that don't exist. What does req.path evaluate to?
Error handler

One common error is that the user may attempt to go to a route that is missing. But there are many more problems that could arise. Express has a special and slightly odd way of creating an error handler. It is exactly the same as other middleware, except for one feature: it has an extra parameter.

// Error handler

app.use((err, req, res, next) => {

  console.error(err);

  res.send(err);

});

You will notice that the only difference in the above middleware is that the first parameter is err. The names of the parameters do not matter; instead, Express is looking for whether or not there are four parameters.

If you try to access this function normally, you may have a hard time. The error-handler middleware only gets called in one of two cases:

    When there is a problem in the application itself (for example, if you made a mistake in your code).

    When you specifically trigger it using the next() function in a previous middleware function.

No matter where you put this error handler, it will not be triggered unless one of the above conditions arises. Express does this so that you have a tool dedicated to handling issues that may arise.
Do this
Add the error handler

Copy the code above and add it to your server. Include it below the middleware that will catch any not-found routes.
Triggering the error handler

Earlier, you learned that using the next() function that's available inside each piece of middleware will move the request to the next part of the middleware pipeline. Calling next() with an argument will move the request to the next error handler.

Take a look at the following route. Spend a few minutes making sure that you understand what the route is asking for and what will happen if it is not provided.

app.get("/states/:abbreviation", (req, res, next) => {

  const abbreviation = req.params.abbreviation;

  if (abbreviation.length !== 2) {

    next("State abbreviation is invalid.");

  } else {

    res.send(`${abbreviation} is a nice state, I'd like to visit.`);

  }

});

The above /states/:abbreviation route is checking to make sure that the abbreviation that is given is no more than two characters. If it is exactly two characters, it will respond as normal. Otherwise, it will call the next() function with a string.

Whatever value gets passed in to next() is the value that will be available to you inside of the error handler as the first argument.
Do this
Cause some errors

Copy the above route into your server, above both of your error handlers. First, make a request to the following URL and make sure that the route works as intended.

http://localhost:5000/states/NY

Then, try to make a request to the following URL.

http://localhost:5000/states/NYC

What do you see in your browser? What do you see in your terminal?
Complete example

A completed example from this lesson can be found here:

    Node and Express: Error handling
*** 30.7 Router-level middleware
*** 30.8 Assessment: Node and Express

** Robust Server Structure - Module 31
*** 31.1 Overview: Robust server structure
*** 31.2 Static data
*** 31.3 RESTful APIs
*** 31.4 API testing with SuperTest
*** 31.5 Major error types and handling
*** 31.6 Organizing Express code
*** 31.7 Advanced tips
*** 31.8 Assessment: Robust server structure

** Project - Module 32
** Postgres- Module 33
*** 33.1 Overview: Postgres
*** 33.2 Creating and deleting databases
*** 33.3 Installing DBeaver
*** 33.4 Database architecture
*** 33.5 Creating and viewing tables
*** 33.6 Inserting data
*** 33.7 Querying data
*** 33.8 Updating and deleting data
*** 33.9 Assessment: Postgres

** Creating Relations - Module 34
*** 34.1 Overview: Creating relations
*** 34.2 Database relationships
*** 34.3 Relating tables through keys
*** 34.4 Joining tables
*** 34.5 Other joins
*** 34.6 Assessment: Creating relations

** Node, Express, and Postgres - Module 35
*** 35.1 Overview: Node, Express, and Postgres
*** 35.2 Knex configuration
*** 35.3 Connecting to the database with Knex
*** 35.4 Migrations with Knex
*** 35.5 Seeding data with Knex
*** 35.6 CRUD with Knex
*** 35.7 Async and await in Express
*** 35.8 Aggregates with Knex and JavaScript
*** 35.9 Joins with Knex
*** 35.10 Assessment: Node, Express, and Postgres

** Backend Deployment - Module 36
*** 36.1 Overview: Backend deployment
*** 36.2 What is backend deployment?
*** 36.3 Deploying the server
*** 36.4 Deploying a monorepo
*** 36.5 Database setup
*** 36.6 Troubleshooting
*** 36.7 Assessment: Backend deployment

** Connecting it all - Module 37
*** 37.1 Overview: Connecting it all
*** 37.2 Review of how the web works
*** 37.3 CORS
*** 37.4 Full-stack application workflow
*** 37.5 Practice full-stack application workflow
*** 37.6 Tracing errors
*** 37.7 Practice tracing errors
*** 37.8 Assessment: Connecting it all

** Mock Interview: Backend - Module 38

** Node and Express - Module 39
** Careers: Job searching - Module 40
*** 40.1 Understanding job searching
*** 40.2 Applying for jobs
*** 40.3 Writing cover letters
*** 40.4 Job searching project

* Module 46 - Careers: Interviewing

** 46.1 - Understanding interviewing
** 46.2 - Mastering the soft skills of interviewing

Mastering the soft skills of interviewing
2 hoursEstimated completion time
Learning Objective
By the end of this lesson, you should be able to master the behavioral components of interviews.

Overview
Some things are universal to all interviews. You're always going to be asked about your background. You're always going to be asked about your salary requirements. And employers are always going to want you to be prepared and poised. Accordingly, there are some best practices that you should apply to all of your interviews. This lesson covers how to prepare for an interview, answer common interview questions, and follow up after an interview.

Key Terms
STAR method
An acronym that stands for situation-task-action-result, this approach is a straightforward and systematic way to answer behavioral questions
Preparing for interviews
Making a good impression at an interview starts with preparing for the interview before it happens. Some things you should do well in advance, and other things you should do on the day of the interview.

Before the interview
Before the interview, get prepared by conducting some research, rehearsing your answers to common interview questions, and making a list of questions that you want to ask the interviewers.

Researching the company
Employers appreciate candidates who are familiar with their company and work. Take some time to review the company's website and blog, as well as any recent articles about the company that you can find online. You should be able to explain the work that they do and why you're interested in working for them.

Researching your interviewers
Try to find out who's interviewing you and then check them out on LinkedIn. Look at their backgrounds and figure out how long they've been at the company and in their job. Look for things that you have in common or that you find interesting about them. Knowing a little about your interviewers can give you clues about the types of questions that you can expect them to ask, and help you know what questions you should ask them. It can even provide some conversation topics to bond over during the informal, in-between moments of an interview.

Reviewing the job listing
It might be a while between the time that you apply to a job and the time that you interview for that job. Always review the job listing so that you know exactly what the job is and what skills the employer is interested in. This will help you determine which relevant skills and projects you should highlight during the interview.

Preparing your answers to common interview questions
Although it's impossible to know the specific questions that you're going to be asked during an interview, there are common types of questions that arise in most interviews. For example, you're going to be asked about your past work experience, your projects, and your salary expectations. Think about how you want to answer these questions before the interview, so that you're ready to provide effective answers during the interview. Many of these common interview questions, plus strategies for answering them, are described below.

Preparing questions to ask during the interview
Interviews should be two-sided. While the employers are deciding if you're a good fit for their company, you're also trying to decide if the company and employers are a good fit for your life. This means that you should also come prepared with questions to ask the interviewers. Writing them down ahead of time and bringing them to the interview makes you look prepared. It also ensures that you won't forget to ask about anything that's important to you.

The day of the interview
On the day of the interview, there are some final considerations to keep in mind, from dressing appropriately to using nonverbal cues to your advantage.

Dressing the part
These days, many companies allow their employees to dress casually at work—although this differs by industry, company, and location. But as the person being interviewed, you want to make a good first impression and appear clean, polished, and professional. Here are a few guidelines to follow:

Be the best-dressed person in the room: Aim to dress one step more formal than the interviewers. For example, if they're wearing jeans and a t-shirt, you should be wearing jeans and a button-up shirt. Your goal is to fit in, so you look like a culture match, but also to show professionalism and convey that you take the interview seriously.

Be tidy: Whatever you wear, make sure that you and your outfit are clean. Your hair and teeth should be brushed, and your clothes should be pressed and without holes or stains.

Be comfortable: You should look professional and you should be physically comfortable so that your clothing doesn't distract you. So make sure to wear clothing that's easy to move in and doesn't require frequent adjustments.

Be fabulous: Wear something that you like. When you feel good about the way that you look, you have more confidence. This makes you appear more competent and sets you up for a better interview.

Arriving on time
Be on time for the interview. Punctuality shows employers that you take the job, their time, and yourself seriously. It also gives you time to steady your nerves. Here are good rules to follow:

For phone screens: Pick up the phone after the first or second ring.

For virtual interviews: Join the meeting room five minutes before the interview. Ensure that all of your technology is functioning correctly.

For onsite interviews: Arrive at the site of the interview 10 minutes early, and plan for traffic and parking. Don't arrive more than 15 minutes early, because the interviewer is probably busy and this can be annoying for the person who then needs to accommodate you.

Being present
Before your interview, make sure that your mobile phone and other gadgets are silenced or powered off. A buzzing phone during an interview can be distracting and can make you appear careless.

Monitoring your nonverbal behavior
In addition to your verbal answers, interviews are also paying attention to your nonverbal behavior during interviews. Here are a few things to keep in mind during your interview:

Maintain upright posture. Sit up straight and roll your shoulders back. This communicates confidence and competence.

Face the interviewer with your body. This communicates that you're interested in the interviewer and invested in the conversation.

Uncross your arms. Open posture communicates that you're friendly and trustworthy.

Be still. Try not to fidget, swivel, or tap your fingers or feet. This communicates nervousness and can distract the interviewer.

Maintain eye contact. It's okay to blink, but you should look at your interviewers when you're answering questions, and especially when they're talking. This communicates that you're listening and engaged.

Keeping calm
Interviewing can be stressful. It's important to know some techniques that can help you stay calm in a stressful environment. For example, you could try striking a power pose, listening to a fun playlist, or practicing breathing exercises before your interview. And, ultimately, remember that some interviews are meant to test your knowledge—so it's okay if you don't know the answer to every question.

Asking questions
In most interviews, you are asked if you have any questions for your interviewers. Your answer should always be yes. Asking thoughtful questions is a good way for you to learn more about the company, and it's also a way for you to show your interest in the company and connect with your interviewers. In general, it's good to ask a couple of questions about the job, a couple of questions about the team that you'd be working with, and a couple of questions about the company's work culture. Here's a list of questions that you can ask your interviewers; of course, it's okay to write your own too.

Answering common questions
Even though every interview is different, there are some questions that you should always be prepared to answer. These are covered below.

Tell me about yourself
This is often the logical first question that you're asked during an interview. It helps the interviewer get to know you and establishes what follow-up questions they should ask you during the rest of the interview.

Your response should always include these components:

Your desired profession.

How your background connects you to your desired profession. Most employers want to know why you're changing careers, so it helps to briefly explain how your background led you to where you are today. This also gives you an opportunity to highlight relevant experience that the employer may have not realized.

How you're qualified for your desired profession. Highlight all of your relevant education and experience (like Thinkful!) and transferrable skills. Make it clear that you have the skills that you need to do the job. Include any skills that you have that are on the job listing.

Here's an example:

My name is Emet, and I'm a project manager. I started out as an instructional designer, which includes a lot of project management. In addition to developing curriculum, I was responsible for making sure that my projects were delivered on time, and I was managing subject matter experts' tasks and schedules. The project management part of the work has always been my favorite part of the job, so I decided that it was time to transition fully to project management. To make sure that I have all of the skills that I need, I recently completed a certificate program in project management. In this program, I learned how to plan, schedule, and budget for business projects; use project management tools; and create project summary reports. I also learned how to handle the less technical aspects of the job, like resolving conflicts and motivating people to complete work on time.

Everything in your answer should be relevant to the job that you're applying to; there's no need to tell your life story. Additionally, aim to keep your answer concise, about one to two minutes long.

How many years of experience do you have?
This question comes up a lot during phone screens. Employers try to get quick facts that help them decide if they should keep you in—or filter you out of—the interview process.

In your response, be honest and provide a specific length of time, but don’t diminish the time that you spent studying or using relevant skills in past jobs. That counts! Here's an example:

Collectively, I have two years of experience in web development. Most recently I completed a program at Thinkful where I worked alongside engineers in a fast-paced educational setting. During this six-month intensive, I built web applications from the ground up and really honed my skills in pair programming, troubleshooting, and quality assurance. Additionally, in my previous role as a Data Analyst, I built various tools using HTML and CSS to improve team operations.

Why do you want to work here?
Employers like to hire people who are excited about their company and work, as opposed to people who just want a paycheck and will take any job. So, to gauge your level of interest and check if you've done your homework, they might ask why you want to work at their company or what you know about their company.

From your research before the interview, you should have an answer ready. Identify something specific that you like about the company's values, projects, or people. Show genuine interest without being salesy. Here's an example:

While I understand the need to make a profit, it's important to me to work for a company that's also a benefit to society. Being able to see is clearly a benefit to society, and I like that you're going above and beyond with charitable work by donating a pair of prescription lenses for every pair of glasses that you sell. Also, everyone who I've chatted with so far seems happy to work here.

What are you looking for?
At some point, you're probably going to be asked about the type of job that you want now or in the future. Like the question above, this helps employers gauge if their company and job opening are right for you. Your answer should include the specific titles that interest you, the industries that interest you, and the locations that interest you. Ideally, your stated interests will match the title, industry, and location of the job that you're interviewing for. For example, you could tell them that you're interested in a social media marketing role at a tech company in Portland.

If you're asked about your long-term career goals, the employer might be trying to find out how long you plan to stay in the job if you get hired. Is it a job that you're excited about having for a while, or is it just a way to make money until you can find something that you truly want? Of course, the employer wants to hire someone who wants to stay awhile, so that they don't need to rehire for the job in a few months. When answering this question, you should emphasize that, although you're open to opportunities for growth or mentorship in the future, you're currently happy learning as much as you can in the type of job that you're interviewing for.

Tell me about your past projects
Employers often ask you questions about your past work or projects. This helps them gauge how transferable your experience is and assess your ability to communicate concepts and processes.

This is an opportunity for you to bring up facts that show off your skills. Start with an overview of your project, then get into specifics. Focus on your specific contributions, how you solved problems, and your results. Here's an example:

At Thinkful, I completed a variety of projects. Some were group projects so that we could mimic a team workplace environment, some involved pair programming with senior engineers, and some were individual projects. For my capstone project, I developed a web app that helps users plan road trips with scheduled stops. Whatever route the user chooses, the app provides weather forecasts and suggests food and lodging options. This was built using JavaScript, Angular, Node, Express, HTML, CSS, and the Google Directions and Places APIs. Most of that, I learned at Thinkful, but I actually taught myself Angular while I was developing the app.

What are your weaknesses?
When interviewers ask you about your weaknesses, it's probably for two reasons: They want to know what your weaknesses are in case they disqualify you from the job. And they want to know if you're self-aware and able to turn your weaknesses into strengths.

In your answer, you should provide a real weakness, but you should make sure to choose a weakness that won't disqualify you from the job. You should also say what you're doing to improve upon that weakness. Here's an example:

Though I've never missed a deadline, in the past, I've struggled with staying organized. I recently started adding every single thing on my to-do list to a Google calendar, which has made a huge difference. I'm also teaching myself how to use Kanban boards and project management software, like Asana.

What are your salary requirements?
Employers don't want to commit to a candidate who they can't afford. By asking you about your salary requirements, they can avoid getting excited about you if you're out of their range.

Your goal, on the other hand, is to set yourself up for the best possible offer and continue the conversation. To make sure that you're not overselling or underselling yourself, try to have the interviewer be the first person to provide a number or range. You can do this by redirecting the question. You'll learn more about how to navigate this process later in this module, but for now, here are a couple of examples:

Good question. I think I need to learn a bit more about this job before I'm able to give you a specific number. Is there a range that you have in mind?

I haven't yet had a chance to dig into the market rate and general salary for other folks at Netflix with my experience, but if you have a range that you can share, I'll be happy to compare that to my research. Otherwise, I trust that if I'm a fit, the salary will be aligned with my experience.

Alternatively, you can say that you're flexible as long as the offer is fair. Here's an example:

I'm open to any compensation that's externally competitive and internally fair.

In case you're required to provide a number, do some research before your interview. You can talk to others in your field, ask your career coach, and check out sites like Glassdoor to learn about average salaries for similar jobs. This allows you to provide a number that's backed up by data, rather than personal interest. Even so, you should still appear flexible. Here's an example:

Based on my research, it looks like the average base salary for data scientists in Seattle is $110K. Is that higher or lower than what you have in mind?

Answering behavioral questions
In addition to the questions described above, there's also a common type of interview question that you should be aware of: behavioral questions. These questions are asked to determine how you might behave in a particular situation (hence behavioral questions).

To determine how you might behave, interviewers ask you either about your past experience in a given situation or how you would respond in a hypothetical situation. Here are some examples:

Tell me about a time when you disagreed with your boss.

What do you do when you disagree with your boss?

What would you do if you disagreed with your boss?

No matter the question or phrasing, you should answer all behavioral questions using the STAR method.

Using the STAR method
The STAR method is a straightforward and systematic way to answer behavioral questions. It follows the acronym STAR, which stands for "situation, task, action, and result." Here's how the method works:

Situation: First, provide context by describing a similar situation that you were in; this usually involves a problem or conflict.

Task: Describe your specific tasks or role in the situation.

Action: Describe the action that you took to move the situation toward a result.

Result: Describe the result of your actions and how the situation resolved. This should be positive and, ideally, quantifiable. You can also share any lessons that you learned, in case you would do something differently the next time that you're in a similar situation.

Here's an example:

As part of a team of five people in a marketing firm, I was working with a new client who wanted to improve their online presence and get more website traffic. I was tasked with collaborating with the contracted designer to help with the designs and make sure that we were reaching a wider audience. Together with the designer, I was able to get their website updated with better UX/UI. I also updated their mobile site on iOS and Android to reach a wider market of users. Within the first month, we increased their overall user traffic by 33%, and it increased week-over-week by 5% for the remainder of the quarter.

Talking about your projects
There is an infinite number of behavioral questions that interviewers can ask, but they tend to fall within one of these categories:

How you work in stressful situations

How you respond when you fail

How you handle conflict with other people

How you motivate yourself and others

How you make decisions

How your work has made a positive impact

How you build relationships with or manage stakeholders

Before the interview, think of situations from your past that you can refer to for each category. Ideally, think about the ways that you can answer these questions with your Thinkful education; consider your projects, group assignments, or interactions with your mentor and classmates. This allows you to answer the interviewer's questions and remind them of your relevant skills and experience. This is particularly important if you don't have prior experience in the field or are struggling to think of transferable examples.

Take a moment to reflect on one of your recent Thinkful projects and answer these questions:

What was the hardest thing about your project, and what did you do to overcome it?

How did you exceed the project requirements, and what impact did that have on the project or your overall growth in the field?

What was the biggest mistake that you made while working on your project? What did you learn, and what would you do differently next time?

What aspect of your project are you most proud of and why?

Take that information and use the STAR format to answer the following prompt: Tell me about a challenging project that you worked on.

Following up after interviews
You might assume that the interview is over once you hang up or leave, but that's incorrect. After every interview, you should follow up—both to thank the interviewer and to stay updated about next steps.

Following up to thank the interviewers
Send a follow-up thank-you email within 24 hours of your interview.

Your thank-you message should include the following:

Gratitude

Excitement about the job

Something specific about the conversation that you had that pertains to the job and your experience

An invitation to contact you if the interviewer has additional questions

Enthusiasm about the next step in the interview process

Here's an example:

Riley,

Thank you so much for taking time out of your day to interview me. I had a great time talking to you and was especially excited to hear about your team's mentorship opportunities.

I'm looking forward to chatting with the rest of your team next week. Until then, if you have additional questions, don't hesitate to reach out!

Cheers,

Will

If you don't have the interviewer's contact information, you can ask the person who organized your interview if they're willing to forward your message. In the case that multiple people interview you, you can either send individual messages or one group message.

Following up when you don't get a response
Sometimes employers get busy and forget to follow up with you. Don't take it personally. Instead, be proactive and follow up with them. At the end of an interview or in your follow-up thank-you email, you should always ask what and when the next step of the interview process is. That way, if you don't hear from the employer by the date and time that they stated, you can follow up.

Allow yourself two check-ins for every step of the interview process. And leave about five business days between each of those check-ins. If the employer doesn't respond after the second check-in, move on to the next opportunity.

It's generally best practice to follow up via email with your recruiting contact or the last person who you interviewed with. Keep your follow-up short and professional. Don't make assumptions and don't indicate any anger or frustration; there's probably a good reason why they haven't gotten back to you. Here's an example of an appropriate follow-up email:

Hello, Reagan!

I hope that this message finds you well. I wanted to touch base about the cybersecurity role that I interviewed for last week—both to express my continued excitement about the opportunity and to ask if you've made a decision about next steps.

Thanks again for your time and consideration.

Regards,

Malia

Follow all of the tips in this lesson, and you're sure to make a good impression—one that may even lead to a job offer.

Supplementary resources
Practice behavioral interview questions

Sample questions to ask during an interview

The STAR method worksheet

Answering "Tell me about yourself" questions

** 46.3 - Engineering and web development interviews

Engineering and web development interviews
1 hourEstimated completion time
Learning Objective
By the end of this lesson, you should be able to prepare for a software engineering interview.

Interviewing for a software engineering role or a similar role can vary widely depending on the company, the industry, and the specific responsibilities of the role. An interview for a full-stack engineer, for example, will likely be different from an interview for a frontend web developer.

Nevertheless, there are still some common steps to the interview process. When you begin an interview process for a technical role, you will likely encounter many of the following steps:

Application process

Take-home challenge

Technical and culture-fit phone screen

Onsite coding or whiteboard challenge

These steps are described next, including any variations that you may encounter.

Application process
The first step in the interview process is actually applying to the role. What is required for the role will differ, but you will often need to include the following information:

A resume

A cover letter

Your GitHub profile

Your personal website

Depending on the application process, you may be able to apply using the information that you have on LinkedIn.

Take-home challenge
Sometimes, you will be given a take-home challenge before moving on to the next step of the process—even before you speak with anyone in person or over the phone. If you encounter this, the company is probably attempting to filter out applicants. You may also receive a take-home challenge after completing a phone screen.

Take-home challenges can vary considerably in terms of difficulty and length. All of the following examples are possible:

You are given a web application to build with limited functionality and particular constraints. For example, you must build a website that filters movies based on a search string in the URL. (An example project is included at the end of this lesson.)

You are given a small set of coding challenges to solve. (Examples of these kinds of questions are included at the end of this lesson.)

You are given a bug to fix on an existing codebase or are asked to review existing code and give your opinion.

Typically, the process will look like this:

You will receive an email admitting you to the next step of the interview process. The hiring manager provides instructions and a deadline. They also specify how to submit the problem.

You will work on completing the problem according to the instructions. If it is a project, you will likely develop the project on your own machine before sending them a GitHub link or zip file. If it is a coding challenge, you will likely complete the problem on an external website.

Once your submission has been reviewed, you will be notified of whether or not you are being moved to the next step of the process.

As soon as you receive the email with the deadline, check your calendar and make certain that you believe that you have enough time to complete the problem. If you have something important coming up, do not hesitate to ask for a modest extension.

Technical and cultural phone screen
This step of the process typically involves a mixture of casual questions, technical questions, and possibly some live coding. If more than a conversation is required, the interviewer should let you know up front what is expected of you.

Either way, you may want to ask if there's anything in particular that you should be prepared to discuss.

Casual questions
During this part of the interview, you will likely be asked generic interview questions, such as the following:

Tell me about yourself.

Why did you decide to become a web developer?

Tell me about your past experiences.

Prepare for these kinds of basic biographical questions ahead of time so that you do not stumble while describing yourself or your past experiences.

Technical questions
During this part of the interview, the interviewer will ask you generic coding questions about languages that you know or high-level concepts. They may also ask you more specific questions about projects that you've completed that are showcased on your GitHub or portfolio website.

If you previously completed a coding challenge of some sort, they may ask you questions specifically about that coding challenge.

Generic coding questions
If the interviewer decides to ask you general questions about coding, the topics can range from the abstract to the highly specific. Here are a few example questions:

What is one of your favorite parts of JavaScript?

Describe the process that happens when you perform a search on Google. In your answer, refer to DNS, browsers, servers, and databases.

What is a closure?

What are the four pillars of object-oriented programming?

What are global variables?

A Google search for JavaScript interview questions will provide you with more than enough questions to look up.

Specific coding questions
Your interviewer may also ask you questions about your code or about code that they gave you ahead of time.

To prepare for these kinds of questions, make sure that you are familiar with your own code. It is also helpful to have written comments for your code, especially if it is something particularly complex. Make sure that you are comfortable explaining what your code is doing as well as how it is doing it.

Here are some examples:

I see that you have testing in your projects. Do you find testing useful while developing an application? Why or why not?

In your capstone project, you enabled CORS. Can you describe what the CORS package is doing and what CORS is?

In your capstone project, you made use of a complex component structure. Can you describe how you structured your project to manage state?

Live coding
If the interviewer has you do some live coding, they will likely have you use a platform that lets them see or share your screen. Hopefully, the interviewer will give you some idea ahead of time about what kind of problem you will be solving.

During a situation like this, remain calm and ask questions if you get confused. Treat this like a pairing session, where the interviewer is your partner. Although you will be driving the experience, it is common to forget some syntax or need to clarify some of the requirements.

Onsite technical challenge or whiteboard interview
If you are brought in to do a technical interview in person, it is likely that you may be asked some of the same coding questions described earlier. You may also be asked to either complete a technical challenge with a member of the engineering team or solve a challenge in front of engineering team members.

The number of people who you interact with really depends on the size of the company and the engineering team. You may speak with just one or two people throughout your experience, or you may meet with an entire team.

Coding challenge
If you end up pairing with another member of the team, you will likely be solving a small problem with the help of the team member. The team member will often introduce the codebase and the problem, and then the two of you will work together.

Often, this style of interview is as much about solving the problem as it is about how you ask questions and work with the other developer. During this process, you want to use technical language and ask questions about why and how the code works. Usually, you'll be free to look up syntax issues, just as you would while normally developing.

Whiteboard interview
A whiteboard challenge is a classic interview component for software engineering roles. In recent years, this practice's usefulness has been questioned. However, it is still likely that you will be asked to complete one of these challenges.

A whiteboard question will require that you solve an algorithmic problem without the use of a computer. Typically, you'll be standing up at a whiteboard, marker in hand, in front of one or two developers. This is often challenging for a few reasons:

You likely rely on your code editor to fill in the blanks for syntax and methods that you don't know. During a whiteboard interview, you will need to recall that information from memory.

The problem that you will be given may be conceptually difficult and possibly require you to find an optimal solution. These kinds of problems are difficult on their own, even with a computer.

Standing up and talking about code while you write it is difficult!

To prepare yourself for a whiteboard interview, practice solving coding challenges without the use of a computer. As you practice, talk out loud and write the problem down on a sheet of paper or a whiteboard, if you have one. Try to emulate the experience as best as you can.

Example whiteboard questions are included in the following section.

Example coding project
Expectations of take-home exercise
The goal of this exercise is to demonstrate your ability and knowledge around building full-stack web applications. We want to see what kind of choices you make in terms of both the visual design and the architectural design.

This exercise should take you around four hours to complete. Please feel free to ask us questions ahead of time to clarify requirements or discuss the due date if it does not work for you.

Deliverable
In this exercise, you will be building a simple website that organizes homes for sale. Your website should have the following features:

Display all homes on a single page, where only the image, price, address, and registration date are shown.

Sort homes by price and registration date, both ascending and descending.

Click a home to see more information, including the real estate agent details and a brief description.

A button on the home page should let any user add a new home through a form. All information is required.

The home data should be stored in a persistent storage solution. To start, you should include the following data: homes.json.

Technical constraints
You are welcome to build this project using whatever stack you prefer. Please keep in mind that you must do the following:

You must include a persistent storage solution for your application.

You must deploy your application to the web so that we may access it.

Outside of that, have fun with your stack—but be ready to defend your decisions!

Submission details
When you are done, please respond to this email with a link to your deployed application and your GitHub. In your GitHub repository's README, please include instructions on how to install and run your application.

Code challenge resources
There are numerous websites that will help you practice small but difficult problems. These kinds of problems could show up during a code screen or during a whiteboard interview. The following are just a few:

HackerRank
Exercism.io
Codewars
LeetCode
CodeSignal

** 46.4 - Negotiating

Negotiating
1 hourEstimated completion time
Learning Objective
By the end of this lesson, you should be able to negotiate a job offer effectively.

Overview
All job offers present the opportunity to negotiate. A good negotiation, however—one that results in a happy outcome for you and the employer—requires research, planning, and the right attitude. This lesson teaches you the right way to negotiate, beginning with why and when you should.

Key Terms
Fair market value
The amount of money that employers generally pay someone with your skills for a specific task
Why and when you should negotiate
Negotiation can be uncomfortable and, therefore, tempting to skip. But often, a few awkward minutes are worth the long-term benefits of asking for more. This section details why and when it's a good time to negotiate.

Why you should negotiate
There are lots of good reasons to negotiate an initial offer. Here are four reasons that usually apply:

You deserve to be paid your fair market value. This is the amount that employers generally pay someone with your skills for a specific task. As such, your compensation should be based on your fair market value. Not your previous salary. Not a company's income. Not more. Not less. If your initial offer is below your fair market value, you may be able to correct this through negotiation.

Employers expect you to negotiate. Negotiating is common practice. Employers aren't surprised or offended when you try to negotiate. Because employers expect you to negotiate, they often initially offer you less than they are willing to pay you. They probably expect to pay you more than their initial offer.

Asking for a fair salary communicates your value. If you go to the store to purchase a microwave, you naturally assume that the most expensive microwave is also the highest quality and the least expensive microwave is the lowest quality. The same is true of how employers view you. If you don't contend for a salary that aligns with your fair market value, employers might wrongly view you as less skilled than you actually are.

Your base salary influences your future earnings. If you hope to work at the same company for a long time, your future raises and bonuses are generally based on the base salary that you start with. For that reason, negotiate the highest base salary that you can. That can amount to a difference of hundreds of thousands of dollars over the span of your career.

When you should negotiate
Negotiating is a good idea in most scenarios, but not all. Below are some guidelines to follow regarding when you should and shouldn't try to negotiate.

Negotiate after you receive an offer. The best time to discuss compensation is after you receive a job offer. This is when you have the most leverage, because you're certain that the employer wants to hire you more than every other candidate who they interviewed. If an employer wants to hire you, they're more likely to be flexible when discussing compensation, because they want to ensure that you accept their offer.

Negotiate when the offer is below your fair market value. As stated previously, you deserve to be paid your fair market value. If the offer is less, you have an objective reason to ask for more, and you should.

Negotiate when you won't accept the current offer. If the offer is below what you're willing to accept, then you have nothing to lose. If you negotiate, the company might agree to pay you an amount that you're happy with. And if they aren't flexible, at least you asked.

Refrain from negotiating when the employer says that you're receiving their best offer. When an employer says that you're receiving their best offer, they might be bluffing. But it's also possible that they're telling you the truth and giving you their best offer to show you how valuable you are to their team. If you try to negotiate, you might seem unappreciative or insensitive to the company's budget, and it's possible that the employer will rescind the offer. Generally, only try to negotiate in this circumstance if you won't accept the position unless the offer increases.

Refrain from negotiating when you have no justification. In the event that an employer makes you an offer that is well above your fair market value, it may be pointless to negotiate, because you have nothing to justify asking for more.

The eight steps of negotiation
No matter how big or small the compensation package is, the following eight steps are a great road map to follow when negotiating a job offer. You should follow the first two steps before you receive an offer and the last six steps after you receive an offer.

Before receiving an offer
When you're considering buying a particular home, it's smart to compare it to other houses in the area, so that you know that the seller is requesting a fair price. It's also helpful to inspect the house so that you know that it has all of the features that are important to you (three bedrooms, a fenced backyard, and so on).

The same is true of job offers. To ensure that you receive a fair offer that has all of the components that matter most to you, you first need to research what a fair offer is. Then, take some time to think about what benefits you value most.

Step 1: Determine your fair market value
Always bring data to a negotiation. In particular, know your fair market value. This is an objective number that's provided by external sources; therefore, it's difficult for an employer to disagree with.

When determining your fair market value, choose a number that is ambitious but not impossible. There is always a range, so aim for a base salary that is at or above the average salary within that range. For example, if the range of compensation is $30,000-$50,000, and the average salary is $41,000, aim for a salary that is between $41,000 and $50,000.

Here are three ways that you can determine your fair market value.

Check Glassdoor

Glassdoor is an excellent resource for determining your fair market value. Start by going to Glassdoor's website.

In the text boxes at the top, list the job title and location of the job that you're considering and select Salaries from the drop-down list. This will return a page that shows you the range of salaries and the average salary that employers in that location pay for the job that you listed.

Conduct an informational interview

Because salary ranges differ by company, it's helpful to talk to an employee of the exact company that you're interviewing at. If you have the opportunity, you can ask that employee if they know the expected salary range for the role that you're seeking.

For example, you could ask, "If offered a job here for the data analytics associate role, what salary should I try to negotiate?" This should happen during a casual conversation or informational interview, not an actual job interview.

Ask your career coach

Your career coach dutifully tracks the employment details of all Thinkful graduates they work with, including base salaries. If another Thinkful graduate has already been hired at the company that you're interviewing at, your career coach might know the salary range that the company is willing to entertain.

Step 2: Familiarize yourself with the components of an offer
Compensation is more than just the base salary. When considering a job offer, you should weigh all of the monetary gains, the future potential that the job would provide you with, and how happy it would make you on a day-to-day basis.

Monetary gains

Base salary is just the tip of the iceberg. Monetary compensation generally includes healthcare and a retirement plan.

Sometimes, it also includes a signing bonus, annual pay increases written into the contract, and equity or stock options. It may also include various other perks, like a bus pass, meals, a gym membership, or continuing education funds.

Future potential

Your next job might not be your dream job—but, ideally, it will lead you to your dream job. Consider how the job title and responsibilities will look on your resume to a future employer, and see if there are opportunities for mentorship and growth within the company.

Happiness

It's the small, day-to-day details and interactions that either provide you with job satisfaction or make you resent going to work. These details comprise the people who you work with, including the company's leadership as well as your direct managers and coworkers.

Other important factors include the number of hours that you're expected to work each day, as well as the type of work that you're assigned. You also want to consider the environment that you get to work in, and the length of your commute. It also involves other details that matter to you personally, like the ability to work from home or bring your pet to work.

Take some time to think about which offer components are most important to you—and which ones you're willing to compromise on.

Upon receiving an offer
Surely, the happiest part of a job search is receiving an offer. Should you choose to negotiate, you can use the following steps as a guide.

Step 3: Take a step back
Upon receiving an offer—even a good one—it's best to take a step back. Don't accept or reject the offer immediately. Instead, warmly but neutrally thank the employer, ask for a written version of the complete compensation package, and ask for time to look it over.

The amount of time that you ask for is up to you. If you're actively interviewing at other companies and expecting more offers, it might be good to ask for a week. This way, the other companies will have the chance to finish interviewing you and make you an offer. If you're confident that you want to accept this offer, no matter the result, you might only need a day.

For example, you could say, "I appreciate the offer! Are you able to email me a copy of the entire Employee Agreement? I'd love to have a couple of days to look it over and make a decision."

Or you could say, "Thank you! I'm glad to hear that you want me on the team; I really enjoyed talking to everyone last week! Can you email me the offer details? If possible, I'd like to discuss this at home and get back to you next week."

Step 4: Strategize
With the full details of a job offer in front of you, it's time to strategize your negotiation. In this step, you should review the offer, determine what you would like to negotiate, gather supporting data, and rehearse your talking points.

Assess and plan

First, write down what the offer includes and what changes you want to see. Is the base salary aligned with your fair market value? Can you ask for more based on your prior experience or education?

Does the job title accurately reflect the responsibilities? Is there a retirement plan? How much time off is included? What else?

When you're determining a base salary and benefits to ask for, it's helpful to ask for more than you want. (Remember: You want your salary ask to be ambitious, but not impossible.) Why? Because the employer may try to negotiate down, but also because the employer might give you exactly what you ask for.

Gather data

Whatever you decide to ask for, have data that supports your request.

If you ask for a higher base salary, you should be able to point to an outside source, like Glassdoor, that demonstrates your counteroffer's reasonableness. Or, if you ask for a different title, you should be able to show the employer other job descriptions that show why your title makes more sense.

And if you ask for a higher base salary to compensate for a lack of healthcare, you should have the math ready that shows exactly how much you will need to pay for healthcare out of pocket each year. And so on.

Have these notes on hand so that you can refer to them if necessary.

Practice

It might feel silly, but you should practice negotiating aloud. This helps you get the wording and tone right, and it makes it easier to follow through when you're talking to the employer.

Rehearse how you're going to start the negotiation, what you're going to ask for, and what you're going to say if the employer responds favorably or negatively to your requests. You may also benefit from writing out a script or talking points that you can refer to.

Practice speaking in a tone that is warm but neutral. Your tone should not be aggressive, because this can sour the relationship between you and your new employer. Conversely, you shouldn't seem overly excited about the offer; the employer won't feel the need to negotiate if they're sure that you're going to accept either way.

Step 5: Schedule a time to reconnect with the employer
The day before you said that you would reconnect with the employer (or earlier, if you're ready), email the employer to request a time to discuss the compensation package over the phone.

Don't negotiate over email. It's easier for an employer to say no to a computer than a human who they're actively talking to, and email creates an opportunity for tone to be misinterpreted.

Here's an example of an email that you could use to request a phone call:

Hi, Sabine,

I'm excited about the offer and was wondering if you have some time tomorrow to discuss a few questions that I have.

I look forward to speaking with you!

Best,

Darnell

Step 6: Negotiate
It's time!

After you greet the employer (remember that your tone should be warm and neutral), begin the negotiation by naming the items that you would like to negotiate. Indicate which items are most important to you and provide data to support your case. This is better than negotiating each item one at a time, as the employer can lose patience and generosity the longer that it goes on.

Here's an example:

Hi! How is your day going so far?

So, I had a chance to look at the offer and I have a couple of questions. I'm wondering how flexible the base salary is and if it's possible to increase the signing bonus. Base salary is most important to me. After doing some research, I saw that the average salary for this role in San Francisco is closer to $100,000.

Now, wait. Let the employer speak next.

The employer will likely do one of three things: they will improve the offer, they will say that they need to ask a manager for approval and will get back to you later, or they will say that they're unable to change the offer.

If the employer isn't willing to negotiate one or all parts of the offer, don't try to negotiate a second time; it's unlikely that they'll change their mind. If you try to negotiate again, the employer might rescind the job offer altogether, because they won't want to hire an employee who seems unhappy with their compensation from the start.

Step 7: Take another step back and assess the new offer
If the employer gives you everything that you've asked for, you can skip to step eight. Otherwise, thank the employer for their willingness to listen and consider your amendments, and ask for an additional day to consider the new offer. The offer might be the same, but now it's official and final.

You might already be leaning toward accepting or rejecting the offer, but it's a good practice to never make big life decisions on the spot. You might change your mind.

You can say, for example, "Thanks so much! I'm going to run this by my partner one more time and will get back to you with an official response tomorrow morning, if that's OK."

Step 8: Accept or decline the offer
After considering the final offer, it's time to make a decision.

If you choose to accept the offer, congratulations! You can email or call the employer and tell them that you accept and are thrilled to begin working with them.

If you choose to reject the offer, remain kind and professional, even if you're frustrated. Why? The world is small; you might cross paths with the employer at another company in the future or at a local meetup.

Also, remember that you represent Thinkful and your other classmates. So, conduct yourself professionally so that the employer is willing to work with other Thinkful alumni who want the offer that you rejected. You can even consider recommending a classmate for the role.

Here's an example:

I really appreciate you and the team taking time to get to know me. While I'm a big fan of your company, I don't think that this is the right choice for me at this time. If you like, I'd be glad to introduce you to two of my classmates who have similar skill sets and, I believe, would be perfect for the job.

FAQs
Here are some frequently asked questions about negotiating salary offers.

What do I do if an employer asks me about my salary expectations before they make me an offer?
Employers sometimes ask you about your salary expectations early in the interview process to see if your salary expectations are aligned. If you say a number that's more than they want to pay, they might remove you from the application pool.

If you say a number that's too low, they might offer you a salary at the bottom of the range that they're willing to pay or assume that you're less capable than you are.

For this reason, to the best of your ability, sidestep or redirect questions related to salary expectations before you're made an offer. You can do this by providing a general answer, asking for more time to think about it, or asking them a question.

For example, you can say that you'll happily consider all offers that are in line with the market. Or you can say, "There's still a lot that I need to learn about this role. Would it be okay if we revisit this question after I have the chance to do more research?"

Here's yet another option: "Great question! I was actually going to ask you what your pay range is for this position."

If the employer insists that you provide a specific number, you can refer to objective data and ask them what they think of that figure. For example, you could say, "Glassdoor says that the average salary for a junior data scientist in Seattle is about $100,000. Does that sound right to you?"

The point is to make salary an open discussion rather than a take-it-or-leave-it ultimatum. If you show that you're flexible, then most employers are happy to move forward with you.

How do I respond if an employer asks me to share my current or past salaries?
Avoid disclosing your current or past salaries. All job offers should be based on your fair market value—not your current or past salaries. If asked, you can politely respond that you prefer not to disclose that information since it's in a different industry.

Alternatively, you could say, "I'm a student, so I currently don't have a salary," or, "I'm glad to consider any salary that's aligned with the market rate for this role."

What do I do if an online application requires me to list my salary requirements or a current or past salary?
You can try writing N/A or Prefer not to disclose.

If you're required to list a number, however, write $1. The employer will know that you want more than $1 or that your current or past salary is greater than $1; this simply communicates that you don't want to discuss it at this time.

How do I calculate an hourly rate?
If you're asked to provide an hourly rate, it's generally because you're considering a contract role. Many contract roles don't include standard benefits, like healthcare or 401(k) matching, so it's helpful to add these lost gains into the hourly rate that you provide.

Calculate the following:

Your market value.

The amount of money that you would need to pay out of pocket each year for healthcare.

The amount of money that you will miss out on by not having a company retirement savings plan, like 401(k) matching or a Registered Retirement Savings Plan.

Add these three numbers together, and then divide that number by 2,080 (the number of work hours in a year). Voilà! That's your hourly rate.

Alternatively, you can use this handy salary calculator to convert an annual salary to an hourly rate.

What things can I do to give myself more leverage when negotiating?
Here are five things that you can do to give yourself more leverage when negotiating:

Be certain that the employer wants to hire you. In other words, don't negotiate until the employer gives you an official job offer.

When you receive an offer, maintain a warm but neutral tone. If it's obvious that you're happy with the initial offer, an employer will have no motivation to increase it.

If possible, interview at multiple companies simultaneously. If an employer knows that other companies are interested in you, they will be more motivated to make you a good offer so that you choose them.

Build allies at the company. If current employees are eager for you to be hired, they will put pressure on the employer to ensure that you're hired, no matter the rate.

Have a good attitude and aim for a win-win result for you and the employer. If you seem unfriendly, annoyed, or self-serving, the employer might not feel like doing you any favors. They might even second-guess having you on their team.

Supplementary resources
Ask For It: How Women Can Use the Power of Negotiation to Get What They Really Want

Startup Employees: Understand Your Offer

10 reasons you should NOT negotiate your salary

Equity vs. Salary in Tech: What's the Difference?

** 46.5 - Interviewing soft skills project
** 46.6 - Finalizing your GitHub portfolio

* unsorted


Content delivery network
Also known as a CDN, a network of servers that helps web page content to load more quickly

different type data type
loop over objects
destructing
rest
scope
array method
arrows function
git, github


html boilerplate

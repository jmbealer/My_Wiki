:PROPERTIES:
:ID:       63bc8d8d-4fc8-4b34-8881-43ace1415a53
:END:
#+title: javascript
#+date: [2022-06-26 Sun 20:16]

* Introduction to JavaScript

console.log() prints to the console
    Data is printed, or logged, to the console, a panel that displays messages, with console.log().
  console.log("hello")

window.alert(); creates a popup
  window.alert("hello");




Built-in objects, including Math, are collections of methods and properties that JavaScript provides.


is case sensitive.
uses camelCasing
  starts with a lowercase letter for the first word
  but every word after the first word begins with a capital letter.
  There are no spaces between words.

  thisIsCamelCasing;
  alsoThisIsCamelCasing;
  andThisIsToo;
  camelCasingIsFun;
  youWillCamelCaseToo;

script.js: All your JavaScript code will be written here


JavaScript was written by Brendan Eich to enhance static web pages.
JavaScript was built specifically as a tool for the web rather than for building software.

Node.js - Node
Node, which was created by Ryan Dahl in 2009, allows you to run JavaScript projects on your machine.
It also allows you to configure the project environment.

* JavaScript Statements

JavaScript Programs
A computer program is a list of "instructions" to be "executed" by a computer.
In a programming language, these programming instructions are called statements.
A JavaScript program is a list of programming statements.
In HTML, JavaScript programs are executed by the web browser.

JavaScript Statements
JavaScript statements are composed of:
Values, Operators, Expressions, Keywords, and Comments.

Most JavaScript programs contain many JavaScript statements.
The statements are executed, one by one, in the same order as they are written.
JavaScript programs (and JavaScript statements) are often called JavaScript code.

Semicolons ;
Semicolons separate JavaScript statements.
Ending statements with semicolon is not required, but highly recommended.

JavaScript White Space
JavaScript ignores multiple spaces.
You can add white space to your script to make it more readable.


JavaScript Line Length and Line Breaks
For best readability, programmers often like to avoid code lines longer than 80 characters.
If a JavaScript statement does not fit on one line, the best place to break it is after an operator:

JavaScript Code Blocks
JavaScript statements can be grouped together in code blocks, inside curly brackets {...}.
The purpose of code blocks is to define statements to be executed together.

** JavaScript Keywords

JavaScript statements often start with a keyword to identify the JavaScript action to be performed.

Our Reserved Words Reference lists all JavaScript keywords.

Here is a list of some of the keywords you will learn about in this tutorial:

JavaScript keywords are reserved words. Reserved words cannot be used as names for variables.

JavaScript Statement Identifiers

JavaScript statements often start with a statement identifier to identify the JavaScript action to be performed.

Statement identifiers are reserved words and cannot be used as variable names (or any other things).



The following table lists all JavaScript statement identifiers:

Statement 	Description

break; - Exits a switch or a loop
  break labelname; - optional label reference
a class is type object template
class className { // Declares a class
  // class body
}
const varName = val; - Declares a block readonly variable
continue; - Breaks one iteration (in the loop) if a specified condition occurs, and continues with the next iteration in the loop
  continue labelname; - optional label reference
debugger; - Stops the execution of JavaScript, and calls (if available) the debugging function
The do...while statements combo defines a code block to be executed once, and repeated as long as a condition is true.
The do...while is used when you want to run a code block at least one time.
do { // Executes a block of statements and repeats the block while a condition is true
  code block to be executed
}
while (condition);
for - defines a code block that is executed as long as a condition is true.
for (let i = 0; arr.length < i; i++){}
for...in - iterates (loops) over the properties of an object.
for (i in object){}
for...of - iterates (loops) over the values of any iterable.
for (i of array){}

function - Declares a function
function funcName(parameters) {}


if - a block of code to be executed if a condition is true:
if (condition) {
  // block of code to be executed if the condition is true
}

else - a block of code to be executed if the condition is false:
if (condition) {
  // block of code to be executed if the condition is true
} else {
  // block of code to be executed if the condition is false
}

else if - a new condition if the first condition is false:
if (condition1) {
  // block of code to be executed if condition1 is true
} else if (condition2) {
  // block of code to be executed if the condition1 is false and condition2 is true
} else {
  // block of code to be executed if the condition1 is false and condition2 is false
}

let name = value; - Declares a block variable
return value; - stops the execution of a function and returns a value.

switch - executes a block of code depending on different cases.
switch(expression){
  case n:
    code block
    break;
  case n:
    code block
    break;
  default:
    code block
}
throw expression; - statement defines a custom error.
  throw 	Throws (generates) an error

try...catch...finally - handles errors without stopping JavaScript.
try {
  tryCode - Code block to run
}
catch(err) {
  catchCode - Code block to handle errors
}
finally {
  finallyCode - Code block to be executed regardless of the try result
}

try - defines the code block to run (to try).
catch - defines a code block to handle any error.
finally - defines a code block to run regardless of the result.


var name = value; - Declares a variable
while - creates a loop (araund a code block) that is executed while a condition is true.
while (condition) {
  code block to be executed
}

** js Statements Example

Example
let x, y, z;    // Statement 1
x = 5;          // Statement 2
y = 6;          // Statement 3
z = x + y;      // Statement 4

This statement tells the browser to write "Hello Dolly." inside an HTML element with id="demo":
Example
document.getElementById("demo").innerHTML = "Hello Dolly.";


Add a semicolon at the end of each executable statement:
Examples
let a, b, c;  // Declare 3 variables
a = 5;        // Assign the value 5 to a
b = 6;        // Assign the value 6 to b
c = a + b;    // Assign the sum of a and b to c

When separated by semicolons, multiple statements on one line are allowed:
a = 5; b = 6; c = a + b;


The following lines are equivalent:
let person = "Hege";
let person="Hege";

A good practice is to put spaces around operators ( = + - * / ):
let x = y + z;

If a JavaScript statement does not fit on one line, the best place to break it is after an operator:

Example
document.getElementById("demo").innerHTML =
"Hello Dolly!";
JavaScript Code Blocks

Example
document.getElementById("demo").innerHTML =
"Hello Dolly!";

One place you will find statements grouped together in blocks, is in JavaScript functions:
Example
function myFunction() {
  document.getElementById("demo1").innerHTML = "Hello Dolly!";
  document.getElementById("demo2").innerHTML = "How are you?";
}

* JavaScript Syntax

JavaScript syntax is the set of rules, how JavaScript programs are constructed:

JavaScript Values
The JavaScript syntax defines two types of values:
    Fixed values
    Variable values

Fixed values are called Literals.
Variable values are called Variables.

JavaScript Literals
The two most important syntax rules for fixed values are:
1. Numbers are written with or without decimals:
10.50
1001
1. Strings are text, written within double or single quotes:
"John Doe"
'John Doe'



JavaScript Expressions
An expression is a combination of values, variables, and operators, which computes to a value.
The computation is called an evaluation.
For example, 5 * 10 evaluates to 50:
5 * 10
Expressions can also contain variable values:
x * 10
The values can be of various types, such as numbers and strings.
For example, "John" + " " + "Doe", evaluates to "John Doe":
"John" + " " + "Doe"

JavaScript Keywords
JavaScript keywords are used to identify actions to be performed.
The let keyword tells the browser to create variables:
let x, y;
x = 5 + 6;
y = x * 10;
The var keyword also tells the browser to create variables:
var x, y;
x = 5 + 6;
y = x * 10;

In these examples, using var or let will produce the same result.
You will learn more about var and let later in this tutorial.


JavaScript Identifiers / Names
Identifiers are JavaScript names.
Identifiers are used to name variables and keywords, and functions.
The rules for legal names are the same in most programming languages.
A JavaScript name must begin with:
    A letter (A-Z or a-z)
    A dollar sign ($)
    Or an underscore (_)
Subsequent characters may be letters, digits, underscores, or dollar signs.
Note
Numbers are not allowed as the first character in names.
This way JavaScript can easily distinguish identifiers from numbers.

JavaScript is Case Sensitive
All JavaScript identifiers are case sensitive.
The variables lastName and lastname, are two different variables:
let lastname, lastName;
lastName = "Doe";
lastname = "Peterson";

JavaScript and Camel Case
Historically, programmers have used different ways of joining multiple words into one variable name:
Hyphens:
first-name, last-name, master-card, inter-city.
Hyphens are not allowed in JavaScript. They are reserved for subtractions.
Underscore:
first_name, last_name, master_card, inter_city.
Upper Camel Case (Pascal Case):
FirstName, LastName, MasterCard, InterCity.
Lower Camel Case:
JavaScript programmers tend to use camel case that starts with a lowercase letter:
firstName, lastName, masterCard, interCity.

JavaScript Character Set
JavaScript uses the Unicode character set.
Unicode covers (almost) all the characters, punctuations, and symbols in the world.

* what are javascript comments? wip

Comments are ignore when the program runs.

Comments allow you explain you code, in the code itself, without affecting your program.

Reasons to use code comments:
+ To describe and explain complicated code and create reminders for yourself and others
+ To deliberately disable sections of code
+ To improve collaboration with other developers working on the code, helping them clearly understand what needs to be added, fixed, or removed in the code
+ To add titles to the sections of long pages of code to make the pages easier to scan
+ It's important to note that HTML and CSS comments are not tags. They also are not written in the same way; they have a distinct syntax.

JavaScript Comments
Not all JavaScript statements are "executed".
Code after double slashes // or between /* and */ is treated as a comment.
Comments are ignored, and will not be executed:
let x = 5;   // I will be executed
// x = 6;   I will NOT be executed

You will learn more about comments in a later chapter.

JavaScript Comments

JavaScript comments can be used to explain JavaScript code, and to make it more readable.

JavaScript comments can also be used to prevent execution, when testing alternative code.
Single Line Comments

Single line comments start with //.

Any text between // and the end of the line will be ignored by JavaScript (will not be executed).

This example uses a single-line comment before each code line:
Example
// Change heading:
document.getElementById("myH").innerHTML = "My First Page";

// Change paragraph:
document.getElementById("myP").innerHTML = "My first paragraph.";

This example uses a single line comment at the end of each line to explain the code:
Example
let x = 5;      // Declare x, give it the value of 5
let y = x + 2;  // Declare y, give it the value of x + 2
Multi-line Comments

Multi-line comments start with /* and end with */.

Any text between /* and */ will be ignored by JavaScript.

This example uses a multi-line comment (a comment block) to explain the code:
Example
/*
The code below will change
the heading with id = "myH"
and the paragraph with id = "myP"
in my web page:
*/
document.getElementById("myH").innerHTML = "My First Page";
document.getElementById("myP").innerHTML = "My first paragraph.";

It is most common to use single line comments.
Block comments are often used for formal documentation.
Using Comments to Prevent Execution

Using comments to prevent execution of code is suitable for code testing.

Adding // in front of a code line changes the code lines from an executable line to a comment.

This example uses // to prevent execution of one of the code lines:
Example
//document.getElementById("myH").innerHTML = "My First Page";
document.getElementById("myP").innerHTML = "My first paragraph.";

This example uses a comment block to prevent execution of multiple lines:
Example
/*
document.getElementById("myH").innerHTML = "My First Page";
document.getElementById("myP").innerHTML = "My first paragraph.";
*/

** JavaScript Comments Examples
#+begin_src js
// single-line comment
/*
  muli-line comment
*/
#+end_src

* Variables

A variable is a named container that can stroe a changeable data value.

A variable is a container for storing data.

A variable behaves as if it was the value that it contains.

Variables hold reusable data in a program and associate it with a name.

Variables are stored in memory.


Variables allow computers to store and manipulate data in a dynamic fashion.
They do this by using a "label" to point to the data rather than using the data itself.
Any of the eight data types may be stored in a variable.


Two steps:
  Declaration (var, let, const)
  Assignment (= assignment operator)

Declare JavaScript Variables
In computer science, data is anything that is meaningful to the computer.

Variables that have not been initialized store the primitive data type undefined.


JavaScript Variables
In a programming language, variables are used to store data values.
JavaScript uses the keywords var, let and const to declare variables.
An equal sign is used to assign values to variables.
In this example, x is defined as a variable. Then, x is assigned (given) the value 6:
let x;
x = 6;

JavaScript Variables
4 Ways to Declare a JavaScript Variable:

    Using var
    Using let
    Using const
    Using nothing

What are Variables?

Variables are containers for storing data (storing data values).

In this example, x, y, and z, are variables, declared with the var keyword:
Example
var x = 5;
var y = 6;
var z = x + y;

In this example, x, y, and z, are variables, declared with the let keyword:
Example
let x = 5;
let y = 6;
let z = x + y;

In this example, x, y, and z, are undeclared variables:
Example
x = 5;
y = 6;
z = x + y;

From all the examples above, you can guess:

    x stores the value 5
    y stores the value 6
    z stores the value 11

When to Use JavaScript var?

Always declare JavaScript variables with var,let, orconst.

The var keyword is used in all JavaScript code from 1995 to 2015.

The let and const keywords were added to JavaScript in 2015.

If you want your code to run in older browser, you must use var.
When to Use JavaScript const?

If you want a general rule: always declare variables with const.

If you think the value of the variable can change, use let.

In this example, price1, price2, and total, are variables:
Example
const price1 = 5;
const price2 = 6;
let total = price1 + price2;

The two variables price1 and price2 are declared with the const keyword.

These are constant values and cannot be changed.

The variable total is declared with the let keyword.

This is a value that can be changed.
Just Like Algebra

Just like in algebra, variables hold values:
let x = 5;
let y = 6;

Just like in algebra, variables are used in expressions:
let z = x + y;

From the example above, you can guess that the total is calculated to be 11.
Note

Variables are containers for storing values.
JavaScript Identifiers

All JavaScript variables must be identified with unique names.

These unique names are called identifiers.

Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).

The general rules for constructing names for variables (unique identifiers) are:

    Names can contain letters, digits, underscores, and dollar signs.
    Names must begin with a letter
    Names can also begin with $ and _ (but we will not use it in this tutorial)
    Names are case sensitive (y and Y are different variables)
    Reserved words (like JavaScript keywords) cannot be used as names

Note

JavaScript identifiers are case-sensitive.
The Assignment Operator

In JavaScript, the equal sign (=) is an "assignment" operator, not an "equal to" operator.

This is different from algebra. The following does not make sense in algebra:
x = x + 5

In JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to x.

(It calculates the value of x + 5 and puts the result into x. The value of x is incremented by 5.)
Note

The "equal to" operator is written like == in JavaScript.
JavaScript Data Types

JavaScript variables can hold numbers like 100 and text values like "John Doe".

In programming, text values are called text strings.

JavaScript can handle many types of data, but for now, just think of numbers and strings.

Strings are written inside double or single quotes. Numbers are written without quotes.

If you put a number in quotes, it will be treated as a text string.
Example
const pi = 3.14;
let person = "John Doe";
let answer = 'Yes I am!';
Declaring a JavaScript Variable

Creating a variable in JavaScript is called "declaring" a variable.

You declare a JavaScript variable with the var or the let keyword:
var carName;
or:
let carName;

After the declaration, the variable has no value (technically it is undefined).

To assign a value to the variable, use the equal sign:
carName = "Volvo";

You can also assign a value to the variable when you declare it:
let carName = "Volvo";

In the example below, we create a variable called carName and assign the value "Volvo" to it.

Then we "output" the value inside an HTML paragraph with id="demo":
Example
<p id="demo"></p>

<script>
let carName = "Volvo";
document.getElementById("demo").innerHTML = carName;
</script>
Note

It's a good programming practice to declare all variables at the beginning of a script.
One Statement, Many Variables

You can declare many variables in one statement.

Start the statement with let and separate the variables by comma:
Example
let person = "John Doe", carName = "Volvo", price = 200;

A declaration can span multiple lines:
Example
let person = "John Doe",
carName = "Volvo",
price = 200;
Value = undefined

In computer programs, variables are often declared without a value. The value can be something that has to be calculated, or something that will be provided later, like user input.

A variable declared without a value will have the value undefined.

The variable carName will have the value undefined after the execution of this statement:
Example
let carName;
Re-Declaring JavaScript Variables

If you re-declare a JavaScript variable declared with var, it will not lose its value.

The variable carName will still have the value "Volvo" after the execution of these statements:
Example
var carName = "Volvo";
var carName;
Note

You cannot re-declare a variable declared with let or const.

This will not work:
let carName = "Volvo";
let carName;
JavaScript Arithmetic

As with algebra, you can do arithmetic with JavaScript variables, using operators like = and +:
Example
let x = 5 + 2 + 3;

You can also add strings, but strings will be concatenated:
Example
let x = "John" + " " + "Doe";

Also try this:
Example
let x = "5" + 2 + 3;
Note

If you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated.

Now try this:
Example
let x = 2 + 3 + "5";
JavaScript Dollar Sign $

Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:
Example
let $ = "Hello World";
let $$$ = 2;
let $myMoney = 5;

Using the dollar sign is not very common in JavaScript, but professional programmers often use it as an alias for the main function in a JavaScript library.

In the JavaScript library jQuery, for instance, the main function $ is used to select HTML elements. In jQuery $("p"); means "select all p elements".
JavaScript Underscore (_)

Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:
Example
let _lastName = "Johnson";
let _x = 2;
let _100 = 5;

Using the underscore is not very common in JavaScript, but a convention among professional programmers is to use it as an alias for "private (hidden)" variables.
Test Yourself With Exercises
Exercise:

Create a variable called carName and assign the value Volvo to it.


** var keyword

var keyword isnt used anymore, and you should avoid using them.
var variables can be re-declared and updated.
The var keyword is used in pre-ES6 versions of JS.
Explore Differences Between the var and let Keywords
One of the biggest problems with declaring variables with the var keyword is that you can easily overwrite variable declarations:
var camper = "James";
var camper = "David";
console.log(camper);
In the code above, the camper variable is originally declared as James, and is then overridden to be David.
The console then displays the string David.
In a small application, you might not run into this type of problem.
But as your codebase becomes larger, you might accidentally overwrite a variable that you did not intend to.
Because this behavior does not throw an error, searching for and fixing bugs becomes more difficult.

** let keyword

let variables, however, can be updated.
let is the preferred way to declare a variable when it can be reassigned
A keyword called let was introduced in ES6, a major update to JavaScript, to solve this potential issue with the var keyword.
If you replace var with let in the code above, it results in an error:
let camper = "James";
let camper = "David";
The error can be seen in your browser console.
So unlike var, when you use let, a variable with the same name can only be declared once.

JavaScript Let

The let keyword was introduced in ES6 (2015).

Variables defined with let cannot be Redeclared.

Variables defined with let must be Declared before use.

Variables defined with let have Block Scope.
Cannot be Redeclared

Variables defined with let cannot be redeclared.

You cannot accidentally redeclare a variable.

With let you can not do this:
Example
let x = "John Doe";

let x = 0;

// SyntaxError: 'x' has already been declared

With var you can:
Example
var x = "John Doe";

var x = 0;
Block Scope

Before ES6 (2015), JavaScript had only Global Scope and Function Scope.

ES6 introduced two important new JavaScript keywords: let and const.

These two keywords provide Block Scope in JavaScript.

Variables declared inside a { } block cannot be accessed from outside the block:
Example
{
  let x = 2;
}
// x can NOT be used here

Variables declared with the var keyword can NOT have block scope.

Variables declared inside a { } block can be accessed from outside the block.
Example
{
  var x = 2;
}
// x CAN be used here
Redeclaring Variables

Redeclaring a variable using the var keyword can impose problems.

Redeclaring a variable inside a block will also redeclare the variable outside the block:
Example
var x = 10;
// Here x is 10

{
var x = 2;
// Here x is 2
}

// Here x is 2

Redeclaring a variable using the let keyword can solve this problem.

Redeclaring a variable inside a block will not redeclare the variable outside the block:
Example
let x = 10;
// Here x is 10

{
let x = 2;
// Here x is 2
}

// Here x is 10
Browser Support

The let keyword is not fully supported in Internet Explorer 11 or earlier.

The following table defines the first browser versions with full support for the let keyword:

Chrome 49 	Edge 12 	Firefox 44 	Safari 11 	Opera 36
Mar, 2016 	Jul, 2015 	Jan, 2015 	Sep, 2017 	Mar, 2016
Redeclaring

Redeclaring a JavaScript variable with var is allowed anywhere in a program:
Example
var x = 2;
// Now x is 2

var x = 3;
// Now x is 3

With let, redeclaring a variable in the same block is NOT allowed:
Example
var x = 2;    // Allowed
let x = 3;    // Not allowed

{
let x = 2;    // Allowed
let x = 3     // Not allowed
}

{
let x = 2;    // Allowed
var x = 3     // Not allowed
}

Redeclaring a variable with let, in another block, IS allowed:
Example
let x = 2;    // Allowed

{
let x = 3;    // Allowed
}

{
let x = 4;    // Allowed
}
Let Hoisting

Variables defined with var are hoisted to the top and can be initialized at any time.

Meaning: You can use the variable before it is declared:
Example

This is OK:
carName = "Volvo";
var carName;

If you want to learn more about hoisting, study the chapter JavaScript Hoisting.

Variables defined with let are also hoisted to the top of the block, but not initialized.

Meaning: Using a let variable before it is declared will result in a ReferenceError:
Example
carName = "Saab";
let carName = "Volvo";

** const keyword

const keyword stand for constants
const keyword used to declare variables that can't be changed
  const pi = 3.14;
  pi = 3.1415; // This will throw an error because const variables can't be updated
const is the preferred way to declare a variable with a constant value.


Declare a Read-Only Variable with the const Keyword
const has all the awesome features that let has, with the added bonus that variables declared using const are read-only.
They are a constant value, which means that once a variable is assigned with const, it cannot be reassigned:
const FAV_PET = "Cats";
FAV_PET = "Dogs";
The console will display an error due to reassigning the value of FAV_PET.
You should always name variables you don't want to reassign using the const keyword.
This helps when you accidentally attempt to reassign a variable that is meant to stay constant.
Note: It is common for developers to use uppercase variable identifiers for immutable values and lowercase or camelCase for mutable values (objects and arrays).
You will learn more about objects, arrays, and immutable and mutable values in later challenges.
Also in later challenges, you will see examples of uppercase, lowercase, or camelCase variable identifiers.

JavaScript Const

The const keyword was introduced in ES6 (2015).

Variables defined with const cannot be Redeclared.

Variables defined with const cannot be Reassigned.

Variables defined with const have Block Scope.
Cannot be Reassigned

A const variable cannot be reassigned:
Example
const PI = 3.141592653589793;
PI = 3.14;      // This will give an error
PI = PI + 10;   // This will also give an error
Must be Assigned

JavaScript const variables must be assigned a value when they are declared:
Correct
const PI = 3.14159265359;
Incorrect
const PI;
PI = 3.14159265359;
When to use JavaScript const?

As a general rule, always declare a variable with const unless you know that the value will change.

Use const when you declare:

    A new Array
    A new Object
    A new Function
    A new RegExp

Constant Objects and Arrays

The keyword const is a little misleading.

It does not define a constant value. It defines a constant reference to a value.

Because of this you can NOT:

    Reassign a constant value
    Reassign a constant array
    Reassign a constant object

    But you CAN:
    Change the elements of constant array
    Change the properties of constant object

Constant Arrays

You can change the elements of a constant array:
Example
// You can create a constant array:
const cars = ["Saab", "Volvo", "BMW"];

// You can change an element:
cars[0] = "Toyota";

// You can add an element:
cars.push("Audi");

But you can NOT reassign the array:
Example
const cars = ["Saab", "Volvo", "BMW"];

cars = ["Toyota", "Volvo", "Audi"];    // ERROR
Constant Objects

You can change the properties of a constant object:
Example
// You can create a const object:
const car = {type:"Fiat", model:"500", color:"white"};

// You can change a property:
car.color = "red";

// You can add a property:
car.owner = "Johnson";

But you can NOT reassign the object:
Example
const car = {type:"Fiat", model:"500", color:"white"};

car = {type:"Volvo", model:"EX60", color:"red"};    // ERROR
Browser Support

The const keyword is not supported in Internet Explorer 10 or earlier.

The following table defines the first browser versions with full support for the const keyword:

Chrome 49 	IE 11 / Edge 	Firefox 36 	Safari 10 	Opera 36
Mar, 2016 	Oct, 2013 	Feb, 2015 	Sep, 2016 	Mar, 2016
Block Scope

Declaring a variable with const is similar to let when it comes to Block Scope.

The x declared in the block, in this example, is not the same as the x declared outside the block:
Example
const x = 10;
// Here x is 10

{
const x = 2;
// Here x is 2
}

// Here x is 10

You can learn more about block scope in the chapter JavaScript Scope.
Redeclaring

Redeclaring a JavaScript var variable is allowed anywhere in a program:
Example
var x = 2;     // Allowed
var x = 3;     // Allowed
x = 4;         // Allowed

Redeclaring an existing var or let variable to const, in the same scope, is not allowed:
Example
var x = 2;     // Allowed
const x = 2;   // Not allowed

{
let x = 2;     // Allowed
const x = 2;   // Not allowed
}

{
const x = 2;   // Allowed
const x = 2;   // Not allowed
}

Reassigning an existing const variable, in the same scope, is not allowed:
Example
const x = 2;     // Allowed
x = 2;           // Not allowed
var x = 2;       // Not allowed
let x = 2;       // Not allowed
const x = 2;     // Not allowed

{
  const x = 2;   // Allowed
  x = 2;         // Not allowed
  var x = 2;     // Not allowed
  let x = 2;     // Not allowed
  const x = 2;   // Not allowed
}

Redeclaring a variable with const, in another scope, or in another block, is allowed:
Example
const x = 2;       // Allowed

{
  const x = 3;   // Allowed
}

{
  const x = 4;   // Allowed
}
Const Hoisting

Variables defined with var are hoisted to the top and can be initialized at any time.

Meaning: You can use the variable before it is declared:
Example

This is OK:
carName = "Volvo";
var carName;

If you want to learn more about hoisting, study the chapter JavaScript Hoisting.

Variables defined with const are also hoisted to the top, but not initialized.

Meaning: Using a const variable before it is declared will result in a ReferenceError:
Example
alert (carName);
const carName = "Volvo";

** unsorted variable

Initializing Variables with the Assignment Operator
It is common to initialize a variable to an initial value in the same line as it is declared.
var myVar = 0;
Creates a new variable called myVar and assigns it an initial value of 0.
Define a variable a with var and initialize it to a value of 9.



Understanding Uninitialized Variables
When JavaScript variables are declared, they have an initial value of undefined.
If you do a mathematical operation on an undefined variable your result will be NaN which means "Not a Number".
If you concatenate a string with an undefined variable, you will get a string of undefined.
Initialize the three variables a, b, and c with 5, 10, and "I am a" respectively so that they will not be undefined.

Understanding Case Sensitivity in Variables
In JavaScript all variables and function names are case sensitive. This means that capitalization matters.
MYVAR is not the same as MyVar nor myvar. It is possible to have multiple distinct variables with the same name but different casing. It is strongly recommended that for the sake of clarity, you do not use this language feature.
Best Practice
Write variable names in JavaScript in camelCase. In camelCase, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.
Examples:
var someVariable;
var anotherVariableName;
var thisVariableNameIsSoLong;

** JavaScript Variables

#+begin_src js
// declare a variable myVar without initial value:
let myVar; // returns undefined
// assign myVar with value 11:
myVar = 11; // returns 11

// declaring and initializing a variable myVar with string foo
let myVar = "foo"; // returns foo

// declare a constants variables named PI with value 3.14
const PI = 3.14; // returns 3.14; readonly
// updating constant variable
PI = 11 // returns a error

// var keyword is bad practice
// declare a variable named myVar without initial value:
var myVar; // returns undefined
// assign myVar with value 33:
myVar = 33; // returns 33
// declaring and initializing a variable myVar with string foo
var myVar = "foo"; // returns foo

// Assigning the Value of One Variable to Another
// declare variable named myStr
let myStr; // returns undefined
// assign myVar to myStr:
myStr = myVar; // returns foo

#+end_src

* javaScript data types and data structures wip

what is the difference between data types and data structures

Programming languages all have built-in data structures, but these often differ from one language to another.

This article attempts to list the built-in data structures available in JavaScript and what properties they have.
These can be used to build other data structures.
Wherever possible, comparisons with other languages are drawn.

Dynamic typing

JavaScript is a loosely typed and dynamic language. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:

let foo = 42;    // foo is now a number
foo     = 'bar'; // foo is now a string
foo     = true;  // foo is now a boolean

JavaScript types
The set of types in the JavaScript language consists of primitive values and objects.

Primitive values (immutable datum represented directly at the lowest level of the language)
  Boolean type
  Null type
  Undefined type
  Number type
  BigInt type
  String type
  Symbol type

Objects (collections of properties)


There are 7 fundamental data types in JavaScript: strings, numbers, booleans, null, undefined, symbol, and object.
The built-in arithmetic operators include +, -, *, /, and %.
Objects, including instances of data types, can have properties, stored information. The properties are denoted with a . after the name of the object, for example: 'Hello'.length.
Objects, including instances of data types, can have methods which perform actions. Methods are called by appending the object or instance with a period, the method name, and parentheses. For example: 'hello'.toUpperCase().
We can access properties and methods by using the ., dot operator.

JavaScript provides eight different data types which are undefined, null, boolean, string, symbol, bigint, number, and object.
has eight

Create Decimal Numbers with JavaScript
We can store decimal numbers in variables too. Decimal numbers are sometimes referred to as floating point numbers or floats.
Note: when you compute numbers, they are computed with finite precision. Operations using floating points may lead to different results than the desired outcome. If you are getting one of these results, open a topic on the freeCodeCamp forum.
Create a variable myDecimal and give it a decimal value with a fractional part (e.g. 5.7).

Data type
The type of value that a variable can have, such as string, number, or boolean
A data type is a value that variables can have in a given programming language

  String
  Number
  Boolean
  Null
    The null data type is used to indicate that a variable has no value. Sometimes, null is used as the default value when other data isn't available.
  Undefined
    The undefined data type is a special value that, in a way, means exactly that—that a variable was never defined. Like null, undefined means empty. But null and undefined have a slightly different understanding of emptiness.
    A null value means that the developer decided that the value was empty. It was a deliberate choice. An undefined value, on the other hand, means that the value was left empty, simply because nothing was ever assigned to it.
    That means that you shouldn't assign a variable undefined, like in this command: let variable = undefined.

Integer
Also called an int, a whole number that isn't written as a fraction or with a decimal point
Floating-point number
Also called a float, a number that includes a decimal point
Boolean
A binary variable with two possible values: true and false
  Pronounced not or bang, ! inverts a boolean value. This means that !false turns into true, and !true turns into false.
Coercion
The process of converting a value from one data type to another
  Number()
  parseInt()
  parseFloat()
  toString()

typeof, which is a built-in operator that JavaScript provides to reveal the data type of a particular value.
  console.log(typeof 2); // Number
  console.log(typeof "2");
  console.log(typeof true);



Use the parseInt Function
The parseInt() function parses a string and returns an integer. Here's an example:
const a = parseInt("007");
The above function converts the string 007 to the integer 7. If the first character in the string can't be converted into a number, then it returns NaN.
Use parseInt() in the convertToInteger function so it converts the input string str into an integer, and returns it.

Use the parseInt Function with a Radix
The parseInt() function parses a string and returns an integer. It takes a second argument for the radix, which specifies the base of the number in the string. The radix can be an integer between 2 and 36.
The function call looks like:
parseInt(string, radix);
And here's an example:
const a = parseInt("11", 2);
The radix variable says that 11 is in the binary system, or base 2. This example converts the string 11 to an integer 3.
Use parseInt() in the convertToInteger function so it converts a binary number to an integer and returns it.

  Null type
  BigInt type
  Symbol type

* javascript strings wip

Strings are characters wrapped in single or double quotes

A sequence of letters, numerals, punctuation marks, or other characters, treated as text
Strings are used to represent text.
The data type is called a string because it's made up of a string of characters, such as letters, that are arranged in a line.

"your name" is called a string literal.
 string literal, or string, is a series of zero or more characters enclosed in single or double quotes.


Manipulate text


** Escape Sequences in Strings

Escaping Literal Quotes in Strings with and without backslashes
'foo\'s bar'
"foo's bar"
'"Thats foo bar"'
"\"Thats foo bar \""

Quotes are not the only characters that can be escaped inside a string. There are two reasons to use escaping characters:
To allow you to use characters you may not otherwise be able to type out, such as a carriage return.
To allow you to represent multiple quotes in a string without JavaScript misinterpreting what you mean.
We learned this in the previous challenge.
Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	newline
\r	carriage return
\t	tab
\b	word boundary
\f	form feed
Note that the backslash itself must be escaped in order to display as a backslash.
Assign the following three lines of text into the single variable myStr using escape sequences.
FirstLine
    \SecondLine
ThirdLine
You will need to use escape sequences to insert special characters correctly. You will also need to follow the spacing as it looks above, with no spaces between escape sequences or words.
Note: The indentation for SecondLine is achieved with the tab escape character, not spaces.

** concatenation

The process of joining different values or pieces of text together

Concatenating Strings with Plus Operator
In JavaScript, when the + operator is used with a String value, it is called the concatenation operator. You can build a new string out of other strings by concatenating them together.
Example
'My name is Alan,' + ' I concatenate.'
Note: Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.
Example:
const ourStr = "I come first. " + "I come second.";
The string I come first. I come second. would be displayed in the console.
Build myStr from the strings This is the start. and This is the end. using the + operator. Be sure to include a space between the two strings.

Concatenating Strings with the Plus Equals Operator
We can also use the += operator to concatenate a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.
Note: Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.
Example:
let ourStr = "I come first. ";
ourStr += "I come second.";
ourStr now has a value of the string I come first. I come second..
Build myStr over several lines by concatenating these two strings: This is the first sentence. and This is the second sentence. using the += operator. Use the += operator similar to how it is shown in the example and be sure to include a space between the two strings. Start by assigning the first string to myStr, then add on the second string.

Constructing Strings with Variables
Sometimes you will need to build a string. By using the concatenation operator (+), you can insert one or more variables into a string you're building.
Example:
const ourName = "freeCodeCamp";
const ourStr = "Hello, our name is " + ourName + ", how are you?";
ourStr would have a value of the string Hello, our name is freeCodeCamp, how are you?.
Set myName to a string equal to your name and build myStr with myName between the strings My name is and and I am well!

Appending Variables to Strings
Just as we can build a string over multiple lines out of string literals, we can also append variables to a string using the plus equals (+=) operator.
Example:
const anAdjective = "awesome!";
let ourStr = "freeCodeCamp is ";
ourStr += anAdjective;
ourStr would have the value freeCodeCamp is awesome!.
Set someAdjective to a string of at least 3 characters and append it to myStr using the += operator.

** bracket Notation

Use Bracket Notation to Find the First Character in a String
Bracket notation is a way to get a character at a specific index within a string.
Most modern programming languages, like JavaScript, don't start counting at 1 like humans do. They start at 0. This is referred to as Zero-based indexing.
For example, the character at index 0 in the word Charles is C. So if const firstName = "Charles", you can get the value of the first letter of the string by using firstName[0].
Example:
const firstName = "Charles";
const firstLetter = firstName[0];
firstLetter would have a value of the string C.
Use bracket notation to find the first character in the lastName variable and assign it to firstLetterOfLastName.

Understand String Immutability
In JavaScript, String values are immutable, which means that they cannot be altered once created.
For example, the following code:
let myStr = "Bob";
myStr[0] = "J";
cannot change the value of myStr to Job, because the contents of myStr cannot be altered. Note that this does not mean that myStr cannot be changed, just that the individual characters of a string literal cannot be changed. The only way to change myStr would be to assign it with a new string, like this:
let myStr = "Bob";
myStr = "Job";
Correct the assignment to myStr so it contains the string value of Hello World using the approach shown in the example above.

Use Bracket Notation to Find the Nth Character in a String
You can also use bracket notation to get the character at other positions within a string.
Remember that computers start counting at 0, so the first character is actually the zeroth character.
Example:
const firstName = "Ada";
const secondLetterOfFirstName = firstName[1];
secondLetterOfFirstName would have a value of the string d.
Let's try to set thirdLetterOfLastName to equal the third letter of the lastName variable using bracket notation.
Hint: Try looking at the example above if you get stuck.

Use Bracket Notation to Find the Last Character in a String
In order to get the last letter of a string, you can subtract one from the string's length.
For example, if const firstName = "Ada", you can get the value of the last letter of the string by using firstName[firstName.length - 1].
Example:
const firstName = "Ada";
const lastLetter = firstName[firstName.length - 1];
lastLetter would have a value of the string a.
Use bracket notation to find the last character in the lastName variable.
Hint: Try looking at the example above if you get stuck.

Use Bracket Notation to Find the Nth-to-Last Character in a String
You can use the same principle we just used to retrieve the last character in a string to retrieve the Nth-to-last character.
For example, you can get the value of the third-to-last letter of the const firstName = "Augusta" string by using firstName[firstName.length - 3]
Example:
const firstName = "Augusta";
const thirdToLastLetter = firstName[firstName.length - 3];
thirdToLastLetter would have a value of the string s.
Use bracket notation to find the second-to-last character in the lastName string.
Hint: Try looking at the example above if you get stuck.

** String methods and properties

String methods help you to work with strings.

Primitive values, like "John Doe", cannot have properties or methods (because they are not objects).
But with JavaScript, methods and properties are also available to primitive values, because JavaScript treats primitive values as objects when executing methods and properties.




Method
A function that is attached to an object as one of the object's attributes

"STR".toLowerCase();
"str".replace("str", "Str");
toLowerCase(): This returns a string with all the letters lowercase.
toUpperCase(): This returns a string with all the letters capitalized.
trim(): This removes whitespace (spaces, tabs, and so forth) at the beginning and end of a string.
replace(): This replaces part of a string with another string
  replace(matchingString, newString)

  Extracting String Parts

There are 3 methods for extracting a part of a string:

    slice(start, end)
    substring(start, end)
    substr(start, length)

JavaScript String slice()

slice() extracts a part of a string and returns the extracted part in a new string.

The method takes 2 parameters: the start position, and the end position (end not included).
Example

Slice out a portion of a string from position 7 to position 13 (13 not included):
let str = "Apple, Banana, Kiwi";
let part = str.slice(7, 13);
Note

JavaScript counts positions from zero.

First position is 0.

Second position is 1.

If a parameter is negative, the position is counted from the end of the string.

This example slices out a portion of a string from position -12 to position -6:
Example
let str = "Apple, Banana, Kiwi";
let part = str.slice(-12, -6);

If you omit the second parameter, the method will slice out the rest of the string:
Example
let part = str.slice(7);

or, counting from the end:
Example
let part = str.slice(-12);
JavaScript String substring()

substring() is similar to slice().

The difference is that start and end values less than 0 are treated as 0 in substring().
Example
let str = "Apple, Banana, Kiwi";
let part = str.substring(7, 13);

If you omit the second parameter, substring() will slice out the rest of the string.
JavaScript String substr()

substr() is similar to slice().

The difference is that the second parameter specifies the length of the extracted part.
Example
let str = "Apple, Banana, Kiwi";
let part = str.substr(7, 6);

If you omit the second parameter, substr() will slice out the rest of the string.
Example
let str = "Apple, Banana, Kiwi";
let part = str.substr(7);

If the first parameter is negative, the position counts from the end of the string.
Example
let str = "Apple, Banana, Kiwi";
let part = str.substr(-4);
Replacing String Content

The replace() method replaces a specified value with another value in a string:
Example
let text = "Please visit Microsoft!";
let newText = text.replace("Microsoft", "W3Schools");
Note

The replace() method does not change the string it is called on.

The replace() method returns a new string.

The replace() method replaces only the first match

If you want to replace all matches, use a regular expression with the /g flag set. See examples below.

By default, the replace() method replaces only the first match:
Example
let text = "Please visit Microsoft and Microsoft!";
let newText = text.replace("Microsoft", "W3Schools");

By default, the replace() method is case sensitive. Writing MICROSOFT (with upper-case) will not work:
Example
let text = "Please visit Microsoft!";
let newText = text.replace("MICROSOFT", "W3Schools");

To replace case insensitive, use a regular expression with an /i flag (insensitive):
Example
let text = "Please visit Microsoft!";
let newText = text.replace(/MICROSOFT/i, "W3Schools");

Note

Regular expressions are written without quotes.

To replace all matches, use a regular expression with a /g flag (global match):
Example
let text = "Please visit Microsoft and Microsoft!";
let newText = text.replace(/Microsoft/g, "W3Schools");

Note

You will learn a lot more about regular expressions in the chapter JavaScript Regular Expressions.
Converting to Upper and Lower Case

A string is converted to upper case with toUpperCase():

A string is converted to lower case with toLowerCase():
JavaScript String toUpperCase()
Example
let text1 = "Hello World!";
let text2 = text1.toUpperCase();
JavaScript String toLowerCase()
Example
let text1 = "Hello World!";       // String
let text2 = text1.toLowerCase();  // text2 is text1 converted to lower
JavaScript String concat()

concat() joins two or more strings:
Example
let text1 = "Hello";
let text2 = "World";
let text3 = text1.concat(" ", text2);

The concat() method can be used instead of the plus operator. These two lines do the same:
Example
text = "Hello" + " " + "World!";
text = "Hello".concat(" ", "World!");
Note

All string methods return a new string. They don't modify the original string.

Formally said:

Strings are immutable: Strings cannot be changed, only replaced.
JavaScript String trim()

The trim() method removes whitespace from both sides of a string:
Example
let text1 = "      Hello World!      ";
let text2 = text1.trim();
JavaScript String Padding

ECMAScript 2017 added two String methods: padStart() and padEnd() to support padding at the beginning and at the end of a string.
JavaScript String padStart()

The padStart() method pads a string with another string:
Example
let text = "5";
let padded = text.padStart(4,"x");
Example
let text = "5";
let padded = text.padStart(4,"0");
Note

The padStart() method is a string method.

To pad a number, convert the number to a string first.

See the example below.
Example
let numb = 5;
let text = numb.toString();
let padded = text.padStart(4,"0");
Browser Support

padStart() is an ECMAScript 2017 feature.

It is supported in all modern browsers:

Chrome 	Edge 	Firefox 	Safari 	Opera
Yes 	Yes 	Yes 	Yes 	Yes

padStart() is not supported in Internet Explorer.
JavaScript String padEnd()

The padEnd() method pads a string with another string:
Example
let text = "5";
let padded = text.padEnd(4,"x");
Example
let text = "5";
let padded = text.padEnd(4,"0");
Note

The padEnd() method is a string method.

To pad a number, convert the number to a string first.

See the example below.
Example
let numb = 5;
let text = numb.toString();
let padded = text.padEnd(4,"0");
Browser Support

padEnd() is an ECMAScript 2017 feature.

It is supported in all modern browsers:

Chrome 	Edge 	Firefox 	Safari 	Opera
Yes 	Yes 	Yes 	Yes 	Yes

padEnd() is not supported in Internet Explorer.
Extracting String Characters

There are 3 methods for extracting string characters:

    charAt(position)
    charCodeAt(position)
    Property access [ ]

JavaScript String charAt()

The charAt() method returns the character at a specified index (position) in a string:
Example
let text = "HELLO WORLD";
let char = text.charAt(0);
JavaScript String charCodeAt()

The charCodeAt() method returns the unicode of the character at a specified index in a string:

The method returns a UTF-16 code (an integer between 0 and 65535).
Example
let text = "HELLO WORLD";
let char = text.charCodeAt(0);
Property Access

ECMAScript 5 (2009) allows property access [ ] on strings:
Example
let text = "HELLO WORLD";
let char = text[0];
Note

Property access might be a little unpredictable:

    It makes strings look like arrays (but they are not)
    If no character is found, [ ] returns undefined, while charAt() returns an empty string.
    It is read only. str[0] = "A" gives no error (but does not work!)

Example
let text = "HELLO WORLD";
text[0] = "A";    // Gives no error, but does not work
Converting a String to an Array

If you want to work with a string as an array, you can convert it to an array.
JavaScript String split()

A string can be converted to an array with the split() method:
Example
text.split(",")    // Split on commas
text.split(" ")    // Split on spaces
text.split("|")    // Split on pipe

If the separator is omitted, the returned array will contain the whole string in index [0].

If the separator is "", the returned array will be an array of single characters:
Example
text.split("")
Complete String Reference

For a complete String reference, go to our:

Complete JavaScript String Reference.

The reference contains descriptions and examples of all string properties and methods.

JavaScript String Reference
JavaScript Strings

A JavaScript string stores a series of characters like "John Doe".

A string can be any text inside double or single quotes:
let carName1 = "Volvo XC60";
let carName2 = 'Volvo XC60';

String indexes are zero-based:

The first character is in position 0, the second in 1, and so on.

For a tutorial about Strings, read our JavaScript String Tutorial.
String Properties and Methods

Normally, strings like "John Doe", cannot have methods or properties because they are not objects.

But with JavaScript, methods and properties are also available to strings, because JavaScript treats strings as objects when executing methods and properties.

JavaScript String Methods
Method 	Description
charAt() 	Returns the character at a specified index (position)
charCodeAt() 	Returns the Unicode of the character at a specified index
concat() 	Returns two or more joined strings

endsWith() method
+ The endsWith() method returns true if a string ends with a specified value.
+ Otherwise it returns false.
+ The endsWith() method is case sensitive.
+ string.endsWith(searchvalue, length)
+ searchvalue	Required. The string to search for.
+ length	Optional. The length of the string to search. Default value is the length of the string.
+ A boolean :	true if the string ends with the value, otherwise false.

#+begin_src js
let text = "Hello world";
// check if text ends with world
let result = text.endsWith("world"); // returns true
let text1 = "Hello World";
// check if text1 ends with world
let result1 = text1.endsWith("world"); // returns false; case sensitive

let text2 = "Hello world, welcome to the universe.";
let result2 = text2.endsWith("world", 11);
#+end_src

fromCharCode() 	Returns Unicode values as characters
includes() 	Returns if a string contains a specified value
indexOf() 	Returns the index (position) of the first occurrence of a value in a string
lastIndexOf() 	Returns the index (position) of the last occurrence of a value in a string
localeCompare() 	Compares two strings in the current locale
match() 	Searches a string for a value, or a regular expression, and returns the matches
repeat() 	Returns a new string with a number of copies of a string
replace() 	Searches a string for a value, or a regular expression, and returns a string where the values are replaced
search() 	Searches a string for a value, or regular expression, and returns the index (position) of the match
slice() 	Extracts a part of a string and returns a new string
split() 	Splits a string into an array of substrings
startsWith() 	Checks whether a string begins with specified characters
substr() 	Extracts a number of characters from a string, from a start index (position)
substring() 	Extracts characters from a string, between two specified indices (positions)
toLocaleLowerCase() 	Returns a string converted to lowercase letters, using the host's locale
toLocaleUpperCase() 	Returns a string converted to uppercase letters, using the host's locale
toLowerCase() 	Returns a string converted to lowercase letters
toString() 	Returns a string or a string object as a string
toUpperCase() 	Returns a string converted to uppercase letters
trim() 	Returns a string with removed whitespaces
valueOf() 	Returns the primitive value of a string or a string object

Note
All string methods return a new value.
They do not change the original variable.

*** JavaScript String Properties

constructor property
+ The constructor property returns the string's constructor function
+ The constructor property returns the function that created the String prototype.
+ constructor returns: function String() { [native code] }
+ string.constructor

length property
+ The length property returns the length of a string
+ The length property of an empty string is 0.
+ string.length
+ return value is number that's length of the string.

You can find the length of a String value by writing .length after the string variable or string literal.

#+begin_src js
let myStr = "foo"; // returns foo
// store the length of myStr into strLength
let strLength = myStr.length; // returns 3
let myStr = ""; // returns empty string
let strLength = myStr.length; // returns 0
print to console the string buzz length
console.log("buzz".length); // returns 4
#+end_src

The prototype property :: Allows you to add properties and methods to an object

*** String HTML Wrapper Methods

HTML wrapper methods return a string wrapped inside an HTML tag.

These are not standard methods, and may not work as expected.
Method 	Description
anchor() 	Displays a string as an anchor
big() 	Displays a string using a big font
blink() 	Displays a blinking string
bold() 	Displays a string in bold
fixed() 	Displays a string using a fixed-pitch font
fontcolor() 	Displays a string using a specified color
fontsize() 	Displays a string using a specified size
italics() 	Displays a string in italic
link() 	Displays a string as a hyperlink
small() 	Displays a string using a small font
strike() 	Displays a string with a strikethrough
sub() 	Displays a string as subscript text
sup() 	Displays a string as superscript text

* Numbers

Numbers are any number without quotes: 23.8879

* boolean

Understanding Boolean Values
Another data type is the Boolean. Booleans may only be one of two values: true or false. They are basically little on-off switches, where true is on and false is off. These two states are mutually exclusive.
Note: Boolean values are never written with quotes. The strings "true" and "false" are not Boolean and have no special meaning in JavaScript.
Modify the welcomeToBooleans function so that it returns true instead of false when the run button is clicked.


Mathematical assignment operators make it easy to calculate a new value and assign it to the same variable.
The + operator is used to concatenate strings including string values held in variables.
In ES6, template literals use backticks ` and ${} to interpolate values into a string.
The typeof keyword returns the data type (as a string) of a value.

* array

Store Multiple Values in one Variable using JavaScript Arrays
With JavaScript array variables, we can store several pieces of data in one place.
You start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry, like this:
const sandwich = ["peanut butter", "jelly", "bread"];
Modify the new array myArray so that it contains both a string and a number (in that order).

Nest one Array within Another Array
You can also nest arrays within other arrays, like below:
const teams = [["Bulls", 23], ["White Sox", 45]];
This is also called a multi-dimensional array.
Create a nested array called myArray.

Access Array Data with Indexes
We can access the data inside arrays using indexes.
Array indexes are written in the same bracket notation that strings use, except that instead of specifying a character, they are specifying an entry in the array. Like strings, arrays use zero-based indexing, so the first element in an array has an index of 0.
Example
const array = [50, 60, 70];
console.log(array[0]);
const data = array[1];
The console.log(array[0]) prints 50, and data has the value 60.
Create a variable called myData and set it to equal the first value of myArray using bracket notation.

Modify Array Data With Indexes
Unlike strings, the entries of arrays are mutable and can be changed freely, even if the array was declared with const.
Example
const ourArray = [50, 40, 30];
ourArray[0] = 15;
ourArray now has the value [15, 40, 30].
Note: There shouldn't be any spaces between the array name and the square brackets, like array [0]. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.
Modify the data stored at index 0 of myArray to a value of 45.

Access Multi-Dimensional Arrays With Indexes
One way to think of a multi-dimensional array, is as an array of arrays. When you use brackets to access your array, the first set of brackets refers to the entries in the outer-most (the first level) array, and each additional pair of brackets refers to the next level of entries inside.
Example
const arr = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [[10, 11, 12], 13, 14]
];
arr[3];
arr[3][0];
arr[3][0][1];
arr[3] is [[10, 11, 12], 13, 14], arr[3][0] is [10, 11, 12], and arr[3][0][1] is 11.
Note: There shouldn't be any spaces between the array name and the square brackets, like array [0][0] and even this array [0] [0] is not allowed. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.
Using bracket notation select an element from myArray such that myData is equal to 8.

Manipulate Arrays With push()
An easy way to append data to the end of an array is via the push() function.
.push() takes one or more parameters and "pushes" them onto the end of the array.
Examples:
const arr1 = [1, 2, 3];
arr1.push(4);
const arr2 = ["Stimpson", "J", "cat"];
arr2.push(["happy", "joy"]);
arr1 now has the value [1, 2, 3, 4] and arr2 has the value ["Stimpson", "J", "cat", ["happy", "joy"]].
Push ["dog", 3] onto the end of the myArray variable.

Manipulate Arrays With pop()
Another way to change the data in an array is with the .pop() function.
.pop() is used to pop a value off of the end of an array. We can store this popped off value by assigning it to a variable. In other words, .pop() removes the last element from an array and returns that element.
Any type of entry can be popped off of an array - numbers, strings, even nested arrays.
const threeArr = [1, 4, 6];
const oneDown = threeArr.pop();
console.log(oneDown);
console.log(threeArr);
The first console.log will display the value 6, and the second will display the value [1, 4].
Use the .pop() function to remove the last item from myArray and assign the popped off value to a new variable, removedFromMyArray.

Manipulate Arrays With shift()
pop() always removes the last element of an array. What if you want to remove the first?
That's where .shift() comes in. It works just like .pop(), except it removes the first element instead of the last.
Example:
const ourArray = ["Stimpson", "J", ["cat"]];
const removedFromOurArray = ourArray.shift();
removedFromOurArray would have a value of the string Stimpson, and ourArray would have ["J", ["cat"]].
Use the .shift() function to remove the first item from myArray and assign the "shifted off" value to a new variable, removedFromMyArray.

Manipulate Arrays With unshift()
Not only can you shift elements off of the beginning of an array, you can also unshift elements to the beginning of an array i.e. add elements in front of the array.
.unshift() works exactly like .push(), but instead of adding the element at the end of the array, unshift() adds the element at the beginning of the array.
Example:
const ourArray = ["Stimpson", "J", "cat"];
ourArray.shift();
ourArray.unshift("Happy");
After the shift, ourArray would have the value ["J", "cat"]. After the unshift, ourArray would have the value ["Happy", "J", "cat"].
Add ["Paul", 35] to the beginning of the myArray variable using unshift().

Accessing Nested Arrays
As we have seen in earlier examples, objects can contain both nested objects and nested arrays. Similar to accessing nested objects, array bracket notation can be chained to access nested arrays.
Here is an example of how to access a nested array:
const ourPets = [
  {
    animalType: "cat",
    names: [
      "Meowzer",
      "Fluffy",
      "Kit-Cat"
    ]
  },
  {
    animalType: "dog",
    names: [
      "Spot",
      "Bowser",
      "Frankie"
    ]
  }
];
ourPets[0].names[1];
ourPets[1].names[0];
ourPets[0].names[1] would be the string Fluffy, and ourPets[1].names[0] would be the string Spot.
Using dot and bracket notation, set the variable secondTree to the second item in the trees list from the myPlants object.

JavaScript array
A collection of ordered items
  [] empty array
  arr[0]; call first array items
  arr[0] = "foo";
Mutation
A change in the original data value
push(): This adds an item to the end of an array. It returns the new length of the array.
pop(): This removes the last item from the end of an array. It returns the last item.
length: Just like the string tool length, this gives the length of the array—in other words, the number of items. You'll notice that length doesn't need parentheses. That's because it's technically a property and not a method.

* objects

Build JavaScript Objects
You may have heard the term object before.
Objects are similar to arrays, except that instead of using indexes to access and modify their data, you access the data in objects through what are called properties.
Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.
Here's a sample cat object:
const cat = {
  "name": "Whiskers",
  "legs": 4,
  "tails": 1,
  "enemies": ["Water", "Dogs"]
};
In this example, all the properties are stored as strings, such as name, legs, and tails. However, you can also use numbers as properties. You can even omit the quotes for single-word string properties, as follows:
const anotherObject = {
  make: "Ford",
  5: "five",
  "model": "focus"
};
However, if your object has any non-string properties, JavaScript will automatically typecast them as strings.
Make an object that represents a dog called myDog which contains the properties name (a string), legs, tails and friends.
You can set these object properties to whatever values you want, as long as name is a string, legs and tails are numbers, and friends is an array.

Accessing Object Properties with Dot Notation
There are two ways to access the properties of an object: dot notation (.) and bracket notation ([]), similar to an array.
Dot notation is what you use when you know the name of the property you're trying to access ahead of time.
Here is a sample of using dot notation (.) to read an object's property:
const myObj = {
  prop1: "val1",
  prop2: "val2"
};
const prop1val = myObj.prop1;
const prop2val = myObj.prop2;
prop1val would have a value of the string val1, and prop2val would have a value of the string val2.
Read in the property values of testObj using dot notation. Set the variable hatValue equal to the object's property hat and set the variable shirtValue equal to the object's property shirt.

Accessing Object Properties with Bracket Notation
The second way to access the properties of an object is bracket notation ([]). If the property of the object you are trying to access has a space in its name, you will need to use bracket notation.
However, you can still use bracket notation on object properties without spaces.
Here is a sample of using bracket notation to read an object's property:
const myObj = {
  "Space Name": "Kirk",
  "More Space": "Spock",
  "NoSpace": "USS Enterprise"
};
myObj["Space Name"];
myObj['More Space'];
myObj["NoSpace"];
myObj["Space Name"] would be the string Kirk, myObj['More Space'] would be the string Spock, and myObj["NoSpace"] would be the string USS Enterprise.
Note that property names with spaces in them must be in quotes (single or double).
Read the values of the properties an entree and the drink of testObj using bracket notation and assign them to entreeValue and drinkValue respectively.

Accessing Object Properties with Variables
Another use of bracket notation on objects is to access a property which is stored as the value of a variable. This can be very useful for iterating through an object's properties or when accessing a lookup table.
Here is an example of using a variable to access a property:
const dogs = {
  Fido: "Mutt",
  Hunter: "Doberman",
  Snoopie: "Beagle"
};
const myDog = "Hunter";
const myBreed = dogs[myDog];
console.log(myBreed);
The string Doberman would be displayed in the console.
Another way you can use this concept is when the property's name is collected dynamically during the program execution, as follows:
const someObj = {
  propName: "John"
};
function propPrefix(str) {
  const s = "prop";
  return s + str;
}
const someProp = propPrefix("Name");
console.log(someObj[someProp]);
someProp would have a value of the string propName, and the string John would be displayed in the console.
Note that we do not use quotes around the variable name when using it to access the property because we are using the value of the variable, not the name.
Set the playerNumber variable to 16. Then, use the variable to look up the player's name and assign it to player.

Updating Object Properties
After you've created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can use either dot or bracket notation to update.
For example, let's look at ourDog:
const ourDog = {
  "name": "Camper",
  "legs": 4,
  "tails": 1,
  "friends": ["everything!"]
};
Since he's a particularly happy dog, let's change his name to the string Happy Camper. Here's how we update his object's name property: ourDog.name = "Happy Camper"; or ourDog["name"] = "Happy Camper"; Now when we evaluate ourDog.name, instead of getting Camper, we'll get his new name, Happy Camper.
Update the myDog object's name property. Let's change her name from Coder to Happy Coder. You can use either dot or bracket notation.

Add New Properties to a JavaScript Object
You can add new properties to existing JavaScript objects the same way you would modify them.
Here's how we would add a bark property to ourDog:
ourDog.bark = "bow-wow";
or
ourDog["bark"] = "bow-wow";
Now when we evaluate ourDog.bark, we'll get his bark, bow-wow.
Example:
const ourDog = {
  "name": "Camper",
  "legs": 4,
  "tails": 1,
  "friends": ["everything!"]
};
ourDog.bark = "bow-wow";
Add a bark property to myDog and set it to a dog sound, such as "woof". You may use either dot or bracket notation.

Delete Properties from a JavaScript Object
We can also delete properties from objects like this:
delete ourDog.bark;
Example:
const ourDog = {
  "name": "Camper",
  "legs": 4,
  "tails": 1,
  "friends": ["everything!"],
  "bark": "bow-wow"
};
delete ourDog.bark;
After the last line shown above, ourDog looks like:

{
  "name": "Camper",
  "legs": 4,
  "tails": 1,
  "friends": ["everything!"]
}
Delete the tails property from myDog. You may use either dot or bracket notation.

Using Objects for Lookups
Objects can be thought of as a key/value storage, like a dictionary. If you have tabular data, you can use an object to lookup values rather than a switch statement or an if/else chain. This is most useful when you know that your input data is limited to a certain range.
Here is an example of a simple reverse alphabet lookup:
const alpha = {
  1:"Z",
  2:"Y",
  3:"X",
  4:"W",
  ...
  24:"C",
  25:"B",
  26:"A"
};
alpha[2];
alpha[24];
const value = 2;
alpha[value];
alpha[2] is the string Y, alpha[24] is the string C, and alpha[value] is the string Y.
Convert the switch statement into an object called lookup. Use it to look up val and assign the associated string to the result variable.

Manipulating Complex Objects
Sometimes you may want to store data in a flexible Data Structure. A JavaScript object is one way to handle flexible data. They allow for arbitrary combinations of strings, numbers, booleans, arrays, functions, and objects.
Here's an example of a complex data structure:
const ourMusic = [
  {
    "artist": "Daft Punk",
    "title": "Homework",
    "release_year": 1997,
    "formats": [
      "CD",
      "Cassette",
      "LP"
    ],
    "gold": true
  }
];
This is an array which contains one object inside. The object has various pieces of metadata about an album. It also has a nested formats array. If you want to add more album records, you can do this by adding records to the top level array. Objects hold data in a property, which has a key-value format. In the example above, "artist": "Daft Punk" is a property that has a key of artist and a value of Daft Punk.
Note: You will need to place a comma after every object in the array, unless it is the last object in the array.
Add a new album to the myMusic array. Add artist and title strings, release_year number, and a formats array of strings.

Accessing Nested Objects
The sub-properties of objects can be accessed by chaining together the dot or bracket notation.
Here is a nested object:
const ourStorage = {
  "desk": {
    "drawer": "stapler"
  },
  "cabinet": {
    "top drawer": {
      "folder1": "a file",
      "folder2": "secrets"
    },
    "bottom drawer": "soda"
  }
};
ourStorage.cabinet["top drawer"].folder2;
ourStorage.desk.drawer;
ourStorage.cabinet["top drawer"].folder2 would be the string secrets, and ourStorage.desk.drawer would be the string stapler.
Access the myStorage object and assign the contents of the glove box property to the gloveBoxContents variable. Use dot notation for all properties where possible, otherwise use bracket notation.


JavaScript object
A collection of values and their associated keys
An object is a type of collection that holds information, just like an array.
An object makes it possible to store data using key-value pairs, as a dictionary does.

empty object {};
key-value pairs key: value

{
key1: val2,
...
key3: ["foo", "bar"],
};

dot notation
objName.key

arr = [
  { key0: "val0", key1: "val1"}
]
arr[0].key1

adding key-value pairs
objName.newKey = "newValue";
updating key-value pairs
objName.oldKey = "newValue";

bracket notation
objName[key]
sometimes need to use bracket notation when the key that you wish to access is a string with a space in it.
obj["str"]

adding key-value pairs
objName["newKey"] = "newValue";
updating key-value pairs
objName["oldKey"] = "newValue";

bracket variables
let var = "oldKey";
obj[var]; // oldValue

objects loop

nested objects

var = {
  key0: {
  "nestedKey": {
    foo: 111
  }
  }
}
var.key0.nestedKey.foo
var["key0"]["nestedKey"].foo
var.key0.nestedKey["foo"] = 222;

* Undefined
* operator

JavaScript Operators
Example

Assign values to variables and add them together:
let x = 5;         // assign the value 5 to x
let y = 2;         // assign the value 2 to y
let z = x + y;     // assign the value 7 to z (5 + 2)

The assignment operator (=) assigns a value to a variable.
Assignment
let x = 10;

The addition operator (+) adds numbers:
Adding
let x = 5;
let y = 2;
let z = x + y;

The multiplication operator (*) multiplies numbers.
Multiplying
let x = 5;
let y = 2;
let z = x * y;
JavaScript Arithmetic Operators

Arithmetic operators are used to perform arithmetic on numbers:
Operator 	Description
+ 	Addition
- 	Subtraction
* 	Multiplication
** 	Exponentiation (ES2016)
/ 	Division
% 	Modulus (Division Remainder)
++ 	Increment
-- 	Decrement

Arithmetic operators are fully described in the JS Arithmetic chapter.
JavaScript Assignment Operators

Assignment operators assign values to JavaScript variables.
Operator 	Example 	Same As
= 	x = y 	x = y
+= 	x += y 	x = x + y
-= 	x -= y 	x = x - y
*= 	x *= y 	x = x * y
/= 	x /= y 	x = x / y
%= 	x %= y 	x = x % y
**= 	x **= y 	x = x ** y

The addition assignment operator (+=) adds a value to a variable.
Assignment
let x = 10;
x += 5;

Assignment operators are fully described in the JS Assignment chapter.
JavaScript String Operators

The + operator can also be used to add (concatenate) strings.
Example
let text1 = "John";
let text2 = "Doe";
let text3 = text1 + " " + text2;

The result of text3 will be:
John Doe

The += assignment operator can also be used to add (concatenate) strings:
Example
let text1 = "What a very ";
text1 += "nice day";

The result of text1 will be:
What a very nice day

When used on strings, the + operator is called the concatenation operator.
Adding Strings and Numbers

Adding two numbers, will return the sum, but adding a number and a string will return a string:
Example
let x = 5 + 5;
let y = "5" + 5;
let z = "Hello" + 5;

The result of x, y, and z will be:
10
55
Hello5

If you add a number and a string, the result will be a string!
JavaScript Comparison Operators
Operator 	Description
== 	equal to
=== 	equal value and equal type
!= 	not equal
!== 	not equal value or not equal type
> 	greater than
< 	less than
>= 	greater than or equal to
<= 	less than or equal to
? 	ternary operator

Comparison operators are fully described in the JS Comparisons chapter.
JavaScript Logical Operators
Operator 	Description
&& 	logical and
|| 	logical or
! 	logical not

Logical operators are fully described in the JS Comparisons chapter.
JavaScript Type Operators
Operator 	Description
typeof 	Returns the type of a variable
instanceof 	Returns true if an object is an instance of an object type

Type operators are fully described in the JS Type Conversion chapter.
JavaScript Bitwise Operators

Bit operators work on 32 bits numbers.
Any numeric operand in the operation is converted into a 32 bit number. The result is converted back to a JavaScript number.
Operator 	Description 	Example 	Same as 	Result 	Decimal
& 	AND 	5 & 1 	0101 & 0001 	0001 	 1
| 	OR 	5 | 1 	0101 | 0001 	0101 	 5
~ 	NOT 	~ 5 	 ~0101 	1010 	 10
^ 	XOR 	5 ^ 1 	0101 ^ 0001 	0100 	 4
<< 	left shift 	5 << 1 	0101 << 1 	1010 	 10
>> 	right shift 	5 >> 1 	0101 >> 1 	0010 	  2
>>> 	unsigned right shift 	5 >>> 1 	0101 >>> 1 	0010 	  2

The examples above uses 4 bits unsigned examples. But JavaScript uses 32-bit signed numbers.
Because of this, in JavaScript, ~ 5 will not return 10. It will return -6.
~00000000000000000000000000000101 will return 11111111111111111111111111111010

Bitwise operators are fully described in the JS Bitwise chapter.
Test Yourself With Exercises
Exercise:

Multiply 10 with 5, and alert the result.

alert(10  5);


Start the Exercise

Operator
  A symbol that performs an operation on one or more variables and values
  operators connect pieces of codes.
Mathematical operator
  An operator that performs an arithmetic calculation with one or more operands
Assignment operator
  An operator that assigns specific values in code
  it assigns the vaule of the right operand to the left operand.


arithmetic expression is a combination of:
  operands (values, variables, etc.)
  operators (+ - * / %)
  that can be evaluated to a value
  ex. y = x + 5

JavaScript Operators
JavaScript uses arithmetic operators ( + - * / ) to compute values:
(5 + 6) * 10
JavaScript uses an assignment operator ( = ) to assign values to variables:
let x, y;
x = 5;
y = 6;

Add Two Numbers with JavaScript
Number is a data type in JavaScript which represents numeric data.
Now let's try to add two numbers using JavaScript.
JavaScript uses the + symbol as an addition operator when placed between two numbers.
Example:
const myVar = 5 + 10;
myVar now has the value 15.
Change the 0 so that sum will equal 20.

Subtract One Number from Another with JavaScript
We can also subtract one number from another.
JavaScript uses the - symbol for subtraction.
Example
const myVar = 12 - 6;
myVar would have the value 6.
Change the 0 so the difference is 12.

Multiply Two Numbers with JavaScript
We can also multiply one number by another.
JavaScript uses the * symbol for multiplication of two numbers.
Example
const myVar = 13 * 13;
myVar would have the value 169.
Change the 0 so that product will equal 80.

We can also divide one number by another.
JavaScript uses the / symbol for division.
Example
const myVar = 16 / 2;
myVar now has the value 8.
Change the 0 so that the quotient is equal to 2.

Increment a Number with JavaScript
You can easily increment or add one to a variable with the ++ operator.
i++;
is the equivalent of
i = i + 1;
Note: The entire line becomes i++;, eliminating the need for the equal sign.
Change the code to use the ++ operator on myVar.

Decrement a Number with JavaScript
You can easily decrement or decrease a variable by one with the -- operator.
i--;
is the equivalent of
i = i - 1;
Note: The entire line becomes i--;, eliminating the need for the equal sign.
Change the code to use the -- operator on myVar.

Multiply Two Decimals with JavaScript
In JavaScript, you can also perform calculations with decimal numbers, just like whole numbers.
Let's multiply two decimals together to get their product.

Divide One Decimal by Another with JavaScript
Now let's divide one decimal by another.
Change the 0.0 so that quotient will equal to 2.2.

Finding a Remainder in JavaScript
The remainder operator % gives the remainder of the division of two numbers.
Example
5 % 2 = 1 because
Math.floor(5 / 2) = 2 (Quotient)
2 * 2 = 4
5 - 4 = 1 (Remainder)
Usage
In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by 2.
17 % 2 = 1 (17 is Odd)
48 % 2 = 0 (48 is Even)
Note: The remainder operator is sometimes incorrectly referred to as the modulus operator. It is very similar to modulus, but does not work properly with negative numbers.
Set remainder equal to the remainder of 11 divided by 3 using the remainder (%) operator.

Compound Assignment With Augmented Addition
In programming, it is common to use assignments to modify the contents of a variable. Remember that everything to the right of the equals sign is evaluated first, so we can say:
myVar = myVar + 5;
to add 5 to myVar. Since this is such a common pattern, there are operators which do both a mathematical operation and assignment in one step.
One such operator is the += operator.
let myVar = 1;
myVar += 5;
console.log(myVar);
6 would be displayed in the console.
Convert the assignments for a, b, and c to use the += operator.

Compound Assignment With Augmented Subtraction
Like the += operator, -= subtracts a number from a variable.
myVar = myVar - 5;
will subtract 5 from myVar. This can be rewritten as:
myVar -= 5;
Convert the assignments for a, b, and c to use the -= operator.

Compound Assignment With Augmented Multiplication
The *= operator multiplies a variable by a number.
myVar = myVar * 5;
will multiply myVar by 5. This can be rewritten as:
myVar *= 5;
Convert the assignments for a, b, and c to use the *= operator.

Compound Assignment With Augmented Division
The /= operator divides a variable by another number.
myVar = myVar / 5;
Will divide myVar by 5. This can be rewritten as:
myVar /= 5;
Convert the assignments for a, b, and c to use the /= operator.

Comparison with the Equality Operator
There are many comparison operators in JavaScript. All of these operators return a boolean true or false value.
The most basic operator is the equality operator ==. The equality operator compares two values and returns true if they're equivalent or false if they are not. Note that equality is different from assignment (=), which assigns the value on the right of the operator to a variable on the left.
function equalityTest(myVal) {
  if (myVal == 10) {
    return "Equal";
  }
  return "Not Equal";
}
If myVal is equal to 10, the equality operator returns true, so the code in the curly braces will execute, and the function will return Equal. Otherwise, the function will return Not Equal. In order for JavaScript to compare two different data types (for example, numbers and strings), it must convert one type to another. This is known as Type Coercion. Once it does, however, it can compare terms as follows:
1   ==  1  // true
1   ==  2  // false
1   == '1' // true
"3" ==  3  // true
Add the equality operator to the indicated line so that the function will return the string Equal when val is equivalent to 12.

Comparison with the Strict Equality Operator
Strict equality (===) is the counterpart to the equality operator (==). However, unlike the equality operator, which attempts to convert both values being compared to a common type, the strict equality operator does not perform a type conversion.
If the values being compared have different types, they are considered unequal, and the strict equality operator will return false.
Examples
3 ===  3  // true
3 === '3' // false
In the second example, 3 is a Number type and '3' is a String type.
Use the strict equality operator in the if statement so the function will return the string Equal when val is strictly equal to 7.

Practice comparing different values
In the last two challenges, we learned about the equality operator (==) and the strict equality operator (===). Let's do a quick review and practice using these operators some more.
If the values being compared are not of the same type, the equality operator will perform a type conversion, and then evaluate the values. However, the strict equality operator will compare both the data type and value as-is, without converting one type to the other.
Examples
3 == '3' returns true because JavaScript performs type conversion from string to number. 3 === '3' returns false because the types are different and type conversion is not performed.
Note: In JavaScript, you can determine the type of a variable or a value with the typeof operator, as follows:
typeof 3
typeof '3'
typeof 3 returns the string number, and typeof '3' returns the string string.
The compareEquality function in the editor compares two values using the equality operator. Modify the function so that it returns the string Equal only when the values are strictly equal.

Comparison with the Inequality Operator
The inequality operator (!=) is the opposite of the equality operator. It means not equal and returns false where equality would return true and vice versa. Like the equality operator, the inequality operator will convert data types of values while comparing.
Examples
1 !=  2    // true
1 != "1"   // false
1 != '1'   // false
1 != true  // false
0 != false // false
Add the inequality operator != in the if statement so that the function will return the string Not Equal when val is not equivalent to 99.

Comparison with the Strict Inequality Operator
The strict inequality operator (!==) is the logical opposite of the strict equality operator. It means "Strictly Not Equal" and returns false where strict equality would return true and vice versa. The strict inequality operator will not convert data types.
Examples
3 !==  3  // false
3 !== '3' // true
4 !==  3  // true
Add the strict inequality operator to the if statement so the function will return the string Not Equal when val is not strictly equal to 17

Comparison with the Greater Than Operator
The greater than operator (>) compares the values of two numbers. If the number to the left is greater than the number to the right, it returns true. Otherwise, it returns false.
Like the equality operator, the greater than operator will convert data types of values while comparing.
Examples
5   >  3  // true
7   > '3' // true
2   >  3  // false
'1' >  9  // false
Add the greater than operator to the indicated lines so that the return statements make sense.

Use the Conditional (Ternary) Operator
The conditional operator, also called the ternary operator, can be used as a one line if-else expression.
The syntax is a ? b : c, where a is the condition, b is the code to run when the condition returns true, and c is the code to run when the condition returns false.
The following function uses an if/else statement to check a condition:
function findGreater(a, b) {
  if(a > b) {
    return "a is greater";
  }
  else {
    return "b is greater or equal";
  }
}
This can be re-written using the conditional operator:
function findGreater(a, b) {
  return a > b ? "a is greater" : "b is greater or equal";
}
Use the conditional operator in the checkEqual function to check if two numbers are equal or not. The function should return either the string Equal or the string Not Equal.

Use Multiple Conditional (Ternary) Operators
In the previous challenge, you used a single conditional operator. You can also chain them together to check for multiple conditions.
The following function uses if, else if, and else statements to check multiple conditions:
function findGreaterOrEqual(a, b) {
  if (a === b) {
    return "a and b are equal";
  }
  else if (a > b) {
    return "a is greater";
  }
  else {
    return "b is greater";
  }
}
The above function can be re-written using multiple conditional operators:
function findGreaterOrEqual(a, b) {
  return (a === b) ? "a and b are equal"
    : (a > b) ? "a is greater"
    : "b is greater";
}
It is considered best practice to format multiple conditional operators such that each condition is on a separate line, as shown above. Using multiple conditional operators without proper indentation may make your code hard to read. For example:
function findGreaterOrEqual(a, b) {
  return (a === b) ? "a and b are equal" : (a > b) ? "a is greater" : "b is greater";
}
In the checkSign function, use multiple conditional operators - following the recommended format used in findGreaterOrEqual - to check if a number is positive, negative or zero. The function should return positive, negative or zero.

Logical operators
Operators that test whether a given condition is met
  and &&, or ||, not !
  && evaluates to true if the values on both sides are true.
  || evaluates to true if either one of the values is true.
  ! works on just one value, and gives the opposite of a value. Therefore, !true evaluates to false, and !false evaluates to true.
  short-circuiting
    && (and) returns the first falsy value, or the last value if no values are falsy.
    || (or) returns the first truthy value, or the last value if no values are truthy.

Comparison operators
Mathematical symbols that compare two values
  strict equality =====
  loose equality ====
  relational operators
  greater than >
  less than <
  greater than >=
  less than <=
  not equal !==


Storing Values with the Assignment Operator
In JavaScript, you can store a value in a variable with the assignment operator (=).
myVariable = 5;
This assigns the Number value 5 to myVariable.
If there are any calculations to the right of the = operator, those are performed before the value is assigned to the variable on the left of the operator.
var myVar;
myVar = 5;
First, this code creates a variable named myVar. Then, the code assigns 5 to myVar. Now, if myVar appears again in the code, the program will treat it as if it is 5.

JavaScript Arithmetic
JavaScript Arithmetic Operators

Arithmetic operators perform arithmetic on numbers (literals or variables).
Operator 	Description
+ 	Addition
- 	Subtraction
* 	Multiplication
** 	Exponentiation (ES2016)
/ 	Division
% 	Modulus (Remainder)
++ 	Increment
-- 	Decrement
Arithmetic Operations

A typical arithmetic operation operates on two numbers.

The two numbers can be literals:
Example
let x = 100 + 50;

or variables:
Example
let x = a + b;

or expressions:
Example
let x = (100 + 50) * a;
Operators and Operands

The numbers (in an arithmetic operation) are called operands.

The operation (to be performed between the two operands) is defined by an operator.
Operand 	Operator 	Operand
100 	+ 	50
Adding

The addition operator (+) adds numbers:
Example
let x = 5;
let y = 2;
let z = x + y;
Subtracting

The subtraction operator (-) subtracts numbers.
Example
let x = 5;
let y = 2;
let z = x - y;
Multiplying

The multiplication operator (*) multiplies numbers.
Example
let x = 5;
let y = 2;
let z = x * y;
Dividing

The division operator (/) divides numbers.
Example
let x = 5;
let y = 2;
let z = x / y;
Remainder

The modulus operator (%) returns the division remainder.
Example
let x = 5;
let y = 2;
let z = x % y;

In arithmetic, the division of two integers produces a quotient and a remainder.

In mathematics, the result of a modulo operation is the remainder of an arithmetic division.
Incrementing

The increment operator (++) increments numbers.
Example
let x = 5;
x++;
let z = x;
Decrementing

The decrement operator (--) decrements numbers.
Example
let x = 5;
x--;
let z = x;
Exponentiation

The exponentiation operator (**) raises the first operand to the power of the second operand.
Example
let x = 5;
let z = x ** 2;          // result is 25

x ** y produces the same result as Math.pow(x,y):
Example
let x = 5;
let z = Math.pow(x,2);   // result is 25
Operator Precedence

Operator precedence describes the order in which operations are performed in an arithmetic expression.
Example
let x = 100 + 50 * 3;

Is the result of example above the same as 150 * 3, or is it the same as 100 + 150?

Is the addition or the multiplication done first?

As in traditional school mathematics, the multiplication is done first.

Multiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-).

And (as in school mathematics) the precedence can be changed by using parentheses:
Example
let x = (100 + 50) * 3;

When using parentheses, the operations inside the parentheses are computed first.

When many operations have the same precedence (like addition and subtraction), they are computed from left to right:
Example
let x = 100 + 50 - 3;
JavaScript Operator Precedence Values

Pale red entries indicates ECMAScript 2015 (ES6) or higher.
Value 	Operator 	Description 	Example
21 	( ) 	Expression grouping 	(3 + 4)

20 	. 	Member 	person.name
20 	[] 	Member 	person["name"]
20 	() 	Function call 	myFunction()
20 	new 	Create 	new Date()

18 	++ 	Postfix Increment 	i++
18 	-- 	Postfix Decrement 	i--

17 	++ 	Prefix Increment 	++i
17 	-- 	Prefix Decrement 	--i
17 	! 	Logical not 	!(x==y)
17 	typeof 	Type 	typeof x

16 	** 	Exponentiation (ES2016) 	10 ** 2

15 	* 	Multiplication 	10 * 5
15 	/ 	Division 	10 / 5
15 	% 	Division Remainder 	10 % 5

14 	+ 	Addition 	10 + 5
14 	- 	Subtraction 	10 - 5

13 	<< 	Shift left 	x << 2
13 	>> 	Shift right 	x >> 2
13 	>>> 	Shift right (unsigned) 	x >>> 2

12 	< 	Less than 	x < y
12 	<= 	Less than or equal 	x <= y
12 	> 	Greater than 	x > y
12 	>= 	Greater than or equal 	x >= y
12 	in 	Property in Object 	"PI" in Math
12 	instanceof 	Instance of Object 	instanceof Array

11 	== 	Equal 	x == y
11 	=== 	Strict equal 	x === y
11 	!= 	Unequal 	x != y
11 	!== 	Strict unequal 	x !== y

10 	& 	Bitwise AND 	x & y
9 	^ 	Bitwise XOR 	x ^ y
8 	| 	Bitwise OR 	x | y
7 	&& 	Logical AND 	x && y
6 	|| 	Logical OR 	x || y
5 	?? 	Nullish Coalescing 	x ?? y
4 	? : 	Condition 	? "Yes" : "No"

3 	+= 	Assignment 	x += y
3 	/= 	Assignment 	x /= y
3 	-= 	Assignment 	x -= y
3 	*= 	Assignment 	x *= y
3 	%= 	Assignment 	x %= y
3 	<<= 	Assignment 	x <<= y
3 	>>= 	Assignment 	x >>= y
3 	>>>= 	Assignment 	x >>>= y
3 	&= 	Assignment 	x &= y
3 	^= 	Assignment 	x ^= y
3 	|= 	Assignment 	x |= y

2 	yield 	Pause Function 	yield x
1 	, 	Comma 	5 , 6

Expressions in parentheses are fully computed before the value is used in the rest of the expression.


* control flow

Control flow Also called flow of execution,
the tools provided by a programming language to conditionally determine which set of instructions runs

Conditional statement
A statement that tells the code to perform different tasks based on different kinds of information

if statement
if (condition) {
  statement
}
#+begin_src js
if (1 === 1) {
    console.log("hello")
}
#+end_src

if else statement
if (condition) {
  statement1
} else {
  statement2
}

#+begin_src js
if (1 === 2) {
    console.log("hello");
} else {
    console.log("world");
}
#+end_src

if else if statement
if (condition) {
  statement1
} else if {
  statement2
} else {
  statement3
}

#+begin_src js
if (1 === 2) {
    console.log("hello");
} else if  ( 2 === 2 ){
    console.log("foo");
} else {
    console.log("world");
}
#+end_src

Use Conditional Logic with If Statements
if statements are used to make decisions in code. The keyword if tells JavaScript to execute the code in the curly braces under certain conditions, defined in the parentheses. These conditions are known as Boolean conditions and they may only be true or false.
When the condition evaluates to true, the program executes the statement inside the curly braces. When the Boolean condition evaluates to false, the statement inside the curly braces will not execute.
Pseudocode
if (condition is true) {
  statement is executed
}
Example
function test (myCondition) {
  if (myCondition) {
    return "It was true";
  }
  return "It was false";
}
test(true);
test(false);
test(true) returns the string It was true, and test(false) returns the string It was false.
When test is called with a value of true, the if statement evaluates myCondition to see if it is true or not. Since it is true, the function returns It was true. When we call test with a value of false, myCondition is not true and the statement in the curly braces is not executed and the function returns It was false.
Create an if statement inside the function to return Yes, that was true if the parameter wasThatTrue is true and return No, that was false otherwise.

Comparison with the Greater Than Or Equal To Operator
The greater than or equal to operator (>=) compares the values of two numbers. If the number to the left is greater than or equal to the number to the right, it returns true. Otherwise, it returns false.
Like the equality operator, the greater than or equal to operator will convert data types while comparing.
Examples
6   >=  6  // true
7   >= '3' // true
2   >=  3  // false
'7' >=  9  // false
Add the greater than or equal to operator to the indicated lines so that the return statements make sense.

Comparison with the Less Than Operator
The less than operator (<) compares the values of two numbers. If the number to the left is less than the number to the right, it returns true. Otherwise, it returns false. Like the equality operator, the less than operator converts data types while comparing.
Examples
2   < 5 // true
'3' < 7 // true
5   < 5 // false
3   < 2 // false
'8' < 4 // false
Add the less than operator to the indicated lines so that the return statements make sense.

Comparison with the Less Than Or Equal To Operator
The less than or equal to operator (<=) compares the values of two numbers. If the number to the left is less than or equal to the number to the right, it returns true. If the number on the left is greater than the number on the right, it returns false. Like the equality operator, the less than or equal to operator converts data types.
Examples
4   <= 5 // true
'7' <= 7 // true
5   <= 5 // true
3   <= 2 // false
'8' <= 4 // false
Add the less than or equal to operator to the indicated lines so that the return statements make sense.

Comparisons with the Logical And Operator
Sometimes you will need to test more than one thing at a time. The logical and operator (&&) returns true if and only if the operands to the left and right of it are true.
The same effect could be achieved by nesting an if statement inside another if:
if (num > 5) {
  if (num < 10) {
    return "Yes";
  }
}
return "No";
will only return Yes if num is greater than 5 and less than 10. The same logic can be written as:
if (num > 5 && num < 10) {
  return "Yes";
}
return "No";
Replace the two if statements with one statement, using the && operator, which will return the string Yes if val is less than or equal to 50 and greater than or equal to 25. Otherwise, will return the string No.

Comparisons with the Logical Or Operator
The logical or operator (||) returns true if either of the operands is true. Otherwise, it returns false.
The logical or operator is composed of two pipe symbols: (||). This can typically be found between your Backspace and Enter keys.
The pattern below should look familiar from prior waypoints:
if (num > 10) {
  return "No";
}
if (num < 5) {
  return "No";
}
return "Yes";
will return Yes only if num is between 5 and 10 (5 and 10 included). The same logic can be written as:
if (num > 10 || num < 5) {
  return "No";
}
return "Yes";
Combine the two if statements into one statement which returns the string Outside if val is not between 10 and 20, inclusive. Otherwise, return the string Inside.

Introducing Else Statements
When a condition for an if statement is true, the block of code following it is executed. What about when that condition is false? Normally nothing would happen. With an else statement, an alternate block of code can be executed.
if (num > 10) {
  return "Bigger than 10";
} else {
  return "10 or Less";
}
Combine the if statements into a single if/else statement.

Introducing Else If Statements
If you have multiple conditions that need to be addressed, you can chain if statements together with else if statements.
if (num > 15) {
  return "Bigger than 15";
} else if (num < 5) {
  return "Smaller than 5";
} else {
  return "Between 5 and 15";
}
Convert the logic to use else if statements.

Logical Order in If Else Statements
Order is important in if, else if statements.
The function is executed from top to bottom so you will want to be careful of what statement comes first.
Take these two functions as an example.
Here's the first:
function foo(x) {
  if (x < 1) {
    return "Less than one";
  } else if (x < 2) {
    return "Less than two";
  } else {
    return "Greater than or equal to two";
  }
}
And the second just switches the order of the statements:
function bar(x) {
  if (x < 2) {
    return "Less than two";
  } else if (x < 1) {
    return "Less than one";
  } else {
    return "Greater than or equal to two";
  }
}
While these two functions look nearly identical if we pass a number to both we get different outputs.
foo(0)
bar(0)
foo(0) will return the string Less than one, and bar(0) will return the string Less than two.
Change the order of logic in the function so that it will return the correct statements in all cases.

Chaining If Else Statements
if/else statements can be chained together for complex logic. Here is pseudocode of multiple chained if / else if statements:
if (condition1) {
  statement1
} else if (condition2) {
  statement2
} else if (condition3) {
  statement3
. . .
} else {
  statementN
}
Write chained if/else if statements to fulfill the following conditions:
num < 5 - return Tiny
num < 10 - return Small
num < 15 - return Medium
num < 20 - return Large
num >= 20 - return Huge

Selecting from Many Options with Switch Statements
If you have many options to choose from, use a switch statement. A switch statement tests a value and can have many case statements which define various possible values. Statements are executed from the first matched case value until a break is encountered.
Here is an example of a switch statement:
switch (lowercaseLetter) {
  case "a":
    console.log("A");
    break;
  case "b":
    console.log("B");
    break;
}
case values are tested with strict equality (===). The break tells JavaScript to stop executing statements. If the break is omitted, the next statement will be executed.
Write a switch statement which tests val and sets answer for the following conditions:
1 - alpha
2 - beta
3 - gamma
4 - delta

Adding a Default Option in Switch Statements
In a switch statement you may not be able to specify all possible values as case statements. Instead, you can add the default statement which will be executed if no matching case statements are found. Think of it like the final else statement in an if/else chain.
A default statement should be the last case.
switch (num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  default:
    defaultStatement;
    break;
}
Write a switch statement to set answer for the following conditions:
a - apple
b - bird
c - cat
default - stuff

Multiple Identical Options in Switch Statements
If the break statement is omitted from a switch statement's case, the following case statement(s) are executed until a break is encountered. If you have multiple inputs with the same output, you can represent them in a switch statement like this:
let result = "";
switch (val) {
  case 1:
  case 2:
  case 3:
    result = "1, 2, or 3";
    break;
  case 4:
    result = "4 alone";
}
Cases for 1, 2, and 3 will all produce the same result.
Write a switch statement to set answer for the following ranges:
1-3 - Low
4-6 - Mid
7-9 - High
Note: You will need to have a case statement for each number in the range.

Replacing If Else Chains with Switch
If you have many options to choose from, a switch statement can be easier to write than many chained if/else if statements. The following:
if (val === 1) {
  answer = "a";
} else if (val === 2) {
  answer = "b";
} else {
  answer = "c";
}
can be replaced with:
switch (val) {
  case 1:
    answer = "a";
    break;
  case 2:
    answer = "b";
    break;
  default:
    answer = "c";
}
Change the chained if/else if statements into a switch statement.

Control flow
    Also called flow of execution, the tools provided by a programming language to conditionally determine which set of instructions runs

* Function

A Function is a block of code that describes a repeatable process or behavior

function syntax

A function delaration is a statement that creates a new named function.
A function body is a set of instructions contained within a function.
A Parameter is a placeholder variable listed in a function declaration.
An argument is a value or other input thats passed into a called function.
The return value is the value that a function outputs, as specified by the return keyword.

The function keyword defines a function
The function identifier is the function name
  how you refer to the function later.
The function body goes inside curly brackets {}

Whenever JavaScript sees return in a function, it does the following:
+ Stops running the code in that function
+ Takes the value to the right of return
+ Swaps in the return value where the function was called

A function returns undefined by default.
A function without return keyword, returns undefined.
A function can only return one value.
returns keyword is use for function's output
the function's output is what the function sends back.
functions stop running when the see return.
function can only return one value.

Parameters are the function's inputs.
  functionDeclaration functionIdentifier(para1, para2){}
Function body

Function call runs the function; run/call/invoke the function
  functionIdentifier();
  functionIdentifier(arg1, arg2);

Arguments are the values inbetween the parentheses, when you invoke a function
  its the input to function.
  functionIdentifier(arg1, arg2);



#+begin_src js
let array = [1 , 2 , 3 , 4];
// return length of an array
function arrayLength(array){
    return array.length;
}
console.log(arrayLength(array));

// add numbers in array
function arraySum(array){
    sum = 0;
    for (let i = 0; i < array.length; i++){
        sum += array[i];
    }
    return sum;
}
console.log(arraySum(array));
#+end_src

Write Reusable JavaScript with Functions
In JavaScript, we can divide up our code into reusable parts called functions.
Here's an example of a function:
function functionName() {
  console.log("Hello World");
}
You can call or invoke this function by using its name followed by parentheses, like this: functionName(); Each time the function is called it will print out the message Hello World on the dev console. All of the code between the curly braces will be executed every time the function is called.
Create a function called reusableFunction which prints the string Hi World to the dev console.
Call the function.

Passing Values to Functions with Arguments
Parameters are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or "passed") into a function when it is called are known as arguments.
Here is a function with two parameters, param1 and param2:
function testFun(param1, param2) {
  console.log(param1, param2);
}
Then we can call testFun like this: testFun("Hello", "World");. We have passed two string arguments, Hello and World. Inside the function, param1 will equal the string Hello and param2 will equal the string World. Note that you could call testFun again with different arguments and the parameters would take on the value of the new arguments.
Create a function called functionWithArgs that accepts two arguments and outputs their sum to the dev console.
Call the function with two numbers as arguments.

Return a Value from a Function with Return
We can pass values into a function with arguments. You can use a return statement to send a value back out of a function.
Example
function plusThree(num) {
  return num + 3;
}
const answer = plusThree(5);
answer has the value 8.
plusThree takes an argument for num and returns a value equal to num + 3.
Create a function timesFive that accepts one argument, multiplies it by 5, and returns the new value.

Understanding Undefined Value returned from a Function
A function can include the return statement but it does not have to. In the case that the function doesn't have a return statement, when you call it, the function processes the inner code but the returned value is undefined.
Example
let sum = 0;
function addSum(num) {
  sum = sum + num;
}
addSum(3);
addSum is a function without a return statement. The function will change the global sum variable but the returned value of the function is undefined.
Create a function addFive without any arguments. This function adds 5 to the sum variable, but its returned value is undefined.

Assignment with a Returned Value
If you'll recall from our discussion of Storing Values with the Assignment Operator, everything to the right of the equal sign is resolved before the value is assigned. This means we can take the return value of a function and assign it to a variable.
Assume we have pre-defined a function sum which adds two numbers together, then:
ourSum = sum(5, 12);
will call the sum function, which returns a value of 17 and assigns it to the ourSum variable.
Call the processArg function with an argument of 7 and assign its return value to the variable processed.

Stand in Line
In Computer Science a queue is an abstract Data Structure where items are kept in order. New items can be added at the back of the queue and old items are taken off from the front of the queue.
Write a function nextInLine which takes an array (arr) and a number (item) as arguments.
Add the number to the end of the array, then remove the first element of the array.
The nextInLine function should then return the element that was removed.

Returning Boolean Values from Functions
You may recall from Comparison with the Equality Operator that all comparison operators return a boolean true or false value.
Sometimes people use an if/else statement to do a comparison, like this:
function isEqual(a, b) {
  if (a === b) {
    return true;
  } else {
    return false;
  }
}
But there's a better way to do this. Since === returns true or false, we can return the result of the comparison:

function isEqual(a, b) {
  return a === b;
}
Fix the function isLess to remove the if/else statements.

Return Early Pattern for Functions
When a return statement is reached, the execution of the current function stops and control returns to the calling location.
Example
function myFun() {
  console.log("Hello");
  return "World";
  console.log("byebye")
}
myFun();
The above will display the string Hello in the console, and return the string World. The string byebye will never display in the console, because the function exits at the return statement.
Modify the function abTest so that if a or b are less than 0 the function will immediately exit with a value of undefined.
Hint
Remember that undefined is a keyword, not a string.


javascript function:
  Reuse code
  Transform inputs into outputs
  Solve pieces of a problem

function nameFunc(input) {
  body;
  return output;
}

call a function, running or invoking a function
funcName();


function body
function myFavColors() {
  let color = ["blue", "black"];
  let statement = "My favorite colors are";
  for ( let i = 0; i < colors.length: i++ ) {
    if ( i ====  colors.length - 1) {
    statement += "and " + colors[i] + ".";
    } else {
      statement += colors[i] + ", ";
    }
  }
  console.log(statement);
}

Input: Parameters and arguments

function favFood(food) {
  console.log(food);
}
favFood(pizza);

multiple parameters
function funcName(para1, para2){
}
funcName("foo", "bar")

return
function add(num1, num2) {
  return num1 + num2;
}


Function scope
    The "bubble" in which a variable is accessible or visible

Helper function
A function that helps clean up code by handling a section of a larger function

// create findItems takes two args items and type return an array
function findItems(items, matchType){
  let matches = [];
  // check if items is empty
  if ( items.length === 0){
    return "Your cart does not have any items in it."
  }
  // matching items with type
  for (let i = 0; i < items.length; i++){
    if (items[i].type.includes(matchType)){
      matches.push(items[i]);
    }
  }
  // check if matches is empty
  if ( matches.length === 0){
    return "No items found of that type. Please search for a different item."
  }
  // return matches
  return matches.length == 0 ? "No items found of that type. Please search for a
different item" : matches
}

* Scope

Global Scope and Functions
In JavaScript, scope refers to the visibility of variables. Variables which are defined outside of a function block have Global scope. This means, they can be seen everywhere in your JavaScript code.
Variables which are declared without the let or const keywords are automatically created in the global scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with let or const.
Using let or const, declare a global variable named myGlobal outside of any function. Initialize it with a value of 10.
Inside function fun1, assign 5 to oopsGlobal without using the let or const keywords.

Local Scope and Functions
Variables which are declared within a function, as well as the function parameters, have local scope. That means they are only visible within that function.
Here is a function myTest with a local variable called loc.
function myTest() {
  const loc = "foo";
  console.log(loc);
}
myTest();
console.log(loc);
The myTest() function call will display the string foo in the console. The console.log(loc) line (outside of the myTest function) will throw an error, as loc is not defined outside of the function.
The editor has two console.logs to help you see what is happening. Check the console as you code to see how it changes. Declare a local variable myVar inside myLocalScope and run the tests.
Note: The console will still display ReferenceError: myVar is not defined, but this will not cause the tests to fail.

Global vs. Local Scope in Functions
It is possible to have both local and global variables with the same name. When you do this, the local variable takes precedence over the global variable.
In this example:
const someVar = "Hat";
function myFun() {
  const someVar = "Head";
  return someVar;
}
The function myFun will return the string Head because the local version of the variable is present.
Add a local variable to myOutfit function to override the value of outerWear with the string sweater.

Global scope
    The scope that contains all other scopes

variables created outside of functions are global
variables created inside of functions are local
Function parameters act like variables created inside a function
each time call function it creates a new scope.

shadowing javascript looks for a scope inside function then outside
  inside beat outside

 Summary: Scope rules
Here's a summary of the scope rules that you've learned so far:
Every variable is part of a scope.
If the variable is created outside of any function, it's stored in the global scope.
Variables in the global scope are visible everywhere.
Each time that a function is called, it creates a new scope.
If the variable is created inside a function, it gets stored inside the function's scope.
Variables in a function scope are only visible inside the function.
The function scope disappears when the function ends.
Parameters get assigned function scope, as if they were variables created inside the function.
Parameters get assigned the values from the arguments when the function is called.
Scope is pretty complicated. In this lesson, you learned some essential scope rules. But there are still more scope rules, and you'll learn those later.

* iterate

Iterate with JavaScript While Loops
You can run the same code multiple times by using a loop.
The first type of loop we will learn is called a while loop because it runs while a specified condition is true and stops once that condition is no longer true.
const ourArray = [];
let i = 0;
while (i < 5) {
  ourArray.push(i);
  i++;
}
In the code example above, the while loop will execute 5 times and append the numbers 0 through 4 to ourArray.
Let's try getting a while loop to work by pushing values to an array.
Add the numbers 5 through 0 (inclusive) in descending order to myArray using a while loop.

Iterate with JavaScript For Loops
You can run the same code multiple times by using a loop.
The most common type of JavaScript loop is called a for loop because it runs for a specific number of times.
For loops are declared with three optional expressions separated by semicolons:
for (a; b; c), where a is the initialization statement, b is the condition statement, and c is the final expression.
The initialization statement is executed one time only before the loop starts. It is typically used to define and setup your loop variable.
The condition statement is evaluated at the beginning of every loop iteration and will continue as long as it evaluates to true. When the condition is false at the start of the iteration, the loop will stop executing. This means if the condition starts as false, your loop will never execute.
The final expression is executed at the end of each loop iteration, prior to the next condition check and is usually used to increment or decrement your loop counter.
In the following example we initialize with i = 0 and iterate while our condition i < 5 is true. We'll increment i by 1 in each loop iteration with i++ as our final expression.
const ourArray = [];
for (let i = 0; i < 5; i++) {
  ourArray.push(i);
}
ourArray will now have the value [0, 1, 2, 3, 4].
Use a for loop to push the values 1 through 5 onto myArray.

Iterate Odd Numbers With a For Loop
For loops don't have to iterate one at a time. By changing our final-expression, we can count by even numbers.
We'll start at i = 0 and loop while i < 10. We'll increment i by 2 each loop with i += 2.
const ourArray = [];
for (let i = 0; i < 10; i += 2) {
  ourArray.push(i);
}
ourArray will now contain [0, 2, 4, 6, 8]. Let's change our initialization so we can count by odd numbers.
Push the odd numbers from 1 through 9 to myArray using a for loop.

Count Backwards With a For Loop
A for loop can also count backwards, so long as we can define the right conditions.
In order to decrement by two each iteration, we'll need to change our initialization, condition, and final expression.
We'll start at i = 10 and loop while i > 0. We'll decrement i by 2 each loop with i -= 2.
const ourArray = [];
for (let i = 10; i > 0; i -= 2) {
  ourArray.push(i);
}
ourArray will now contain [10, 8, 6, 4, 2]. Let's change our initialization and final expression so we can count backwards by twos to create an array of descending odd numbers.
Push the odd numbers from 9 through 1 to myArray using a for loop.

Iterate Through an Array with a For Loop
A common task in JavaScript is to iterate through the contents of an array. One way to do that is with a for loop. This code will output each element of the array arr to the console:
const arr = [10, 9, 8, 7, 6];
for (let i = 0; i < arr.length; i++) {
   console.log(arr[i]);
}
Remember that arrays have zero-based indexing, which means the last index of the array is length - 1. Our condition for this loop is i < arr.length, which stops the loop when i is equal to length. In this case the last iteration is i === 4 i.e. when i becomes equal to arr.length - 1 and outputs 6 to the console. Then i increases to 5, and the loop terminates because i < arr.length is false.
Declare and initialize a variable total to 0. Use a for loop to add the value of each element of the myArr array to total.

Nesting For Loops
If you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays. Here is an example:
const arr = [
  [1, 2], [3, 4], [5, 6]
];

for (let i = 0; i < arr.length; i++) {
  for (let j = 0; j < arr[i].length; j++) {
    console.log(arr[i][j]);
  }
}
This outputs each sub-element in arr one at a time. Note that for the inner loop, we are checking the .length of arr[i], since arr[i] is itself an array.
Modify function multiplyAll so that it returns the product of all the numbers in the sub-arrays of arr.

Iterate with JavaScript Do...While Loops
The next type of loop you will learn is called a do...while loop. It is called a do...while loop because it will first do one pass of the code inside the loop no matter what, and then continue to run the loop while the specified condition evaluates to true.
const ourArray = [];
let i = 0;

do {
  ourArray.push(i);
  i++;
} while (i < 5);
The example above behaves similar to other types of loops, and the resulting array will look like [0, 1, 2, 3, 4]. However, what makes the do...while different from other loops is how it behaves when the condition fails on the first check. Let's see this in action: Here is a regular while loop that will run the code in the loop as long as i < 5:
const ourArray = [];
let i = 5;

while (i < 5) {
  ourArray.push(i);
  i++;
}
In this example, we initialize the value of ourArray to an empty array and the value of i to 5. When we execute the while loop, the condition evaluates to false because i is not less than 5, so we do not execute the code inside the loop. The result is that ourArray will end up with no values added to it, and it will still look like [] when all of the code in the example above has completed running. Now, take a look at a do...while loop:
const ourArray = [];
let i = 5;

do {
  ourArray.push(i);
  i++;
} while (i < 5);
In this case, we initialize the value of i to 5, just like we did with the while loop. When we get to the next line, there is no condition to evaluate, so we go to the code inside the curly braces and execute it. We will add a single element to the array and then increment i before we get to the condition check. When we finally evaluate the condition i < 5 on the last line, we see that i is now 6, which fails the conditional check, so we exit the loop and are done. At the end of the above example, the value of ourArray is [5]. Essentially, a do...while loop ensures that the code inside the loop will run at least once. Let's try getting a do...while loop to work by pushing values to an array.
Change the while loop in the code to a do...while loop so the loop will push only the number 10 to myArray, and i will be equal to 11 when your code has finished running.

Replace Loops using Recursion
Recursion is the concept that a function can be expressed in terms of itself. To help understand this, start by thinking about the following task: multiply the first n elements of an array to create the product of those elements. Using a for loop, you could do this:
  function multiply(arr, n) {
    let product = 1;
    for (let i = 0; i < n; i++) {
      product *= arr[i];
    }
    return product;
  }
However, notice that multiply(arr, n) == multiply(arr, n - 1) * arr[n - 1]. That means you can rewrite multiply in terms of itself and never need to use a loop.
  function multiply(arr, n) {
    if (n <= 0) {
      return 1;
    } else {
      return multiply(arr, n - 1) * arr[n - 1];
    }
  }
The recursive version of multiply breaks down like this. In the base case, where n <= 0, it returns 1. For larger values of n, it calls itself, but with n - 1. That function call is evaluated in the same way, calling multiply again until n <= 0. At this point, all the functions can return and the original multiply returns the answer.
Note: Recursive functions must have a base case when they return without calling the function again (in this example, when n <= 0), otherwise they can never finish executing.
Write a recursive function, sum(arr, n), that returns the sum of the first n elements of an array arr.

for loop
for ( initialExpression; condition; incrementExpression) {
  loop body
}
intitalExpression let i = 1;
condition i <= 5;
incrementExpression i++;
initialExpression
This expression typically initializes the loop counter. It runs at the start of a loop. A very common example is let i = 0. The i variable is short for index, and it's frequently used for the index counter that you saw above.
condition
At the end of each loop, the condition expression is evaluated. In the example above, the condition is "if index is less than or equal to the countTo variable." If the value of the condition is true, the loop statement executes. If the value of the condition is false, the loop statement terminates. In the example above, index would eventually get to 6. At that point, because the value would be greater than 5, the loop would stop.
incrementExpression
At the end of each loop, this statement is executed. In the example above, the code is incrementing the variable index by 1 (++) each time through the loop. But it's important to note that you're not limited to incrementing by 1 for the final condition. Depending on what you're building or the problem you're solving, you can decrement (i--) by some amount, or you could increment by another amount, like 2 (index += 2). That said, incrementing by 1 is the most common technique.
loop body
If the condition is true, this code will run. In the example above, the loop body that executes uses console.log() to display the value of index during the loop.

i stand for index number

increment and decrement operators
i++, i--
i+=2, i-=2

make for loop over an array
for ( let i = 0; i < arr.length; i++ ) {
  console.log( arr[i] );

}

for () {
  var += arr[i]
}

for () {
  if () {
  }
  if () {
  }
}


Accumulator pattern
Pseudocoding
The process of writing the steps and logic that you would implement in code, but in normal language rather than in commands that a programming language could execute
Accumulator pattern
A chunk of code that uses a loop to accumulate data

let sum = 0; // accumulator
for () {
  sum += i;
}


Loop
    A construct that allows you to repeat a set of instructions a specific number of times, or until a specific condition is true

* Math.

Generate Random Fractions with JavaScript
Random numbers are useful for creating random behavior.
JavaScript has a Math.random() function that generates a random decimal number between 0 (inclusive) and 1 (exclusive). Thus Math.random() can return a 0 but never return a 1.
Note: Like Storing Values with the Assignment Operator, all function calls will be resolved before the return executes, so we can return the value of the Math.random() function.
Change randomFraction to return a random number instead of returning 0.

Generate Random Whole Numbers with JavaScript
It's great that we can generate random decimal numbers, but it's even more useful if we use it to generate random whole numbers.
Use Math.random() to generate a random decimal.
Multiply that random decimal by 20.
Use another function, Math.floor() to round the number down to its nearest whole number.
Remember that Math.random() can never quite return a 1 and, because we're rounding down, it's impossible to actually get 20. This technique will give us a whole number between 0 and 19.
Putting everything together, this is what our code looks like:
Math.floor(Math.random() * 20);
We are calling Math.random(), multiplying the result by 20, then passing the value to Math.floor() function to round the value down to the nearest whole number.
Use this technique to generate and return a random whole number between 0 and 9.

Generate Random Whole Numbers within a Range
Instead of generating a random whole number between zero and a given number like we did before, we can generate a random whole number that falls within a range of two specific numbers.
To do this, we'll define a minimum number min and a maximum number max.
Here's the formula we'll use. Take a moment to read it and try to understand what this code is doing:
Math.floor(Math.random() * (max - min + 1)) + min
Create a function called randomRange that takes a range myMin and myMax and returns a random whole number that's greater than or equal to myMin, and is less than or equal to myMax, inclusive.

* resources

** finish

freeCodeCamp Basic JavaScript
  i didn't understand recursion without loop

* html dom

get the element iwth the specified id:
document.getElementById(elementID)
document.getElementById("demo")

The example below "finds" an HTML element (with id="demo"), and changes the element content (innerHTML) to "Hello JavaScript":


JavaScript Can Change HTML Styles (CSS)
Changing the style of an HTML element, is a variant of changing an HTML attribute:
Example
document.getElementById("demo").style.fontSize = "35px";

JavaScript Can Hide HTML Elements
Hiding HTML elements can be done by changing the display style:
Example
document.getElementById("demo").style.display = "none";


#+begin_src js
// js get the element with the specified id:demo
document.getElementById("demo");
// js using id:demo and change html content: Hello
document.getElementById("demo").innerHTML = "Hello";
// js using id:demo and change html styles font size to 35px
document.getElementById("demo").style.fontSize = "35px";
// js using id:demo and change html styles: display to none
document.getElementById("demo").style.display = "none";
#+end_src

* unsorted

REPL stand for Read-eval-print loop
  an interactive computer programming environment that lets you perform basic tasks

Order of operations
Also called operator precedence, a collection of rules that govern the order in which operators are evaluated
  Parentheses
  Exponents
  Multiplication
  Division
  Addition
  Subtraction

Truthy values
Values that an if statement will treat as true
!! turns anything to a boolean
Falsy values
Values that an if statement will treat as false
  // Values that evaluate to `false`
  false; // `false` itself
  ""; // Empty string
  0; // Zero
  null;
  undefined;
  NaN; // Not a number


Tracing
    The process of following values through a program

conditional statements
    An if statement checks a condition and will execute a task if that condition evaluates to true.
    if...else statements make binary decisions and execute different code blocks based on a provided condition.
    We can add more conditions using else if statements.
    Comparison operators, including <, >, <=, >=, ===, and !== can compare two values.
    The logical and operator, &&, or “and”, checks if both provided expressions are truthy.
    The logical operator ||, or “or”, checks if either provided expression is truthy.
    The bang operator, !, switches the truthiness and falsiness of a value.
    The ternary operator is shorthand to simplify concise if...else statements.
    A switch statement can be used to simplify the process of writing multiple else if statements. The break keyword stops the remaining cases from being checked and executed in a switch statement.

** JavaScript Where To

The <script> Tag

In HTML, JavaScript code is inserted between <script> and </script> tags.
Example
<script>
document.getElementById("demo").innerHTML = "My First JavaScript";
</script>

Old JavaScript examples may use a type attribute: <script type="text/javascript">.
The type attribute is not required. JavaScript is the default scripting language in HTML.
JavaScript Functions and Events

A JavaScript function is a block of JavaScript code, that can be executed when "called" for.

For example, a function can be called when an event occurs, like when the user clicks a button.

You will learn much more about functions and events in later chapters.
JavaScript in <head> or <body>

You can place any number of scripts in an HTML document.

Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.
JavaScript in <head>

In this example, a JavaScript function is placed in the <head> section of an HTML page.

The function is invoked (called) when a button is clicked:
Example
<!DOCTYPE html>
<html>
<head>
<script>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>
</head>
<body>

<h2>Demo JavaScript in Head</h2>

<p id="demo">A Paragraph</p>
<button type="button" onclick="myFunction()">Try it</button>

</body>
</html>
JavaScript in <body>

In this example, a JavaScript function is placed in the <body> section of an HTML page.

The function is invoked (called) when a button is clicked:
Example
<!DOCTYPE html>
<html>
<body>

<h2>Demo JavaScript in Body</h2>

<p id="demo">A Paragraph</p>

<button type="button" onclick="myFunction()">Try it</button>

<script>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>

</body>
</html>

Placing scripts at the bottom of the <body> element improves the display speed, because script interpretation slows down the display.
External JavaScript

Scripts can also be placed in external files:
External file: myScript.js
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}

External scripts are practical when the same code is used in many different web pages.

JavaScript files have the file extension .js.

To use an external script, put the name of the script file in the src (source) attribute of a <script> tag:
Example
<script src="myScript.js"></script>

You can place an external script reference in <head> or <body> as you like.

The script will behave as if it was located exactly where the <script> tag is located.

External scripts cannot contain <script> tags.
External JavaScript Advantages

Placing scripts in external files has some advantages:

    It separates HTML and code
    It makes HTML and JavaScript easier to read and maintain
    Cached JavaScript files can speed up page loads

To add several script files to one page  - use several script tags:
Example
<script src="myScript1.js"></script>
<script src="myScript2.js"></script>
External References

An external script can be referenced in 3 different ways:

    With a full URL (a full web address)
    With a file path (like /js/)
    Without any path

This example uses a full URL to link to myScript.js:
Example
<script src="https://www.w3schools.com/js/myScript.js"></script>

This example uses a file path to link to myScript.js:
Example
<script src="/js/myScript.js"></script>

This example uses no path to link to myScript.js:
Example
<script src="myScript.js"></script>

** JavaScript Output
JavaScript Display Possibilities

JavaScript can "display" data in different ways:

    Writing into an HTML element, using innerHTML.
    Writing into the HTML output using document.write().
    Writing into an alert box, using window.alert().
    Writing into the browser console, using console.log().

Using innerHTML

To access an HTML element, JavaScript can use the document.getElementById(id) method.

The id attribute defines the HTML element. The innerHTML property defines the HTML content:
Example
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My First Paragraph</p>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = 5 + 6;
</script>

</body>
</html>

Changing the innerHTML property of an HTML element is a common way to display data in HTML.
Using document.write()

For testing purposes, it is convenient to use document.write():
Example
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My first paragraph.</p>

<script>
document.write(5 + 6);
</script>

</body>
</html>

Using document.write() after an HTML document is loaded, will delete all existing HTML:
Example
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My first paragraph.</p>

<button type="button" onclick="document.write(5 + 6)">Try it</button>

</body>
</html>

The document.write() method should only be used for testing.
Using window.alert()

You can use an alert box to display data:
Example
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My first paragraph.</p>

<script>
window.alert(5 + 6);
</script>

</body>
</html>

You can skip the window keyword.

In JavaScript, the window object is the global scope object, that means that variables, properties, and methods by default belong to the window object. This also means that specifying the window keyword is optional:
Example
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My first paragraph.</p>

<script>
alert(5 + 6);
</script>

</body>
</html>
Using console.log()

For debugging purposes, you can call the console.log() method in the browser to display data.

You will learn more about debugging in a later chapter.
Example
<!DOCTYPE html>
<html>
<body>

<script>
console.log(5 + 6);
</script>

</body>
</html>
JavaScript Print

JavaScript does not have any print object or print methods.

You cannot access output devices from JavaScript.

The only exception is that you can call the window.print() method in the browser to print the content of the current window.
Example
<!DOCTYPE html>
<html>
<body>

<button onclick="window.print()">Print this page</button>

</body>
</html>

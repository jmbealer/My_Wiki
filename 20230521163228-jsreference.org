:PROPERTIES:
:ID:       38d44122-73b2-4ad3-97c4-6c45523a7fa8
:mtime:    20230521163231
:ctime:    20230521163228
:END:
#+title: JavaScript Reference

Properties and Methods of all JavaScript Objects, with Examples:

* Array

The Array object is used to store multiple values in a single variable

JavaScript Array Methods and Properties

Name : Description

at() : Returns an indexed element of an array
concat() : Joins arrays and returns an array with the joined arrays
constructor : Returns the function that created the Array object's prototype
copyWithin() : Copies array elements within the array, to and from specified positions
entries() : Returns a key/value pair Array Iteration Object
every() : Checks if every element in an array pass a test
fill() : Fill the elements in an array with a static value
filter() : Creates a new array with every element in an array that pass a test
find() : Returns the value of the first element in an array that pass a test
findIndex() : Returns the index of the first element in an array that pass a test
flat() : Concatenates sub-array elements
flatMap() : Maps all array elements and creates a new flat array
forEach() : Calls a function for each array element
from() : Creates an array from an object
includes() : Check if an array contains the specified element
indexOf() : Search the array for an element and returns its position
isArray() : Checks whether an object is an array
join() : Joins all elements of an array into a string
keys() : Returns a Array Iteration Object, containing the keys of the original array
lastIndexOf() : Search the array for an element, starting at the end, and returns its position
length : Sets or returns the number of elements in an array
map() : Creates a new array with the result of calling a function for each array element
pop() : Removes the last element of an array, and returns that element
prototype : Allows you to add properties and methods to an Array object
push() : Adds new elements to the end of an array, and returns the new length
reduce() : Reduce the values of an array to a single value (going left-to-right)
reduceRight() : Reduce the values of an array to a single value (going right-to-left)
reverse() : Reverses the order of the elements in an array
shift() : Removes the first element of an array, and returns that element
slice() : Selects a part of an array, and returns the new array
some() : Checks if any of the elements in an array pass a test
sort() : Sorts the elements of an array
splice() : Adds/Removes elements from an array
toString() : Converts an array to a string, and returns the result
unshift() : Adds new elements to the beginning of an array, and returns the new length
valueOf() : Returns the primitive value of an array

* String

A JavaScript string stores a series of characters like "John Doe".

A string can be any text inside double or single quotes:
let carName1 = "Volvo XC60";
let carName2 = 'Volvo XC60';

String indexes are zero-based:

The first character is in position 0, the second in 1, and so on.

String Properties and Methods

Normally, strings like "John Doe", cannot have methods or properties because they are not objects.

But with JavaScript, methods and properties are also available to strings, because JavaScript treats strings as objects when executing methods and properties.

JavaScript String Methods

Name : Description

** charAt()

Returns the character at a specified index (position) in a string.

syntax:
string.charAt(index)

parameters:
index optional this index (position) of the character default = 0.

return value
string if out range return empty string

#+begin_src js
let text = "hello world";

// Get the first character in a string:
let firstLetter = text.charAt(0);
console.log(firstLetter);

// Get the second character in a string:
let secondLetter = text.charAt(1);
console.log(secondLetter);

// Get the last character in a string:
let lastLetter = text.charAt(text.length-1);
console.log(lastLetter);
#+end_src

#+RESULTS:
: h
: e
: 11
: 10
: d
: undefined

** charCodeAt()

Returns the Unicode of the character at a specified index (position) in a string.

charCodeAt() is UTF-16
charCodeAt() return a number between 0 and 65535.

parameters index optional. A number. The index (position) of a character.
Default value equals 0.

return value a number. NaN if the index is invaild.

#+begin_src js
let text = "hello world";

// Get the first character in a string:
let firstCode = text.charCodeAt(0);
console.log(firstCode);

// Get the second character in a string:
let secondCode = text.charCodeAt(1);
console.log(secondCode);

// Get the last character in a string:
let lastLetter = text.charCodeAt(text.length-1);
console.log(lastLetter);
#+end_src

#+RESULTS:
: 104
: 101
: 100
: undefined

** concat()

Returns two or more joined strings.
does not change the existing strings.
returns a new string.

syntax
string.concat(string1, string2, ..., stringN)

parameters stringN required the strings to be joined

return value a string; a new string constaining the combined strings.

#+begin_src js
let text1 = "sea";
let text2 = "food";
// Join two strings
let result = text1.concat(text2);
console.log(result);

// Join two strings with space inbetween
result = text1.concat(" ", text2);
console.log(result);

result = text1.concat(" ", text2, " ", "testing");
console.log(result);

#+end_src

#+RESULTS:
: seafood
: sea food
: sea food testing
: undefined

** constructor : Returns the string's constructor function
** endsWith() : Returns if a string ends with a specified value
** fromCharCode() : Returns Unicode values as characters
** includes() : Returns if a string contains a specified value
** indexOf() : Returns the index (position) of the first occurrence of a value in a string
** lastIndexOf() : Returns the index (position) of the last occurrence of a value in a string
** length : Returns the length of a string
** localeCompare() : Compares two strings in the current locale
** match() : Searches a string for a value, or a regular expression, and returns the matches
** prototype : Allows you to add properties and methods to an object
** repeat() : Returns a new string with a number of copies of a string
** replace() : Searches a string for a value, or a regular expression, and returns a string where the values are replaced
** search() : Searches a string for a value, or regular expression, and returns the index (position) of the match
** slice() : Extracts a part of a string and returns a new string
** split() : Splits a string into an array of substrings
** startsWith() : Checks whether a string begins with specified characters
** substr() : Extracts a number of characters from a string, from a start index (position)
** substring() : Extracts characters from a string, between two specified indices (positions)
** toLocaleLowerCase() : Returns a string converted to lowercase letters, using the host's locale
** toLocaleUpperCase() : Returns a string converted to uppercase letters, using the host's locale
** toLowerCase() : Returns a string converted to lowercase letters
** toString() : Returns a string or a string object as a string
** toUpperCase() : Returns a string converted to uppercase letters
** trim() : Returns a string with removed whitespaces
** trimEnd() : Returns a string with removed whitespaces from the end
** trimStart() : Returns a string with removed whitespaces from the start
** valueOf() : Returns the primitive value of a string or a string object

Note

All string methods return a new value.

They do not change the original variable.
String HTML Wrapper Methods

HTML wrapper methods return a string wrapped inside an HTML tag.

These are not standard methods, and may not work as expected.
Method : Description
anchor() : Displays a string as an anchor
big() : Displays a string using a big font
blink() : Displays a blinking string
bold() : Displays a string in bold
fixed() : Displays a string using a fixed-pitch font
fontcolor() : Displays a string using a specified color
fontsize() : Displays a string using a specified size
italics() : Displays a string in italic
link() : Displays a string as a hyperlink
small() : Displays a string using a small font
strike() : Displays a string with a strikethrough
sub() : Displays a string as subscript text
sup() : Displays a string as superscript text

* Number
* Math
* Date
* Global
* RegExp
* Object
* Classes
* Error
* Boolean
* Operators
* Statements
* JSON
* Typed Array
* Precedence

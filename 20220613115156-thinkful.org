:PROPERTIES:
:ID:       c4ffc59c-65b7-4f0e-b749-bcd46ef75fb0
:END:
#+title: thinkful
#+date: [2022-06-13 Mon 11:51]

REPL
    Read–eval–print loop, an interactive computer programming environment that lets you perform basic tasks
Operator
    A symbol that performs an operation on one or more variables and values
Mathematical operator
    An operator that performs an arithmetic calculation with one or more operands
Assignment operator
    An operator that assigns specific values in code

Variable
A named container that can store a changeable data value
Function
A block of code that describes a repeatable process or behavior

const is used for constants, which are variables that can't be re-declared or updated.
camelCasing

Data type
The type of value that a variable can have, such as string, number, or boolean
  String
  Number
  Boolean
  Null
    The null data type is used to indicate that a variable has no value. Sometimes, null is used as the default value when other data isn't available.
  Undefined
    The undefined data type is a special value that, in a way, means exactly that—that a variable was never defined. Like null, undefined means empty. But null and undefined have a slightly different understanding of emptiness.
    A null value means that the developer decided that the value was empty. It was a deliberate choice. An undefined value, on the other hand, means that the value was left empty, simply because nothing was ever assigned to it.
    That means that you shouldn't assign a variable undefined, like in this command: let variable = undefined.
String
A sequence of letters, numerals, punctuation marks, or other characters, treated as text
Integer
Also called an int, a whole number that isn't written as a fraction or with a decimal point
Floating-point number
Also called a float, a number that includes a decimal point
Boolean
A binary variable with two possible values: true and false
  Pronounced not or bang, ! inverts a boolean value. This means that !false turns into true, and !true turns into false.
Coercion
The process of converting a value from one data type to another
  Number()
  parseInt()
  parseFloat()
  toString()

Manipulate text
Concatenation
The process of joining different values or pieces of text together
Method
A function that is attached to an object as one of the object's attributes
"str".length;
"STR".toLowerCase();
"str".replace("str", "Str");
toLowerCase(): This returns a string with all the letters lowercase.
toUpperCase(): This returns a string with all the letters capitalized.
trim(): This removes whitespace (spaces, tabs, and so forth) at the beginning and end of a string.
replace(): This replaces part of a string with another string
  replace(matchingString, newString)

Control flow
Also called flow of execution, the tools provided by a programming language to conditionally determine which set of instructions runs
Conditional statement
A statement that tells the code to perform different tasks based on different kinds of information
  if blocks
    if (condition) {
      statement
    }
  else blocks
    if (condition) {
      statement1
    } else {
      statement2
    }
  else if blocks
  if (condition) {
    statement1
  } else if {
    statement2
  } else {
    statement3
  }
Order of operations
Also called operator precedence, a collection of rules that govern the order in which operators are evaluated
  Parentheses
  Exponents
  Multiplication
  Division
  Addition
  Subtraction
Truthy values
Values that an if statement will treat as true
!! turns anything to a boolean
Falsy values
Values that an if statement will treat as false
  // Values that evaluate to `false`
  false; // `false` itself
  ""; // Empty string
  0; // Zero
  null;
  undefined;
  NaN; // Not a number
Logical operators
Operators that test whether a given condition is met
  and &&, or ||, not !
  && evaluates to true if the values on both sides are true.
  || evaluates to true if either one of the values is true.
  ! works on just one value, and gives the opposite of a value. Therefore, !true evaluates to false, and !false evaluates to true.
  short-circuiting
    && (and) returns the first falsy value, or the last value if no values are falsy.
    || (or) returns the first truthy value, or the last value if no values are truthy.
Comparison operators
Mathematical symbols that compare two values
  strict equality =====
  loose equality ====
  relational operators
  greater than >
  less than <
  greater than >=
  less than <=
  not equal !==

JavaScript array
A collection of ordered items
  [] empty array
  arr[0]; call first array items
  arr[0] = "foo";
Mutation
A change in the original data value
push(): This adds an item to the end of an array. It returns the new length of the array.
pop(): This removes the last item from the end of an array. It returns the last item.
length: Just like the string tool length, this gives the length of the array—in other words, the number of items. You'll notice that length doesn't need parentheses. That's because it's technically a property and not a method.

for loop
for ( initialExpression; condition; incrementExpression) {
  loop body
}
intitalExpression let i = 1;
condition i <= 5;
incrementExpression i++;
initialExpression
This expression typically initializes the loop counter. It runs at the start of a loop. A very common example is let i = 0. The i variable is short for index, and it's frequently used for the index counter that you saw above.
condition
At the end of each loop, the condition expression is evaluated. In the example above, the condition is "if index is less than or equal to the countTo variable." If the value of the condition is true, the loop statement executes. If the value of the condition is false, the loop statement terminates. In the example above, index would eventually get to 6. At that point, because the value would be greater than 5, the loop would stop.
incrementExpression
At the end of each loop, this statement is executed. In the example above, the code is incrementing the variable index by 1 (++) each time through the loop. But it's important to note that you're not limited to incrementing by 1 for the final condition. Depending on what you're building or the problem you're solving, you can decrement (i--) by some amount, or you could increment by another amount, like 2 (index += 2). That said, incrementing by 1 is the most common technique.
loop body
If the condition is true, this code will run. In the example above, the loop body that executes uses console.log() to display the value of index during the loop.

i stand for index number

increment and decrement operators
i++, i--
i+=2, i-=2

make for loop over an array
for ( let i = 0; i < arr.length; i++ ) {
  console.log( arr[i] );

}

for () {
  var += arr[i]
}

for () {
  if () {
  }
  if () {
  }
}

JavaScript object
A collection of values and their associated keys

An object is a type of collection that holds information, just like an array.
An object makes it possible to store data using key-value pairs, as a dictionary does.

empty object {};
key-value pairs key: value

{
key1: val2,
...
key3: ["foo", "bar"],
};

dot notation
objName.key

arr = [
  { key0: "val0", key1: "val1"}
]
arr[0].key1

adding key-value pairs
objName.newKey = "newValue";
updating key-value pairs
objName.oldKey = "newValue";

bracket notation
objName[key]
sometimes need to use bracket notation when the key that you wish to access is a string with a space in it.
obj["str"]

adding key-value pairs
objName["newKey"] = "newValue";
updating key-value pairs
objName["oldKey"] = "newValue";

bracket variables
let var = "oldKey";
obj[var]; // oldValue

objects loop

nested objects

var = {
  key0: {
  "nestedKey": {
    foo: 111
  }
  }
}
var.key0.nestedKey.foo
var["key0"]["nestedKey"].foo
var.key0.nestedKey["foo"] = 222;

Accumulator pattern
Pseudocoding
The process of writing the steps and logic that you would implement in code, but in normal language rather than in commands that a programming language could execute
Accumulator pattern
A chunk of code that uses a loop to accumulate data

let sum = 0; // accumulator
for () {
  sum += i;
}

javascript function

Reuse code
Transform inputs into outputs
Solve pieces of a problem

function nameFunc(input) {
  body;
  return output;
}

call a function, running or invoking a function
funcName();

function syntax

Function declaration
A statement that creates a new named function
Function body
The set of instructions contained within a function
Parameter
A placeholder variable listed in a function declaration
Argument
A value or other input that is passed into a function
Return value
The value that a function outputs, as specified by the return keyword

The function keyword
Before creating the function, you need to give JavaScript a heads-up. Just like you define variables by using the keyword let, you define functions by using the keyword function.
Identifier
You give the function a name. This is how you'll refer to the function later. In this case, the name is bakeCake.
Function body
The body of the function goes inside curly brackets {}. This is a list of instructions; it's what the function will do.

function body
function myFavColors() {
  let color = ["blue", "black"];
  let statement = "My favorite colors are";
  for ( let i = 0; i < colors.length: i++ ) {
    if ( i ====  colors.length - 1) {
    statement += "and " + colors[i] + ".";
    } else {
      statement += colors[i] + ", ";
    }
  }
  console.log(statement);
}

Input: Parameters and arguments

function favFood(food) {
  console.log(food);
}
favFood(pizza);

multiple parameters
function funcName(para1, para2){
}
funcName("foo", "bar")

return
function add(num1, num2) {
  return num1 + num2;
}

Whenever JavaScript sees return in a function, it does the following:
Stops running the code in that function
Takes the value to the right of return
Swaps in the return value where the function was called

function without return, return undefined.
function can only return one value

The function keyword
Before creating the function, you need to give JavaScript a heads-up. Just like you define variables by using the keyword let, you define functions by using the keyword function.
Identifier
You give the function a name. This is how you'll refer to the function later.
Parameters
You put the names of any parameters in between parentheses. If there are no parameters, leave the parentheses empty, like (). This is the function's input.
Function body
You use the return keyword for the function's output. Remember, the function's output is what the function sends back. Keep the following in mind: Functions stop running when they see return. Functions can only return one value. If they don't use return, then by default, they return undefined.
Function call
You run the function using the name and parentheses, like bakeCake(). You can say that you run, call, or invoke the function.
Arguments
When you invoke a function, you pass in values between the parentheses, like favoriteFood("pizza"). In this case, "pizza" is the argument; in other words, it's the input to the function.

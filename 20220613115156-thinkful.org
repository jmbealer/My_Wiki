:PROPERTIES:
:ID:       c4ffc59c-65b7-4f0e-b749-bcd46ef75fb0
:END:
#+title: thinkful
#+date: [2022-06-13 Mon 11:51]

REPL
    Read–eval–print loop, an interactive computer programming environment that lets you perform basic tasks
Operator
    A symbol that performs an operation on one or more variables and values
Mathematical operator
    An operator that performs an arithmetic calculation with one or more operands
Assignment operator
    An operator that assigns specific values in code

Variable
A named container that can store a changeable data value
Function
A block of code that describes a repeatable process or behavior

const is used for constants, which are variables that can't be re-declared or updated.
camelCasing

Data type
The type of value that a variable can have, such as string, number, or boolean
  String
  Number
  Boolean
  Null
    The null data type is used to indicate that a variable has no value. Sometimes, null is used as the default value when other data isn't available.
  Undefined
    The undefined data type is a special value that, in a way, means exactly that—that a variable was never defined. Like null, undefined means empty. But null and undefined have a slightly different understanding of emptiness.
    A null value means that the developer decided that the value was empty. It was a deliberate choice. An undefined value, on the other hand, means that the value was left empty, simply because nothing was ever assigned to it.
    That means that you shouldn't assign a variable undefined, like in this command: let variable = undefined.
String
A sequence of letters, numerals, punctuation marks, or other characters, treated as text
Integer
Also called an int, a whole number that isn't written as a fraction or with a decimal point
Floating-point number
Also called a float, a number that includes a decimal point
Boolean
A binary variable with two possible values: true and false
  Pronounced not or bang, ! inverts a boolean value. This means that !false turns into true, and !true turns into false.
Coercion
The process of converting a value from one data type to another
  Number()
  parseInt()
  parseFloat()
  toString()

Manipulate text
Concatenation
The process of joining different values or pieces of text together
Method
A function that is attached to an object as one of the object's attributes
"str".length;
"STR".toLowerCase();
"str".replace("str", "Str");
toLowerCase(): This returns a string with all the letters lowercase.
toUpperCase(): This returns a string with all the letters capitalized.
trim(): This removes whitespace (spaces, tabs, and so forth) at the beginning and end of a string.
replace(): This replaces part of a string with another string
  replace(matchingString, newString)

Control flow
Also called flow of execution, the tools provided by a programming language to conditionally determine which set of instructions runs
Conditional statement
A statement that tells the code to perform different tasks based on different kinds of information
  if blocks
    if (condition) {
      statement
    }
  else blocks
    if (condition) {
      statement1
    } else {
      statement2
    }
  else if blocks
  if (condition) {
    statement1
  } else if {
    statement2
  } else {
    statement3
  }
Order of operations
Also called operator precedence, a collection of rules that govern the order in which operators are evaluated
  Parentheses
  Exponents
  Multiplication
  Division
  Addition
  Subtraction
Truthy values
Values that an if statement will treat as true
!! turns anything to a boolean
Falsy values
Values that an if statement will treat as false
  // Values that evaluate to `false`
  false; // `false` itself
  ""; // Empty string
  0; // Zero
  null;
  undefined;
  NaN; // Not a number
Logical operators
Operators that test whether a given condition is met
  and &&, or ||, not !
  && evaluates to true if the values on both sides are true.
  || evaluates to true if either one of the values is true.
  ! works on just one value, and gives the opposite of a value. Therefore, !true evaluates to false, and !false evaluates to true.
  short-circuiting
    && (and) returns the first falsy value, or the last value if no values are falsy.
    || (or) returns the first truthy value, or the last value if no values are truthy.
Comparison operators
Mathematical symbols that compare two values
  strict equality =====
  loose equality ====
  relational operators
  greater than >
  less than <
  greater than >=
  less than <=
  not equal !==

JavaScript array
A collection of ordered items
  [] empty array
  arr[0]; call first array items
  arr[0] = "foo";
Mutation
A change in the original data value
push(): This adds an item to the end of an array. It returns the new length of the array.
pop(): This removes the last item from the end of an array. It returns the last item.
length: Just like the string tool length, this gives the length of the array—in other words, the number of items. You'll notice that length doesn't need parentheses. That's because it's technically a property and not a method.

for loop
for ( initialExpression; condition; incrementExpression) {
  loop body
}
intitalExpression let i = 1;
condition i <= 5;
incrementExpression i++;
initialExpression
This expression typically initializes the loop counter. It runs at the start of a loop. A very common example is let i = 0. The i variable is short for index, and it's frequently used for the index counter that you saw above.
condition
At the end of each loop, the condition expression is evaluated. In the example above, the condition is "if index is less than or equal to the countTo variable." If the value of the condition is true, the loop statement executes. If the value of the condition is false, the loop statement terminates. In the example above, index would eventually get to 6. At that point, because the value would be greater than 5, the loop would stop.
incrementExpression
At the end of each loop, this statement is executed. In the example above, the code is incrementing the variable index by 1 (++) each time through the loop. But it's important to note that you're not limited to incrementing by 1 for the final condition. Depending on what you're building or the problem you're solving, you can decrement (i--) by some amount, or you could increment by another amount, like 2 (index += 2). That said, incrementing by 1 is the most common technique.
loop body
If the condition is true, this code will run. In the example above, the loop body that executes uses console.log() to display the value of index during the loop.

i stand for index number

increment and decrement operators
i++, i--
i+=2, i-=2

make for loop over an array
for ( let i = 0; i < arr.length; i++ ) {
  console.log( arr[i] );

}

for () {
  var += arr[i]
}

for () {
  if () {
  }
  if () {
  }
}

JavaScript object
A collection of values and their associated keys

An object is a type of collection that holds information, just like an array.
An object makes it possible to store data using key-value pairs, as a dictionary does.

empty object {};
key-value pairs key: value

{
key1: val2,
...
key3: ["foo", "bar"],
};

dot notation
objName.key

arr = [
  { key0: "val0", key1: "val1"}
]
arr[0].key1

adding key-value pairs
objName.newKey = "newValue";
updating key-value pairs
objName.oldKey = "newValue";

bracket notation
objName[key]
sometimes need to use bracket notation when the key that you wish to access is a string with a space in it.
obj["str"]

adding key-value pairs
objName["newKey"] = "newValue";
updating key-value pairs
objName["oldKey"] = "newValue";

bracket variables
let var = "oldKey";
obj[var]; // oldValue

objects loop

nested objects

var = {
  key0: {
  "nestedKey": {
    foo: 111
  }
  }
}
var.key0.nestedKey.foo
var["key0"]["nestedKey"].foo
var.key0.nestedKey["foo"] = 222;

Accumulator pattern
Pseudocoding
The process of writing the steps and logic that you would implement in code, but in normal language rather than in commands that a programming language could execute
Accumulator pattern
A chunk of code that uses a loop to accumulate data

let sum = 0; // accumulator
for () {
  sum += i;
}

javascript function

Reuse code
Transform inputs into outputs
Solve pieces of a problem

function nameFunc(input) {
  body;
  return output;
}

call a function, running or invoking a function
funcName();

function syntax

Function declaration
A statement that creates a new named function
Function body
The set of instructions contained within a function
Parameter
A placeholder variable listed in a function declaration
Argument
A value or other input that is passed into a function
Return value
The value that a function outputs, as specified by the return keyword

The function keyword
Before creating the function, you need to give JavaScript a heads-up. Just like you define variables by using the keyword let, you define functions by using the keyword function.
Identifier
You give the function a name. This is how you'll refer to the function later. In this case, the name is bakeCake.
Function body
The body of the function goes inside curly brackets {}. This is a list of instructions; it's what the function will do.

function body
function myFavColors() {
  let color = ["blue", "black"];
  let statement = "My favorite colors are";
  for ( let i = 0; i < colors.length: i++ ) {
    if ( i ====  colors.length - 1) {
    statement += "and " + colors[i] + ".";
    } else {
      statement += colors[i] + ", ";
    }
  }
  console.log(statement);
}

Input: Parameters and arguments

function favFood(food) {
  console.log(food);
}
favFood(pizza);

multiple parameters
function funcName(para1, para2){
}
funcName("foo", "bar")

return
function add(num1, num2) {
  return num1 + num2;
}

Whenever JavaScript sees return in a function, it does the following:
Stops running the code in that function
Takes the value to the right of return
Swaps in the return value where the function was called

function without return, return undefined.
function can only return one value

The function keyword
Before creating the function, you need to give JavaScript a heads-up. Just like you define variables by using the keyword let, you define functions by using the keyword function.
Identifier
You give the function a name. This is how you'll refer to the function later.
Parameters
You put the names of any parameters in between parentheses. If there are no parameters, leave the parentheses empty, like (). This is the function's input.
Function body
You use the return keyword for the function's output. Remember, the function's output is what the function sends back. Keep the following in mind: Functions stop running when they see return. Functions can only return one value. If they don't use return, then by default, they return undefined.
Function call
You run the function using the name and parentheses, like bakeCake(). You can say that you run, call, or invoke the function.
Arguments
When you invoke a function, you pass in values between the parentheses, like favoriteFood("pizza"). In this case, "pizza" is the argument; in other words, it's the input to the function.

Function scope
    The "bubble" in which a variable is accessible or visible
Tracing
    The process of following values through a program
Control flow
    Also called flow of execution, the tools provided by a programming language to conditionally determine which set of instructions runs
Loop
    A construct that allows you to repeat a set of instructions a specific number of times, or until a specific condition is true
Global scope
    The scope that contains all other scopes

variables created outside of functions are global
variables created inside of functions are local
Function parameters act like variables created inside a function
each time call function it creates a new scope.

shadowing javascript looks for a scope inside function then outside
  inside beat outside

 Summary: Scope rules
Here's a summary of the scope rules that you've learned so far:
Every variable is part of a scope.
If the variable is created outside of any function, it's stored in the global scope.
Variables in the global scope are visible everywhere.
Each time that a function is called, it creates a new scope.
If the variable is created inside a function, it gets stored inside the function's scope.
Variables in a function scope are only visible inside the function.
The function scope disappears when the function ends.
Parameters get assigned function scope, as if they were variables created inside the function.
Parameters get assigned the values from the arguments when the function is called.
Scope is pretty complicated. In this lesson, you learned some essential scope rules. But there are still more scope rules, and you'll learn those later.

Helper function
A function that helps clean up code by handling a section of a larger function



* html and css

Hypertext Markup Language
HTML, a straightforward programming language that is used to create the structure of a web page
Hypertext
Digital text that references other locations
Markup language
A class of computer languages that involve annotating documents in a way that is used to format the text syntactically but isn't visible to users
Cascading Style Sheets
A programming language designed to supplement HTML by adding formatting, design, and style details to web pages
Style sheet language
A class of computer languages that express and explain how a markup language or other structured document content should get presented
Content delivery network
Also known as a CDN, a network of servers that helps web page content to load more quickly
index.html: All your HTML code will be written here.
style.css: All your CSS code will be written here.
script.js: All your JavaScript code will be written here

** HTML

As a foundational component of a website's display, HTML is a great language for adding these elements to a web page:

Text: Words and written content
Media: Images, videos, and other visual or auditory elements
Links: Clickable paths to other places, like other websites
Containers: Elements that are used to give web pages structure for layout purposes

*** html basics

HTML element
A component of an HTML document
HTML tag
Keywords that define how content in an HTML document appears on a web page
There are 16 elements that are self-closing, meaning they only require a single tag.
The syntax of a self-closing tag is as follows: <element attributes />.
HTML paragraph
A block of content, such as text, that is represented by a <p> element
HTML heading
A title or subtitle used to break up, organize, and highlight content on a web page
HTML attribute
An extra bit of information that is tied with certain elements and is written inside an opening tag
  attributes are always written inside the opening tag
  attribute="value"
Alternative text
Also called alt text, an image description that can be added as an image attribute in an HTML document

** CSS

Notably, CSS can add many elements to HTML, such as those listed below.

Text: CSS assigns specific fonts, text sizes, alignments, and colors to text.
Media: CSS assigns the image sizes for images on a web page, and it can add rounded corners and fancy borders to those images.
Links: CSS assigns colors to links.
Containers: CSS assigns the height and width of containers on a web page, as well as the colors or images that are used in the background to provide structure and style.

*** css basics

CSS rule
Also called a ruleset, the entire block of CSS code assigned to style an HTML element
CSS selector
Code that identifies what HTML element should be affected by the declaration block that follows the selector
CSS property
The general category or type of stylistic change that you'd like to make
CSS value
The specific change that you want to make, such as pixel size or color
CSS declaration
The property and value applied to the selector
Hex color code
Also called hex value, an alphanumeric code used to specify a color value

<link href="style.css" rel="stylesheet" type="text/css" />

css rulesets
Rule or ruleset: This is the entire block of CSS code assigned to style an HTML element.
Selector: This is the name of the HTML element that will be styled.
Property: This is a set or family of attributes, or options, that you can change.
Value: This is the specific change you want to make, such as pixel size or color.
Declaration: This consists of both the property and the value assigned to the selector.

p { font-size: 16px; }
css rule = selector { property: value; }
  {...} = declaration
  selector = p
  property = font-size:
  value = value;

Selectors and declarations
A selector defines what element in the code should be affected by the declaration block that follows the selector.
The selector refers to a specific HTML element, like a p element in the image above.
In this case, every p element, or HTML paragraph, on the page will be styled by the information provided in the declaration block.
The declaration block begins and ends with curly brackets {}.
Each line inside of the {} represents a separate declaration, each of which applies a particular style or format to the referenced element.

Properties and values
Each declaration is made up of two components: a property and a value. At its most basic level, a CSS property is the general category or type of stylistic change you'd like to make. The value then specifies exactly what style you'd like to apply.
There are hundreds of CSS properties and values. The CSS Properties Reference from Mozilla is a valuable resource that shares only the most common properties. And as you'll see, it's still a long list! In fact, you will regularly discover new CSS properties and values over the course of your career.
In a declaration, the property is named first. It's followed by a colon :, then the value, and then a semicolon ; at the end. Structurally, declarations look like this: property: value;. One of the best ways to learn about properties and values is to see examples of how they work. Check out the one below. What do these declarations do?

colors
black #000000
white #ffffff
https://htmlcolorcodes.com/color-names/
https://coolors.co/

fonts fallbacks
This coding concept is referred to as font stacks, and it helps prevent issues if a computer or browser can't assign the requested font to the specified text. The font stack tells the code that if the first font—in this case, Arial—doesn't load properly, it should try the next font in the list. The code will try each font until it finds one that works properly. These are called font fallbacks.

Generally, the last font choice should be a general category of typeface that every device can work with. It likely won't be another specific font, but a broader type of font style, like serif or sans-serif. All of the following font categories will reliably show up on every machine, and can therefore be used at the end of your font stack.

Serif: Serif fonts are often used for headings. The letters in these fonts have little tapered ends or tails, which add a stylistic accent to text and make letters and characters more attractive at larger sizes.
Sans-serif: Sans-serif fonts are often used for paragraph text on websites. They have minimal flaring or tapering at the ends of letters, making smaller text easier to read.
Monospace: These fonts are often used for code samples, and all of the letters have the same width.
Cursive: This type of font has a playful, handwritten style, which can feel more emphatic than italics.
Fantasy: This type of font has a whimsical, decorative style. But use this as a fallback with care; it's more limited than other font groups.

More styles for text
As you explore CSS further, you'll likely want to play around with other text-related properties. Here are some examples:
font-style: This is how you can change the stylistic formatting of the font, such as adding italics (italic or oblique).
font-weight: This is how you set the thinness or thickness of a font. There are usually values from 100 to 900 available.
letter-spacing: This is how you determine the proximity of individual letters by increasing or decreasing the space between them, measured in pixels. For example, a value of 1px is fairly normal, or a value of -3px will pull the letters closer together.
line-height: This is how you increase or decrease the space between lines of text. For example, you could apply 20px of space between lines of text.
text-align: This property allows you to realign text to be center, left, right, or justified.
text-decoration: This allows you to add additional formatting, like underline, overline (text with a horizontal line above it, often used in math notation), or line-through (also known as strikethrough).
text-transform: This allows you to change the case of the letters, such as uppercase and lowercase.

** find html and css

Steps to finding the HTML
Follow the steps below to view the HTML on the Mend website or another website of your choosing.
Right-click the background or text of the web page, which will reveal a drop-down menu.
Click the View Page Source option in the drop-down.
The next page that opens up should reveal all of the HTML code on that web page. Take a moment to look around and review the HTML code. Although you aren't expected to understand any of this yet, you may be able to make sense of some of the code.

Steps to finding the CSS
The CSS code of a web page is often organized in another web file, which you'll need to look for. Follow the steps below.
Right-click the background or text of the web page, which will reveal a drop-down menu.
Click the View Page Source option in the drop-down.
Once you're in the page source, hit Control+F (or Command+F on a Mac) to open up the Find bar. Then, search for .css.
Your search will likely reveal more than one CSS file. How many CSS files are linked to this HTML page?
If you can, click one of the .css links to find the CSS.

** web page template

The index
A nice feature of Replit is that it provides the basic framework for a website built with HTML, CSS, and JavaScript. As mentioned above, this is useful because this code is used by every HTML page on the internet. In Replit, this foundational code can be found in the index.html file, or the index. This will help you get started.

Screenshot of HTML code in index.html displayed in a REPL on the Replit website.
Take a moment to explore and become familiar with the different parts of this core code. The pieces of the index are defined below.

DOCTYPE
<!DOCTYPE html>
As the name DOCTYPE suggests, this line of code declares this document as an HTML5 web page. This tag is the first line of HTML code, and it is required to be the first line of code in every HTML5 web page. It's important to note that this is the only HTML tag written in capital letters—all other HTML tags should be written in lowercase.

HTML
<html>
  ...
</html>
The <html> element identifies and contains the HTML code in HTML web pages. The opening and closing tags, <html> and </html>, wrap around all the HTML code that is related to the web page.

Head
<head>
  ...
</head>
Every HTML web page has a <head> element. The <head> contains all the important information web browsers and search engines need regarding a web page. In a way, this element is the brains of the web page. Although the <head> holds vital information about the web page, nothing within it is displayed on the actual web page. It'll include several of the components that you'll read about below, like meta tags, the <title> element, and the <link> element.

Meta tags
<meta charset="utf-8" />
The meta tag holds important information related to the data within the web page. The meta tag above is declaring the charset, or character set, to tell browsers how to process the characters and code within the file. What do you think this next meta tag does?

<meta name="viewport" content="width=device-width" />
The meta tag in this example sets the width of the web page to follow the screen-width of whichever device a user is looking at. For instance, the width of a computer monitor will be larger than the width of a phone screen, and this meta tag ensures that the web page displays properly across both devices. This meta tag will be particularly useful when you start building web pages that are responsive to different screen-widths.

Title
<title>replit</title>
The <title> element defines the web page title, like replit above. You can see this title in the web page tab at the top of a web browser, but you won't be able to see it display on the web page itself. In fact, it might be a slightly different (or extended) version of the displayed name or title of the web page. The <title> is also the name that will be used when a web page is bookmarked on a web browser.

Link
<link href="style.css" rel="stylesheet" type="text/css" />
The <link> element is used to connect and reference resources on the internet. In fact, it should seem familiar. You've used it in previous Replit projects to connect an external style.css file with the HTML web page.

Using an external CSS page can make things easier. With a separate style.css file, you can keep all the core CSS code written in one place, and then multiple HTML pages can reference that CSS file. That way, you can update the CSS code on all your web pages simultaneously and consistently simply by changing that one CSS file. And although this link doesn't need to be in the <head> element of the HTML page, it is a best practice to put it there.

The attribute rel stands for relationship—the relationship between the HTML document and the CSS file. The type specifies the media type of the linked file, and in this case, it's labeled as text/css. However, it's worth noting that the type attribute is no longer required in web pages, but it tends to stick around because, well, it doesn't hurt to have it.

Body
<body>
  ...
</body>
The <body> element contains all the HTML code for the text, images, links, and containers used for the web page structure. All of the content-based HTML code that you've worked with in previous lessons would be placed within the <body>.

Script
<script src="script.js"></script>
Similar to how the <link> element connects the HTML code to the CSS file, this <script> element pulls in the JavaScript code that is written in the script.js file. And just like it's a best practice to keep your CSS file in the <head>, it's a good idea to keep the script line of code at the bottom of the HTML page, below the other HTML code but just before the closing tag of the HTML element. This will allow the web page to load first (and faster) because the (heftier) JavaScript code will load last.

You won't be adding JavaScript to your HTML and CSS projects just yet. For now, you can just leave this where it is (or you can delete it).

The normalize.css file
Believe it or not, web browsers have their own default styles for displaying HTML—which can lead to some unexpected or problematic changes to your website. So an <h1> element on one page may look slightly different in Chrome and Firefox, even if they are the same code. Fortunately, there's a solution: normalize.css. Watch the video below to learn more.


Nicolas Gallagher's normalize.css is a CSS library that sets all HTML elements to display consistently across all supported web browsers. It's a small file that styles and formats headings, paragraphs, blockquotes, and other common HTML elements so that they appear identical (or very similar) on Chrome, Firefox, Safari, and other browsers.

Although you can download the normalize.css file and manage it locally, it tends to work best if you link to the file from a content delivery network, or CDN. It's a good idea to load the normalize.css file first in the code, before applying your own style rules using your own style.css file. You can see this in the code sample below.

Why is it better to reference normalize.css before your style.css file? Well, CSS will apply styles in the order that they appear in the code. This means that if you add the normalize.css file last, the styles in the normalize.css file may actually overwrite your styles! This concept will be covered in more depth in a later lesson. At this point, it's just important to remember which file to put in first.

One other thing to keep in mind: the only difference between a normalize.css file and a normalize.min.css file is that the .min version has all the spaces and visual formatting removed. This makes the code harder to read, but it creates a smaller file size—which is very helpful when millions of websites are referencing it.
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css"
    rel="stylesheet"
    type="text/css"
  />


A note on index.html files
The index.html icon
Return for a moment to the ever-important index.html file. The filename index.html is significant. When a web browser opens a folder with multiple HTML files, it will always display the index.html page first, without that page needing to be referenced. The video below provides a bit more information.

Every website's home page will be named index.html.
Naturally, working with multiple projects that all have the web page index.html can be confusing. This is why making a logical file organization, with proper project folder names, is essential.
The index.html file needs to be written in lowercase letters. Web file names tend to only use lowercase letters to prevent simple mistakes.

But imagine if an index.html file is missing from a web directory. In this case, two things could happen, based on the web server's preferences:
The web page opens a 404: File not found error, as seen below.
Screenshot of GitHub's 404: File not found page.
The web page displays a list of all the files in that directory, as seen below. However, this can be dangerous, as any file from this directory can be viewed and then downloaded. In this situation, the web page display will depend on your web hosting provider and how they handle directories without index.html files.

Tips for naming folders and files
Avoid spaces in your filenames. Never use spaces in any web file or folder names. Every space will be converted into a %20⁠, which can make the names of your folders and files unreadable. For example, the filename bad web page.html will look like this when viewed online: http://www.example.com/bad%20web%20page.html. Without spaces, that URL could be much cleaner and clearer.
Use hyphens to separate your words. Use hyphens - rather than spaces. Turns out, search engine optimization, or SEO, appreciates hyphens. (And SEO helps determine how websites get ranked in users' search queries.) Here's a good use of hyphens: http://www.website.com/sub-folder/file-name.html.
Avoid underscores to separate your words. Underscores, on the other hand, aren't preferable. SEO considers filenames with underscores as one full name, so underscores are not as good as hyphens when it comes to search engine ranking. Here's an example of what not to do: http://www.website.com/sub_folder/really_bad_topic.html.
Use only lowercase letters. Web servers are case sensitive. For this reason, it's important to write both filenames and folder names in lowercase letters; this prevents confusion regarding what is or isn't capitalized.
Use descriptive words. Use specific, descriptive words to explain what the file is, does, or shows. Using good names helps keep you organized, too. Consider these examples:
Bad: image1.jpg
Good: black-lab-puppy.jpg
Bad: page.html
Good: contact.html
Do not use special characters: Rely on the letters of the alphabet (A through Z), the numbers 0 through 9, and hyphens (-). But web servers will not link properly to filenames or folders with special symbols or characters. For that reason, don't use these: ; / ? : @ = + \ $ , < > # % " { } | \ ^ [ ].

** links and paths

URL path
A web address that directs the computer to the precise location of an asset or file, with each necessary step in the path separated by a forward slash
Absolute link
A link that uses the full URL path and can link to content outside of the current website
Relative link
A link that uses a path that connects one file to another file on the same server

anchor elements = <a></a>
anchor elements, represented by the <a>, to wrap around text or images to create a link.
Inside the <a> element, there is an attribute called href. The href, which stands for hypertext reference, refers to the web page that will open when the link is clicked. The web page that opens is based on the specific URL path that is provided in the href

absolute link paths
Web server name: This is the www.webserver.com in the example below.
Names of folder or folders: The path could require multiple folders and subfolders. This is seen in the /folder/subfolder/ below.
Filename: Finally, the path ends with the filename itself: /filename.html.
<a href="http://www.webserver.com/folder/subfolder/filename.html">Link</a>

Relative link paths
Names of folder or folders: The path could require multiple folders and subfolders. This is seen in the /folder/subfolder/ part of the code below.
Filename: The path ends with the filename itself: /filename.html.
<a href="folder/subfolder/filename.html">Link</a>

Relative link paths can call, or retrieve, files from within the same directory, or they can follow a more complicated route into various folders and subfolders until they connect the path to the web page or image file. Like with absolute links, the / tracks the route into multiple locations to find the desired file, even within the same website. However, relative links work differently than absolute paths. Relative links are different from absolute paths in the following ways:

With relative paths, the web page and the referencing file must be within the same website structure.
With relative paths, the paths are dependent on where the file is located in reference to the web page.

Here are some examples of relative link paths:
about.html
contact.html
portfolio/project1/index.html
portfolio/project2/index.html

Here are some examples of relative image paths:
images/waterfalls/iceland-waterfall.jpg
gallery/nature/waterfall.jpg

relative link paths up ../file
<img src="../images/logo.jpg" />
<img src="../../images/logo.jpg" />

Open links in new tabs
<a href="http://www.website.com" target="_blank">Link</a>

Contact links
Whenever you provide an email address or phone number within your website, you can use certain HTML attributes to make the links far more user friendly. Here is the complete collection of options for your reference:
Including a basic email link
Including an email link with a subject
Adding CC and BCC to an email link
Adding body text to an email Link
Styling email links
Including telephone links
Opening file links
Downloading file links

   <!-- BASIC EMAIL LINK HERE -->
    <p><a href="mailto:hello@yoursite.com">Email Me: </a></p>
    <hr>

** more web elements

Unordered list
Also called a bulleted list, a list with items that have no particular order
Ordered list
Also called a numbered list, a list with items that must be laid out in a specific sequence
Horizontal rule
Also called a page divider or a ruler, a line that separates distinct blocks of content
Pseudo-class
A CSS selector that selects HTML elements in a given state

Code comments


Here are some of the primary reasons for using comments in HTML, CSS, JavaScript, and most other programming languages:
To describe and explain complicated code and create reminders for yourself and others
To deliberately disable sections of code
To improve collaboration with other developers working on the code, helping them clearly understand what needs to be added, fixed, or removed in the code
To add titles to the sections of long pages of code to make the pages easier to scan
It's important to note that HTML and CSS comments are not tags. They also are not written in the same way; they have a distinct syntax.

HTML comments
Comments in the HTML code are written with dashes – and an exclamation point !, all enclosed in two angle brackets <>. They're structured like this: <!-- HTML comment -->. Take a look at the example below.
<!-- This would be an HTML comment. Useful notes can be placed here -->

<!--
  This works
  for multiple
  lines as well
-->

CSS comments
Comments in CSS are written with asterisks * and forward slashes /. They're structured like this: /* CSS comment */. Take a look at the example below.

/* Hello, commenting! */

/*
  I can also be on multiple lines!
*/
Any CSS code that sits between the opening /* symbol and the closing */ symbol is completely ignored by the web browser. Like in HTML and JS, CSS comments are grayed out in code editors.

html lists
Lists are used to break up and organize content within a web page, making it much easier for a user to read and understand.

HTML supports two kinds of lists: unordered lists, for list items that have no particular order, and ordered lists, for items that must be laid out in a specific sequence or arrangement. Unordered lists often use bullets, and ordered lists often use consecutive numbers or letters.

You'll use these HTML tags to make these lists:

<ul>: This stands for unordered list. You'll use the opening tag <ul> and the closing tag </ul>.
<ol>: This stands for ordered list. You'll use the opening tag <ol> and the closing tag </ol>.
<li>: This stands for list item. You'll use the opening tag <li> and the closing tag </li> to set off every item in a list.

Check out the examples below.
<h2>My Hobbies</h2>
<ul>
  <li>Skiing</li>
  <li>Painting</li>
  <li>Coding</li>
</ul>

<h2>My Top 3 Movies</h2>
<ol>
  <li>Inside Out</li>
  <li>Up</li>
  <li>Coco</li>
</ol>

styling html list
ul { }: This targets all unordered lists.
ol { }: This targets all ordered lists.
li { }: This targets all list items of both unordered and ordered lists.

Embedded lists
Sometimes, however, you might have a list item that has additional list items—a list within a list. Fortunately, HTML lets you nest lists inside one another.

When you nest lists in HTML, the inner list, which is the sublist, will be indented inside the outer list. An indented sublist uses a circle icon, but with a little extra customization, you can create unique embedded lists with unique icons. Take a look at the code for these embedded lists below. Can you track where and how the sublists begin?

<h1>Lessons to Write Today</h1>
<ol>
  <li>Lesson Introduction</li>
  <li>HTML Lists
    <ul>
      <li>Unordered</li>
      <li>Ordered</li>
    </ul>
  </li>
  <li>Code Comments
    <ul>
      <li>HTML</li>
      <li>CSS</li>
    </ul>
  </li>
  <li>Link Breaks</li>
  <li>RollOvers</li>
</ol>

Changing the position
You also have the ability to shift the positioning of the list using the list-style-position property. Specifically, this allows you to move bullets or numbers inside or outside (which is the default) of the list-item container (you'll learn more about containers in subsequent lessons). This technique can be particularly useful if you're assigning a background color to a list and moving the bullets within the container.

Page dividers and horizontal rules
Page dividers allow you to organize web page content by creating a separation between distinct blocks of content. In HTML, these dividers are called horizontal rules (sometimes called rulers). You'll see these written into the HTML as <hr>. Horizontal rules are self-closing; in other words, there is no closing tag.

Styling horizontal rules
The horizontal rule in the REPL above was fairly simple, and generally, horizontal rules are pretty simple by default. But with a little CSS, they can be styled to display in better, more compelling ways. Here are some basic CSS styles for horizontal rules:
height: This makes the border a certain height, in pixels (px).
background-color: This makes the ruler a certain color inside the border.
border: This requires three values to change the style of the border: the size in pixels, the color, and the stroke.
margin-top: This adds empty space above the line.
margin-bottom: This adds empty space below the line.

Text-formatting elements
There are 10 formatting elements in HTML that provide a default visual style to HTML text. These all change the visual style and formatting, but some also add meaning to the content and code, which can be useful for search engines. This is called semantic coding, which you'll learn more about later. For now, it's just important to know that it relies on logical descriptive terms to make it easier for search engines (and people) to read and understand what the code is doing.

<b>: Sets the text in bold.
<strong>: Sets the text in bold and is semantically important.
<i>: Sets the text in italics.
<em>: Sets the text in italics and is semantically important.
<mark>: Sets the text as highlighted.
<small>: Sets the text as smaller than the rest of the element.
<del>: Sets the text to display as crossed out.
<ins>: Sets the text to display as inserted by adding an underline to the text.
<sub>: Sets the text as subscript, which is smaller and a bit below the other text.
<sup>: Sets the text as superscript, which is smaller and a bit above the other text.

Line break
At times, you may want to create a line break in your web page. A break in a line of text can be created using <br>. Like horizontal rules, line breaks are self-closing—you only need to add the single opening tag: <br>. It's worth noting that in older versions of HTML, like HTML4, line breaks were written with a forward slash, </br>. You may see this from time to time in your online research.

However, this HTML element should be used only to make line breaks. Don't use <br> to separate paragraphs of text or to create space between HTML elements. If you need to create space between text or images in CSS, you should work with margins or padding. But don't worry; you'll learn more about this in upcoming lessons.

styling links
Pseudo-classes
Okay, you're ready for the next piece of the puzzle. The interactive links of HTML are referred to as a pseudo-class. Pseudo-classes are useful in changing the state of an element when the user engages with it, like in these situations:

When an element, like a text link, has the cursor roll over (or hover over) it.
When an element, like a text link, has the cursor click it.

For anchor elements, which you've already learned a bit about, there are four pseudo-class selectors:
a:link: This is the normal state of a text link.
a:visited: This is the state of a text link that has already been visited by the current web browser.
a:hover: This creates the rollover state for the element, which is triggered when the user's cursor rolls over, or hovers over, a link.
a:active: This affects the state of the link when the user is actively clicking on it.

Due to the cascading aspect of CSS, the order of these pseudo-classes is very important. They must be written on CSS page in the specific sequence outlined below:
a:link
a:visited
a:hover
a:active

A clever way to help you remember the order of these pseudo-class selectors is this mnemonic device: L O V E HA TE. The order of the letters can help remind you of this order: L for link, V for visited, H for hover, and A for active.

y setting the border-radius to 50% on all corners, you'll end up displaying a perfectly circular image, without the need for graphic design software

** html containers

HTML containers
HTML elements that wrap around web page content—namely text, images, and links—in order to help you manage the layout and positioning of that content
Semantic code
Code that has a specific, logical meaning that helps describe the content that it is associated with
Semantic container
An HTML element designed to contain images, text, and links to help with page layout and positioning
Search engine optimization
SEO, the process of tailoring web content so that search engines will prioritize your website in relevant search queries

Introduction to HTML containers
So, what are containers? Containers are specific HTML elements that wrap around web page content—namely text, images, and links—in order to help you manage the layout and positioning of that content. These are the most common HTML5 container tags:

<header> ... </header>
<nav> ... </nav>
<footer> ... </footer>
<main> ... </main>
<article> ... </article>
<section> ... </section>
<div> ... </div>

Before you learn about what each does, you'll need to understand how these containers are similar and why they're important. Here are the similarities:

They all work the exact same way.
They all wrap around text, images, and links.
They all provide the same starting shape and placement within the flow of the web page.

And here's why they're important and how they work within the web:
Search engines use containers to compare content across websites. Specifically, they look at the content within web page containers in order to rank the importance of one website over another. Therefore, using these containers properly and effectively will give your web pages more clout on the web.
Containers make it easier to read code. The containers group relevant content within it, so it's easier to find what you're looking for. For instance, if you have a logo and navigation within a header container, then you know to look first for the <header>. There, you'll find the logo and navigation.

Semantic code and containers
At its most basic level, semantics is the study of the meaning of words and phrases. It involves looking at the logic behind language. As you began to see in the previous lesson, semantics play a role in HTML coding. Semantic code is code that has a specific, logical meaning that helps describe the content that it is associated with.

In code, semantic elements more clearly, simply, and (in a way) literally express what they do than non-semantic elements. They do more than provide instructions about how the code should appear or what it should do. Semantic code also has semantic significance that makes it easier for search engines, computers, and programmers to read and understand how it operates.

For instance, consider the text-formatting elements you learned about: <b> and <strong>. If you wanted to make text bold on your web page, you could use either. But the <b> isn't semantic—it doesn't have any other significance other than saying that the text should be presented as bold. An alternative, and better, semantic tag for bolding is <strong>. This tag is preferable because it's actually providing a robust description.

But what is a semantic container? A semantic container is an HTML element designed to contain images, text, and links to help with page layout and positioning. But because it's semantic, a semantic container also has a specific meaning for search engines and the developer. Like semantic code, it helps describe the content that it is associated with.

header container
As you build web pages, you'll find that nearly every web page that you create should have a header container, which is enclosed in <header> and </header>. A header container helps identify the topics of the content in the web page. The header container may be placed over the navigation, or it can wrap around the navigation so the navigation sits within the header.

As mentioned above, containers help search engines understand and organize websites. Therefore, when used properly, these containers can help improve the search engine optimization, or SEO, of a website, which deals with how search engines rank and prioritize websites in search queries.

To improve the SEO of your website, make sure that the primary header on your web page contains the name of your company or the purpose of the web page. Typically, this will be displayed as a logo in the header.

Because of the hierarchy of the web page content, placing the company or business name within a <h1> heading element will tell search engines you are prioritizing this element of content. Then, within the content sections of the web page, you can use <h2> elements for the important page section titles, and you can rely on <h3> (or smaller) elements for the subheadings of smaller sections on the web page.

Grouping and arranging your content like this helps keep the web page organized for you, your audience, and search engines.

<header> ... </header>

navigation container
As you might've guessed, the navigation container, set off by <nav> and </nav>, holds the primary navigation links for the website. A navigation container can be used multiple times, at both the top and the bottom of a web page, and contain the main web page links that help orient and guide users through the website. And when the navigation container is placed at the top of a web page, the navigation container can be placed above, below, or within a header container.

Keep in mind that the navigation container does not need to contain every link within a web page. This container is reserved for the primary navigation links, which helps you and search engines understand what links it contains. Though you may still have questions about using navigation links and navigation containers, at this stage, you only need to understand the purpose of the navigation container. The detailed CSS styles used to create that actual navigation will be covered in more detail in future lessons.

<header>
<nav>...</nav>
</header>

footer container
The footer container, which is set off by <footer> and </footer>, sits at the bottom of the web page. It contains important contextual information, such as relevant links or legal details, about the web page content that is placed above it.

Each web page should have at least one footer. This is beneficial for both SEO and accessibility. The footer can contain different kinds of information, including the following:

Copyright details
Copyright links
Credit to the website author or designer
Links to related documents or web pages

Main container
The main container, enclosed in <main> and </main>, groups together all the main content of a web page.

Note: There can only be one main container per HTML web page. It's essential to include only one main container.

The main container should not contain any content that is repeated across files, such as the following:

Sidebars
Navigation links
Copyright information
Website logos
Search forms

Article container
Next up: article containers. Article containers, set off by <article> and </article>, are useful for grouping related content within the web page, generally inside the main container. The content within an article container should be cohesive or connected in some way; the content in an article container should make sense if it were read or seen independently.

For example, if an article container were distributed separately from the rest of the website, it should feel like it stands alone. The emphasis on using article containers for distinct, unique content comes from the container's purpose of self-containment: an article container that holds a weather report for Denver, Colorado, could be moved from one website to another without requiring any additional content or explanation of context. Content like news articles, blog posts, or user comments might be held in article containers. However, when article containers are embedded within other article containers, they are assumed to be part of the parent container and not separate ones.

An article container should always have a heading, usually a heading between the size of an <h2> and an <h6>, because the <h1> should be the primary page heading. Here are some good types of content to contain in an article container:

Blog post
Forum post
News story
Comment

Section container
Now, you're ready for the section container. The section container, set off by <section> and </section>, groups together certain content within a web page, and it should always have a heading, usually an <h3>,<h4>,<h5>, or <h6>. The <h1> should be the primary page heading, and <h2> should be reserved for the article container heading.

Sections can be used to group related content within article containers, and they are represented by the individual parts within a larger <article>. However, often other containers are better suited to this purpose than a section container. Try to avoid using section containers if other containers, such as article or navigation containers, are more appropriate. Div containers can also be better for styling purposes. And be sure to only use a section container if there is a heading at the start of the section.

div container
The div container, set off by <div> and </div>, is the most generic container in HTML. And unlike the other containers above, it has no semantic meaning. As you learned above, this means that div containers mean nothing semantically to search engines; they don't provide any additional description about the content they contain to you or the web.

The div stands for division within the web page. Div containers, often referred to as divs, are used to structure web page content in a visual way. They are frequently used to position content within a web page. For instance, divs allow you to reposition content that is by default left aligned, allowing you to center the content within those structural containers discussed above.

Link to locations within a web page
In previous lessons, you learned how to link text or an image from one page to another web page. Now, you'll learn how to create a link that navigates to another location within the same page.

Imagine that you have a single-page website, with your Home, About Us, Services, and Contact Information as blocks on the web page (which you'll learn more about shortly). In this situation, it can be helpful to contain that content within article containers. That way, the user can navigate to different information, contained in article containers, on the page using anchor links.

But those links need to "know" where to navigate to. To ensure that a link takes the user to the correct destination on the web page, you need to assign an id attribute to the location that you want to link to. In this case, you'll add it to the article containers, like in the examples below.

<article id="home">Full Home Content Here</article>
<article id="about">Full About Content Here</article>
<article id="services">Full Services Content Here</article>
<article id="contact">Full Contact Content Here</article>
Then, when linking to an anchor's id, you'll include a hash symbol # and then the id name that you assigned, as seen here.

<a href="#contact">Contact Link</a>
This link will take you to the contact section of the web page!

Remember, it's important to follow the same naming conventions for id names as you would for web files.

Backgrounds: Colors and images
Just like other HTML elements, you can style containers. Specifically, you can give them different backgrounds, like a specific color or image. There are five properties that define the backgrounds for all HTML elements, including containers:

background-color
background-image
background-repeat
background-attachment
background-position

For now, you'll focus on learning about the first two: background-color and background-image. These are explained below. If you want to learn more, check out the MDN page on backgrounds, which provides more information about these properties.

Background color
As you may have guessed, the background-color property assigns a color to the background of an HTML element, such as a container. The color can be assigned using either a color name or a hex color code. Both of the examples below are valid.

Color name: red
Hex color code: #ff0000

Background image
The background-image property, on the other hand, assigns an image to display as the background of an HTML element. The background-image allows you to easily display an image behind the text within a container.

An image in the background of an HTML element repeats by default. This means that it displays at its native size and then is duplicated, on the right and bottom of the image, to cover the entire background of the HTML element.

** Intro to GitHub

Version control systems
Systems for managing changes to files, software, websites, and other computer or web-based programs
Local repository
Also called the local repo, the project folder that is stored on your computer
Remote repository
Also called the remote repo, the GitHub project folder that is stored on the GitHub.com website
Owner
The person who creates a repo, determines if it is public or private, and determines how code that is submitted to a project from others is managed
Collaborator
A person who has been invited by the repository owner to contribute to a project, and who has the ability to edit the code in that repo
Commit
Saving new changes to a version of a file, typically in a version control program like GitHub

Version control: Version control allows many people to make and save changes for multiple versions of a project or program. This means you and other developers can experiment, make mistakes, and revert back to an earlier version if necessary.
One safe place: These services securely store your projects in one safe place on the web. You can work locally and on more than one computer, but you always have an online backup. This one location makes storage easy and convenient.
Collaboration: More often than not, coding projects require multiple people to work nearly simultaneously. Version control systems allow many different contributors to edit and change the same set of files at the same time.

The GitHub language
As you get started with GitHub, you'll need to learn the lingo. Here are some new GitHub terms and concepts that will prove useful to you in your time at Thinkful and in your career.
Git: This is the open-source system used for version control. It's used by many companies, but GitHub is the most popular.
GitHub.com: The website where users can store and manage versions of their code projects online.
GitHub.io: The website that displays websites that are stored on GitHub.com online, for all users to view.
GitHub Desktop: A free app that is installed locally on your computer. It makes it easy to update code projects from your computer to GitHub.com.
Repository: This is a project's folder that contains all of the files for the project, as well as each file's revision history. This is commonly called a repo. There are local repositories, which are on your computer, and remote repositories, which are on GitHub.com. These will be explained in more depth below.
Public repo: These are publicly accessible repositories. GitHub provides free access to any public repo.
Private repo: This is a repo that only you (or others who you give access to) can see. GitHub also makes it free to store private repos; however, to access most of the functionality of a private repo, you'll need to pay a monthly fee.
Owner: The person who creates a repo and therefore determines if it is public or private. They determine how code that is submitted to a project from others is managed.
Collaborator: A person who has been invited by the repository owner to contribute to a project. They have been granted access to a repo, and they have the ability to edit the code in that repo.
Commit: A fancy technical term that's used to refer to saving new changes to a version of a file.

As noted above, when using GitHub for a project, you'll be working with two repos: a local repository and a remote repository. For any given project, these two repos would be the same. The difference is where you're making changes to the files.

The local repository, or local repo, is the project folder that is stored on your computer. It's the local (in other words, not web-based) folder that contains all the files for the project. Edits can be made to any of these files, even if you're offline. When you're online, you can upload those changes to the files that are on GitHub.com.
The remote repository, or remote repo, is the GitHub project folder that is stored on the GitHub.com website. If the remote repo is a public repo, anyone can view the code and the organization of those files. If it's a private repo, only people who are invited can view the code and files. These repos can be downloaded onto any computer and synced with changes made by any team members.
